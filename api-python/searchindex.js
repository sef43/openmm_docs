Search.setIndex({"docnames": ["app", "generated/openmm.OpenMMException", "generated/openmm.amd.AMDForceGroupIntegrator", "generated/openmm.amd.AMDIntegrator", "generated/openmm.amd.DualAMDIntegrator", "generated/openmm.app.amberinpcrdfile.AmberInpcrdFile", "generated/openmm.app.amberprmtopfile.AmberPrmtopFile", "generated/openmm.app.charmmcrdfiles.CharmmCrdFile", "generated/openmm.app.charmmcrdfiles.CharmmRstFile", "generated/openmm.app.charmmparameterset.CharmmParameterSet", "generated/openmm.app.charmmpsffile.CharmmPsfFile", "generated/openmm.app.checkpointreporter.CheckpointReporter", "generated/openmm.app.dcdfile.DCDFile", "generated/openmm.app.dcdreporter.DCDReporter", "generated/openmm.app.desmonddmsfile.DesmondDMSFile", "generated/openmm.app.element.Element", "generated/openmm.app.forcefield.ForceField", "generated/openmm.app.gromacsgrofile.GromacsGroFile", "generated/openmm.app.gromacstopfile.GromacsTopFile", "generated/openmm.app.internal.charmm.exceptions.CharmmPSFWarning", "generated/openmm.app.metadynamics.BiasVariable", "generated/openmm.app.metadynamics.Metadynamics", "generated/openmm.app.modeller.Modeller", "generated/openmm.app.pdbfile.PDBFile", "generated/openmm.app.pdbreporter.PDBReporter", "generated/openmm.app.pdbreporter.PDBxReporter", "generated/openmm.app.pdbxfile.PDBxFile", "generated/openmm.app.simulatedtempering.SimulatedTempering", "generated/openmm.app.simulation.Simulation", "generated/openmm.app.statedatareporter.StateDataReporter", "generated/openmm.app.topology.Atom", "generated/openmm.app.topology.Chain", "generated/openmm.app.topology.Residue", "generated/openmm.app.topology.Topology", "generated/openmm.mtsintegrator.MTSIntegrator", "generated/openmm.mtsintegrator.MTSLangevinIntegrator", "generated/openmm.openmm.AmoebaGeneralizedKirkwoodForce", "generated/openmm.openmm.AmoebaMultipoleForce", "generated/openmm.openmm.AmoebaTorsionTorsionForce", "generated/openmm.openmm.AmoebaVdwForce", "generated/openmm.openmm.AmoebaWcaDispersionForce", "generated/openmm.openmm.AndersenThermostat", "generated/openmm.openmm.BrownianIntegrator", "generated/openmm.openmm.CMAPTorsionForce", "generated/openmm.openmm.CMMotionRemover", "generated/openmm.openmm.CompoundIntegrator", "generated/openmm.openmm.Context", "generated/openmm.openmm.Continuous1DFunction", "generated/openmm.openmm.Continuous2DFunction", "generated/openmm.openmm.Continuous3DFunction", "generated/openmm.openmm.CustomAngleForce", "generated/openmm.openmm.CustomBondForce", "generated/openmm.openmm.CustomCVForce", "generated/openmm.openmm.CustomCentroidBondForce", "generated/openmm.openmm.CustomCompoundBondForce", "generated/openmm.openmm.CustomExternalForce", "generated/openmm.openmm.CustomGBForce", "generated/openmm.openmm.CustomHbondForce", "generated/openmm.openmm.CustomIntegrator", "generated/openmm.openmm.CustomManyParticleForce", "generated/openmm.openmm.CustomNonbondedForce", "generated/openmm.openmm.CustomTorsionForce", "generated/openmm.openmm.Discrete1DFunction", "generated/openmm.openmm.Discrete2DFunction", "generated/openmm.openmm.Discrete3DFunction", "generated/openmm.openmm.DrudeForce", "generated/openmm.openmm.DrudeIntegrator", "generated/openmm.openmm.DrudeLangevinIntegrator", "generated/openmm.openmm.DrudeNoseHooverIntegrator", "generated/openmm.openmm.DrudeSCFIntegrator", "generated/openmm.openmm.Force", "generated/openmm.openmm.GBSAOBCForce", "generated/openmm.openmm.GayBerneForce", "generated/openmm.openmm.HarmonicAngleForce", "generated/openmm.openmm.HarmonicBondForce", "generated/openmm.openmm.HippoNonbondedForce", "generated/openmm.openmm.Integrator", "generated/openmm.openmm.LangevinIntegrator", "generated/openmm.openmm.LangevinMiddleIntegrator", "generated/openmm.openmm.LocalCoordinatesSite", "generated/openmm.openmm.LocalEnergyMinimizer", "generated/openmm.openmm.MonteCarloAnisotropicBarostat", "generated/openmm.openmm.MonteCarloBarostat", "generated/openmm.openmm.MonteCarloFlexibleBarostat", "generated/openmm.openmm.MonteCarloMembraneBarostat", "generated/openmm.openmm.NonbondedForce", "generated/openmm.openmm.NoseHooverChain", "generated/openmm.openmm.NoseHooverIntegrator", "generated/openmm.openmm.OutOfPlaneSite", "generated/openmm.openmm.PeriodicTorsionForce", "generated/openmm.openmm.Platform", "generated/openmm.openmm.RBTorsionForce", "generated/openmm.openmm.RMSDForce", "generated/openmm.openmm.RPMDIntegrator", "generated/openmm.openmm.RPMDMonteCarloBarostat", "generated/openmm.openmm.SerializationNode", "generated/openmm.openmm.SerializationProxy", "generated/openmm.openmm.State", "generated/openmm.openmm.System", "generated/openmm.openmm.TabulatedFunction", "generated/openmm.openmm.ThreeParticleAverageSite", "generated/openmm.openmm.TwoParticleAverageSite", "generated/openmm.openmm.VariableLangevinIntegrator", "generated/openmm.openmm.VariableVerletIntegrator", "generated/openmm.openmm.VerletIntegrator", "generated/openmm.openmm.VirtualSite", "generated/openmm.openmm.XmlSerializer", "generated/openmm.unit.basedimension.BaseDimension", "generated/openmm.unit.baseunit.BaseUnit", "generated/openmm.unit.prefix.SiPrefix", "generated/openmm.unit.quantity.Quantity", "generated/openmm.unit.unit.ScaledUnit", "generated/openmm.unit.unit.Unit", "generated/openmm.unit.unit.UnitSystem", "generated/openmm.vec3.Vec3", "index", "library"], "filenames": ["app.rst", "generated/openmm.OpenMMException.rst", "generated/openmm.amd.AMDForceGroupIntegrator.rst", "generated/openmm.amd.AMDIntegrator.rst", "generated/openmm.amd.DualAMDIntegrator.rst", "generated/openmm.app.amberinpcrdfile.AmberInpcrdFile.rst", "generated/openmm.app.amberprmtopfile.AmberPrmtopFile.rst", "generated/openmm.app.charmmcrdfiles.CharmmCrdFile.rst", "generated/openmm.app.charmmcrdfiles.CharmmRstFile.rst", "generated/openmm.app.charmmparameterset.CharmmParameterSet.rst", "generated/openmm.app.charmmpsffile.CharmmPsfFile.rst", "generated/openmm.app.checkpointreporter.CheckpointReporter.rst", "generated/openmm.app.dcdfile.DCDFile.rst", "generated/openmm.app.dcdreporter.DCDReporter.rst", "generated/openmm.app.desmonddmsfile.DesmondDMSFile.rst", "generated/openmm.app.element.Element.rst", "generated/openmm.app.forcefield.ForceField.rst", "generated/openmm.app.gromacsgrofile.GromacsGroFile.rst", "generated/openmm.app.gromacstopfile.GromacsTopFile.rst", "generated/openmm.app.internal.charmm.exceptions.CharmmPSFWarning.rst", "generated/openmm.app.metadynamics.BiasVariable.rst", "generated/openmm.app.metadynamics.Metadynamics.rst", "generated/openmm.app.modeller.Modeller.rst", "generated/openmm.app.pdbfile.PDBFile.rst", "generated/openmm.app.pdbreporter.PDBReporter.rst", "generated/openmm.app.pdbreporter.PDBxReporter.rst", "generated/openmm.app.pdbxfile.PDBxFile.rst", "generated/openmm.app.simulatedtempering.SimulatedTempering.rst", "generated/openmm.app.simulation.Simulation.rst", "generated/openmm.app.statedatareporter.StateDataReporter.rst", "generated/openmm.app.topology.Atom.rst", "generated/openmm.app.topology.Chain.rst", "generated/openmm.app.topology.Residue.rst", "generated/openmm.app.topology.Topology.rst", "generated/openmm.mtsintegrator.MTSIntegrator.rst", "generated/openmm.mtsintegrator.MTSLangevinIntegrator.rst", "generated/openmm.openmm.AmoebaGeneralizedKirkwoodForce.rst", "generated/openmm.openmm.AmoebaMultipoleForce.rst", "generated/openmm.openmm.AmoebaTorsionTorsionForce.rst", "generated/openmm.openmm.AmoebaVdwForce.rst", "generated/openmm.openmm.AmoebaWcaDispersionForce.rst", "generated/openmm.openmm.AndersenThermostat.rst", "generated/openmm.openmm.BrownianIntegrator.rst", "generated/openmm.openmm.CMAPTorsionForce.rst", "generated/openmm.openmm.CMMotionRemover.rst", "generated/openmm.openmm.CompoundIntegrator.rst", "generated/openmm.openmm.Context.rst", "generated/openmm.openmm.Continuous1DFunction.rst", "generated/openmm.openmm.Continuous2DFunction.rst", "generated/openmm.openmm.Continuous3DFunction.rst", "generated/openmm.openmm.CustomAngleForce.rst", "generated/openmm.openmm.CustomBondForce.rst", "generated/openmm.openmm.CustomCVForce.rst", "generated/openmm.openmm.CustomCentroidBondForce.rst", "generated/openmm.openmm.CustomCompoundBondForce.rst", "generated/openmm.openmm.CustomExternalForce.rst", "generated/openmm.openmm.CustomGBForce.rst", "generated/openmm.openmm.CustomHbondForce.rst", "generated/openmm.openmm.CustomIntegrator.rst", "generated/openmm.openmm.CustomManyParticleForce.rst", "generated/openmm.openmm.CustomNonbondedForce.rst", "generated/openmm.openmm.CustomTorsionForce.rst", "generated/openmm.openmm.Discrete1DFunction.rst", "generated/openmm.openmm.Discrete2DFunction.rst", "generated/openmm.openmm.Discrete3DFunction.rst", "generated/openmm.openmm.DrudeForce.rst", "generated/openmm.openmm.DrudeIntegrator.rst", "generated/openmm.openmm.DrudeLangevinIntegrator.rst", "generated/openmm.openmm.DrudeNoseHooverIntegrator.rst", "generated/openmm.openmm.DrudeSCFIntegrator.rst", "generated/openmm.openmm.Force.rst", "generated/openmm.openmm.GBSAOBCForce.rst", "generated/openmm.openmm.GayBerneForce.rst", "generated/openmm.openmm.HarmonicAngleForce.rst", "generated/openmm.openmm.HarmonicBondForce.rst", "generated/openmm.openmm.HippoNonbondedForce.rst", "generated/openmm.openmm.Integrator.rst", "generated/openmm.openmm.LangevinIntegrator.rst", "generated/openmm.openmm.LangevinMiddleIntegrator.rst", "generated/openmm.openmm.LocalCoordinatesSite.rst", "generated/openmm.openmm.LocalEnergyMinimizer.rst", "generated/openmm.openmm.MonteCarloAnisotropicBarostat.rst", "generated/openmm.openmm.MonteCarloBarostat.rst", "generated/openmm.openmm.MonteCarloFlexibleBarostat.rst", "generated/openmm.openmm.MonteCarloMembraneBarostat.rst", "generated/openmm.openmm.NonbondedForce.rst", "generated/openmm.openmm.NoseHooverChain.rst", "generated/openmm.openmm.NoseHooverIntegrator.rst", "generated/openmm.openmm.OutOfPlaneSite.rst", "generated/openmm.openmm.PeriodicTorsionForce.rst", "generated/openmm.openmm.Platform.rst", "generated/openmm.openmm.RBTorsionForce.rst", "generated/openmm.openmm.RMSDForce.rst", "generated/openmm.openmm.RPMDIntegrator.rst", "generated/openmm.openmm.RPMDMonteCarloBarostat.rst", "generated/openmm.openmm.SerializationNode.rst", "generated/openmm.openmm.SerializationProxy.rst", "generated/openmm.openmm.State.rst", "generated/openmm.openmm.System.rst", "generated/openmm.openmm.TabulatedFunction.rst", "generated/openmm.openmm.ThreeParticleAverageSite.rst", "generated/openmm.openmm.TwoParticleAverageSite.rst", "generated/openmm.openmm.VariableLangevinIntegrator.rst", "generated/openmm.openmm.VariableVerletIntegrator.rst", "generated/openmm.openmm.VerletIntegrator.rst", "generated/openmm.openmm.VirtualSite.rst", "generated/openmm.openmm.XmlSerializer.rst", "generated/openmm.unit.basedimension.BaseDimension.rst", "generated/openmm.unit.baseunit.BaseUnit.rst", "generated/openmm.unit.prefix.SiPrefix.rst", "generated/openmm.unit.quantity.Quantity.rst", "generated/openmm.unit.unit.ScaledUnit.rst", "generated/openmm.unit.unit.Unit.rst", "generated/openmm.unit.unit.UnitSystem.rst", "generated/openmm.vec3.Vec3.rst", "index.rst", "library.rst"], "titles": ["Application Layer", "OpenMMException", "AMDForceGroupIntegrator", "AMDIntegrator", "DualAMDIntegrator", "AmberInpcrdFile", "AmberPrmtopFile", "CharmmCrdFile", "CharmmRstFile", "CharmmParameterSet", "CharmmPsfFile", "CheckpointReporter", "DCDFile", "DCDReporter", "DesmondDMSFile", "Element", "ForceField", "GromacsGroFile", "GromacsTopFile", "CharmmPSFWarning", "BiasVariable", "Metadynamics", "Modeller", "PDBFile", "PDBReporter", "PDBxReporter", "PDBxFile", "SimulatedTempering", "Simulation", "StateDataReporter", "Atom", "Chain", "Residue", "Topology", "MTSIntegrator", "MTSLangevinIntegrator", "AmoebaGeneralizedKirkwoodForce", "AmoebaMultipoleForce", "AmoebaTorsionTorsionForce", "AmoebaVdwForce", "AmoebaWcaDispersionForce", "AndersenThermostat", "BrownianIntegrator", "CMAPTorsionForce", "CMMotionRemover", "CompoundIntegrator", "Context", "Continuous1DFunction", "Continuous2DFunction", "Continuous3DFunction", "CustomAngleForce", "CustomBondForce", "CustomCVForce", "CustomCentroidBondForce", "CustomCompoundBondForce", "CustomExternalForce", "CustomGBForce", "CustomHbondForce", "CustomIntegrator", "CustomManyParticleForce", "CustomNonbondedForce", "CustomTorsionForce", "Discrete1DFunction", "Discrete2DFunction", "Discrete3DFunction", "DrudeForce", "DrudeIntegrator", "DrudeLangevinIntegrator", "DrudeNoseHooverIntegrator", "DrudeSCFIntegrator", "Force", "GBSAOBCForce", "GayBerneForce", "HarmonicAngleForce", "HarmonicBondForce", "HippoNonbondedForce", "Integrator", "LangevinIntegrator", "LangevinMiddleIntegrator", "LocalCoordinatesSite", "LocalEnergyMinimizer", "MonteCarloAnisotropicBarostat", "MonteCarloBarostat", "MonteCarloFlexibleBarostat", "MonteCarloMembraneBarostat", "NonbondedForce", "NoseHooverChain", "NoseHooverIntegrator", "OutOfPlaneSite", "PeriodicTorsionForce", "Platform", "RBTorsionForce", "RMSDForce", "RPMDIntegrator", "RPMDMonteCarloBarostat", "SerializationNode", "SerializationProxy", "State", "System", "TabulatedFunction", "ThreeParticleAverageSite", "TwoParticleAverageSite", "VariableLangevinIntegrator", "VariableVerletIntegrator", "VerletIntegrator", "VirtualSite", "XmlSerializer", "BaseDimension", "BaseUnit", "SiPrefix", "Quantity", "ScaledUnit", "Unit", "UnitSystem", "Vec3", "OpenMM Python API", "Library Layer"], "terms": {"class": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115], "openmm": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114], "thi": [1, 2, 3, 4, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 115], "i": [1, 2, 3, 4, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 114, 115], "us": [1, 2, 3, 4, 6, 10, 11, 12, 13, 14, 15, 16, 18, 20, 21, 22, 24, 25, 27, 28, 29, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 110, 111], "all": [1, 2, 3, 4, 7, 8, 9, 10, 15, 16, 21, 22, 24, 25, 28, 29, 31, 32, 33, 34, 35, 36, 37, 39, 40, 42, 45, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 66, 67, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 80, 83, 85, 86, 87, 90, 92, 93, 94, 95, 96, 97, 102, 103, 104, 107, 108, 112], "except": [1, 10, 11, 19, 36, 46, 54, 56, 57, 59, 60, 71, 72, 75, 85, 90, 95, 97, 98, 110], "thrown": [1, 36, 56, 59, 60, 70, 71, 72, 75, 85, 90, 98], "c": [1, 10, 22, 46, 56, 58, 59, 90, 98, 110], "librari": [1, 90, 96, 114, 115], "__init__": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114], "arg": [1, 9, 16, 19, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 110], "kwarg": [1, 9, 19, 70, 76, 80, 90, 95, 96, 99, 105, 106, 110], "add_not": [1, 19], "note": [1, 9, 10, 11, 12, 16, 19, 22, 33, 56, 58, 61, 84, 85, 95, 97, 110], "add": [1, 2, 3, 4, 11, 13, 16, 19, 21, 22, 24, 25, 29, 33, 34, 35, 36, 37, 38, 39, 43, 45, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 65, 68, 70, 71, 72, 73, 74, 75, 79, 85, 87, 89, 91, 98, 100, 101, 110, 114], "with_traceback": [1, 19], "tb": [1, 19], "set": [1, 2, 3, 4, 6, 9, 10, 12, 16, 17, 19, 20, 22, 23, 26, 27, 28, 29, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 98, 99, 102, 103, 104, 112, 115], "self": [1, 2, 3, 4, 19, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 110, 112], "__traceback__": [1, 19], "return": [1, 2, 3, 4, 5, 6, 9, 10, 11, 13, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 28, 29, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105, 107, 108, 110, 111, 112, 114], "amd": [2, 3, 4], "dt": [2, 3, 4, 12, 34, 35, 58], "group": [2, 3, 4, 10, 22, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 87, 89, 91, 92, 93, 94, 102, 103, 104], "alphagroup": [2, 4], "egroup": [2, 4], "implement": [2, 3, 4, 6, 10, 16, 18, 21, 27, 34, 35, 36, 37, 38, 40, 43, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 85, 87, 89, 90, 91, 96, 98], "singl": [2, 3, 4, 13, 23, 24, 25, 26, 33, 34, 35, 39, 42, 45, 46, 54, 56, 58, 66, 67, 68, 69, 75, 76, 77, 78, 83, 85, 87, 90, 93, 102, 103, 104, 112], "boost": [2, 4], "integr": [2, 3, 4, 21, 27, 28, 34, 35, 42, 45, 46, 58, 66, 67, 68, 69, 70, 77, 78, 80, 85, 86, 87, 93, 94, 97, 98, 102, 103, 104, 115], "algorithm": [2, 3, 4, 22, 27, 34, 35, 37, 41, 42, 45, 58, 66, 67, 68, 69, 75, 77, 78, 80, 81, 82, 83, 84, 87, 93, 94, 102, 103, 104], "similar": [2, 4, 22, 33, 53, 54, 58, 59, 60, 72, 81, 83, 94, 110], "amdintegr": [2, 4], "appli": [2, 4, 10, 16, 21, 38, 43, 50, 51, 53, 54, 55, 56, 58, 59, 60, 61, 65, 66, 67, 68, 69, 70, 72, 73, 74, 81, 83, 85, 89, 91, 93, 102, 103, 112], "base": [2, 3, 4, 13, 16, 22, 24, 25, 33, 37, 39, 52, 53, 54, 56, 57, 58, 59, 60, 66, 67, 68, 72, 75, 85, 88, 92, 94, 95, 98, 105, 111, 112, 113], "energi": [2, 3, 4, 6, 11, 13, 16, 18, 20, 21, 22, 24, 25, 27, 28, 29, 34, 35, 38, 39, 43, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 67, 68, 69, 70, 71, 72, 75, 80, 85, 86, 87, 92, 93, 94, 97, 102, 103, 115], "forc": [2, 3, 4, 9, 11, 13, 14, 16, 20, 21, 22, 24, 25, 28, 29, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 89, 91, 92, 93, 94, 97, 98, 99, 102, 103, 104, 115], "typic": [2, 4, 39, 40, 57, 58, 60, 65, 67, 68, 85, 90, 96], "repres": [2, 4, 6, 10, 12, 14, 15, 16, 18, 22, 30, 31, 32, 33, 37, 39, 52, 55, 56, 57, 72, 80, 85, 90, 95, 98], "torsion": [2, 4, 10, 38, 43, 61, 89, 91], "For": [2, 3, 4, 10, 11, 18, 19, 22, 27, 28, 34, 35, 39, 43, 46, 52, 53, 54, 55, 56, 57, 58, 59, 60, 75, 79, 85, 90, 93, 94, 95, 97, 98, 108], "detail": [2, 3, 4, 11, 27, 34, 35, 37, 41, 42, 46, 52, 58, 66, 67, 69, 75, 77, 78, 81, 82, 83, 84, 85, 86, 93, 94, 98, 102, 115], "see": [2, 3, 4, 10, 27, 34, 35, 37, 39, 41, 42, 46, 58, 60, 66, 67, 69, 75, 77, 78, 81, 82, 83, 84, 85, 93, 94, 98, 102, 108, 115], "hamelberg": [2, 3, 4], "et": [2, 3, 4, 21, 22, 34, 35], "al": [2, 3, 4, 21, 22, 34, 35], "j": [2, 3, 4, 22, 27, 34, 35, 43, 78, 86, 87], "chem": [2, 3, 4, 22, 27, 34, 35, 78, 87], "phy": [2, 3, 4, 27, 34, 35, 78, 86, 87], "127": [2, 3, 4], "155102": [2, 3, 4], "2007": [2, 3, 4], "creat": [2, 3, 4, 6, 10, 11, 12, 13, 14, 15, 16, 18, 20, 21, 22, 23, 24, 25, 27, 28, 29, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105, 107, 108, 110, 112, 114], "paramet": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105, 108, 110, 112, 113], "time": [2, 3, 4, 11, 12, 13, 21, 22, 24, 25, 27, 28, 29, 34, 35, 36, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 75, 76, 77, 78, 81, 82, 83, 84, 85, 86, 87, 90, 93, 94, 97, 99, 102, 103, 104, 108], "The": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 112, 115], "step": [2, 3, 4, 11, 12, 13, 21, 24, 25, 27, 28, 29, 34, 35, 42, 44, 45, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 66, 67, 68, 69, 70, 76, 77, 78, 81, 82, 83, 84, 85, 86, 87, 93, 94, 97, 102, 103, 104], "int": [2, 3, 4, 7, 8, 9, 11, 12, 13, 14, 15, 17, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 110], "alpha": [2, 3, 4, 10, 37, 39, 75, 85], "cutoff": [2, 3, 4, 6, 10, 14, 16, 18, 22, 37, 39, 56, 57, 59, 60, 71, 72, 75, 85], "method": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115], "attribut": [2, 3, 4, 8, 10, 15, 27, 28, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 110, 114], "getalphagroup": [2, 4], "get": [2, 3, 4, 5, 11, 13, 14, 15, 16, 17, 21, 22, 23, 24, 25, 26, 29, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105], "valu": [2, 3, 4, 5, 6, 9, 10, 12, 14, 16, 17, 18, 20, 21, 22, 23, 26, 28, 29, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 80, 81, 82, 83, 84, 85, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 102, 103, 110, 112, 114], "setalphagroup": [2, 4], "getegroup": [2, 4], "threshold": [2, 3, 4], "e": [2, 3, 4, 10, 16, 27, 46, 85, 86, 108, 109, 110, 112], "setegroup": [2, 4], "geteffectiveenergi": [2, 3, 4], "groupenergi": [2, 4], "given": [2, 3, 4, 14, 46, 55, 80, 85, 86, 88, 103], "actual": [2, 3, 4, 9, 22, 29, 37, 57, 75, 81, 82, 83, 84, 85, 90, 97], "system": [2, 3, 4, 6, 7, 8, 10, 11, 12, 13, 14, 16, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 33, 34, 35, 36, 37, 39, 42, 44, 45, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 65, 66, 67, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 92, 93, 94, 97, 100, 101, 102, 103, 104, 105, 106, 110, 112, 113], "effect": [2, 3, 4, 21, 29, 34, 35, 36, 37, 39, 40, 42, 46, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 81, 82, 83, 85, 87, 89, 91, 93, 102, 103, 104], "potenti": [2, 3, 4, 6, 16, 18, 20, 21, 29, 37, 38, 39, 43, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 68, 69, 70, 72, 73, 74, 75, 80, 85, 87, 89, 91, 93, 97], "type": [2, 3, 4, 6, 7, 8, 9, 10, 11, 13, 15, 16, 18, 22, 24, 25, 29, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 110, 112, 115], "addcomputeglob": [2, 3, 4, 34, 35, 58], "variabl": [2, 3, 4, 20, 21, 34, 35, 42, 52, 53, 54, 55, 56, 58, 59, 66, 67, 68, 69, 76, 77, 78, 87, 90, 93, 102, 103, 104], "express": [2, 3, 4, 34, 35, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 108, 110, 112], "comput": [2, 3, 4, 6, 11, 21, 22, 28, 29, 34, 35, 43, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 70, 72, 75, 79, 85, 87, 88, 92, 93, 97, 98, 100, 101, 105, 108, 110, 112, 115], "global": [2, 3, 4, 11, 34, 35, 37, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 75, 85, 96], "string": [2, 3, 4, 9, 11, 13, 14, 15, 16, 17, 18, 22, 23, 24, 25, 26, 27, 28, 29, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 65, 70, 71, 72, 73, 74, 75, 81, 82, 83, 84, 85, 89, 90, 91, 92, 94, 95, 96, 106, 108, 110, 111, 112], "store": [2, 3, 4, 5, 9, 10, 12, 17, 23, 26, 28, 33, 34, 35, 36, 37, 39, 40, 41, 43, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 65, 70, 71, 72, 73, 74, 75, 81, 82, 83, 84, 85, 89, 90, 91, 92, 93, 94, 95, 96, 97, 108], "mathemat": [2, 3, 4, 34, 35, 58, 99], "involv": [2, 3, 4, 22, 32, 34, 35, 39, 43, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 65, 72, 73, 74, 75, 85, 89, 91, 98], "onli": [2, 3, 4, 6, 9, 10, 11, 18, 22, 28, 34, 35, 36, 37, 39, 40, 43, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 65, 68, 71, 72, 73, 74, 75, 80, 81, 83, 85, 86, 87, 89, 90, 91, 92, 93, 97, 99, 106, 110, 111, 112], "In": [2, 3, 4, 11, 21, 22, 33, 34, 35, 37, 39, 41, 42, 46, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 66, 67, 69, 72, 77, 78, 81, 82, 83, 84, 85, 86, 93, 94, 97, 98, 102, 103, 112], "each": [2, 3, 4, 9, 10, 12, 14, 16, 21, 22, 23, 27, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 93, 94, 95, 96, 97, 98, 102, 103, 104, 107, 113], "its": [2, 3, 4, 7, 10, 16, 21, 22, 34, 35, 36, 37, 38, 40, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 79, 85, 89, 90, 91, 95, 96, 98, 99, 112], "specifi": [2, 3, 4, 6, 10, 11, 12, 13, 15, 16, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 33, 34, 35, 36, 37, 38, 39, 43, 45, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 71, 72, 75, 76, 79, 80, 81, 82, 83, 84, 85, 88, 90, 93, 95, 96, 97, 102, 103, 110], "index": [2, 3, 4, 12, 16, 17, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 68, 70, 71, 72, 73, 74, 75, 79, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 98, 100, 101, 105, 114], "wa": [2, 3, 4, 10, 11, 16, 22, 28, 34, 35, 36, 37, 38, 39, 43, 45, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 65, 68, 71, 72, 73, 74, 75, 85, 87, 89, 91, 95, 97, 98, 102, 103], "ad": [2, 3, 4, 6, 10, 14, 16, 18, 20, 21, 22, 34, 35, 36, 37, 38, 39, 40, 43, 45, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 65, 71, 72, 73, 74, 75, 80, 85, 89, 91, 96, 98, 110], "addcomputeperdof": [2, 3, 4, 34, 35, 58], "per": [2, 3, 4, 34, 35, 36, 38, 39, 40, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 71, 73, 74, 85, 89, 91, 110], "dof": [2, 3, 4, 34, 35, 58], "both": [2, 3, 4, 22, 28, 34, 35, 58, 59, 60, 68, 71, 72, 75, 78, 85, 87, 90, 102, 103, 108, 110, 111, 112], "everi": [2, 3, 4, 9, 13, 21, 22, 24, 25, 27, 28, 34, 35, 46, 47, 48, 49, 56, 58, 59, 60, 62, 63, 64, 69, 83, 90, 93, 99], "degre": [2, 3, 4, 10, 16, 34, 35, 58, 86], "freedom": [2, 3, 4, 10, 16, 34, 35, 58, 86], "addcomputesum": [2, 3, 4, 34, 35, 58], "sum": [2, 3, 4, 22, 29, 34, 35, 56, 58, 79, 85, 97, 110], "over": [2, 3, 4, 31, 32, 33, 34, 35, 36, 37, 39, 40, 43, 45, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 65, 71, 72, 73, 74, 75, 81, 85, 89, 90, 91, 92, 97, 98, 103, 110], "those": [2, 3, 4, 9, 34, 35, 36, 37, 39, 40, 41, 42, 43, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 63, 64, 65, 66, 67, 69, 71, 72, 73, 74, 75, 77, 78, 81, 82, 83, 84, 85, 86, 89, 91, 92, 93, 94, 102, 110, 112], "ar": [2, 3, 4, 5, 6, 9, 10, 11, 12, 14, 16, 17, 18, 20, 21, 22, 23, 26, 27, 28, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 102, 103, 104, 110, 111, 112], "togeth": [2, 3, 4, 22, 28, 34, 35, 58, 75, 85, 90, 93], "addconstrainposit": [2, 3, 4, 34, 35, 58], "updat": [2, 3, 4, 14, 21, 34, 35, 36, 37, 39, 40, 43, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 71, 72, 73, 74, 75, 80, 85, 89, 91, 92, 99], "particl": [2, 3, 4, 10, 11, 13, 16, 22, 23, 24, 25, 28, 29, 34, 35, 36, 37, 38, 39, 40, 43, 44, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 79, 80, 85, 86, 87, 88, 89, 91, 92, 93, 97, 98, 100, 101, 105], "posit": [2, 3, 4, 5, 7, 8, 11, 12, 13, 14, 17, 21, 22, 23, 24, 25, 26, 28, 29, 33, 34, 35, 45, 46, 52, 53, 54, 55, 56, 58, 59, 69, 70, 72, 79, 80, 83, 92, 93, 97, 98, 105, 110], "so": [2, 3, 4, 9, 13, 16, 22, 24, 25, 27, 28, 33, 34, 35, 37, 39, 46, 53, 58, 59, 60, 72, 75, 84, 85, 93, 97], "constraint": [2, 3, 4, 6, 10, 16, 18, 34, 35, 42, 45, 46, 58, 66, 67, 68, 69, 76, 77, 78, 80, 87, 93, 98, 102, 103, 104], "satisfi": [2, 3, 4, 23, 26, 34, 35, 46, 58, 59, 80, 98], "addconstrainveloc": [2, 3, 4, 34, 35, 58], "veloc": [2, 3, 4, 5, 8, 11, 13, 14, 24, 25, 28, 29, 34, 35, 44, 45, 46, 58, 70, 78, 86, 93, 97, 98], "net": [2, 3, 4, 34, 35, 37, 46, 58], "along": [2, 3, 4, 21, 22, 34, 35, 37, 39, 40, 43, 46, 58, 65, 72, 75, 81, 82, 83, 84, 85], "0": [2, 3, 4, 6, 8, 10, 12, 14, 16, 17, 18, 20, 22, 23, 26, 28, 29, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 98, 100, 101, 102, 103, 104, 105, 112, 114], "addglobalvari": [2, 3, 4, 34, 35, 58], "name": [2, 3, 4, 5, 7, 8, 9, 10, 14, 15, 16, 17, 18, 22, 23, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 65, 70, 71, 72, 73, 74, 75, 81, 82, 83, 84, 85, 89, 90, 91, 92, 94, 95, 96, 107, 108, 111, 112], "initialvalu": [2, 3, 4, 34, 35, 58], "defin": [2, 3, 4, 9, 10, 12, 16, 17, 18, 20, 21, 22, 23, 26, 27, 29, 33, 34, 35, 36, 37, 39, 43, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 65, 68, 70, 71, 72, 75, 76, 80, 84, 85, 86, 87, 90, 97, 98, 99, 105, 108, 113], "new": [2, 3, 4, 9, 12, 13, 15, 16, 21, 22, 23, 26, 27, 30, 31, 32, 33, 34, 35, 37, 41, 43, 45, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 65, 71, 72, 73, 74, 75, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 94, 95, 96, 98, 100, 101, 106, 107, 108, 109, 110, 112, 114], "doubl": [2, 3, 4, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 97, 98, 100, 101, 102, 103, 104], "initi": [2, 3, 4, 10, 21, 22, 34, 35, 41, 42, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 66, 67, 68, 69, 77, 78, 80, 81, 82, 83, 84, 85, 90, 93, 94, 96, 102], "addperdofvari": [2, 3, 4, 34, 35, 58], "addtabulatedfunct": [2, 3, 4, 34, 35, 52, 53, 54, 56, 57, 58, 59, 60], "function": [2, 3, 4, 6, 9, 10, 16, 18, 20, 21, 22, 27, 34, 35, 37, 38, 39, 43, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 72, 73, 74, 75, 80, 85, 89, 90, 91, 99, 108, 110], "tabul": [2, 3, 4, 20, 34, 35, 43, 47, 48, 49, 52, 53, 54, 56, 57, 58, 59, 60, 62, 63, 64, 99], "mai": [2, 3, 4, 16, 22, 33, 34, 35, 37, 38, 42, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 65, 66, 67, 68, 69, 70, 75, 76, 77, 78, 81, 83, 84, 85, 86, 87, 90, 93, 95, 97, 98, 102, 103, 104, 112, 115], "appear": [2, 3, 4, 16, 23, 34, 35, 52, 53, 54, 56, 57, 58, 59, 60, 107, 108], "tabulatedfunct": [2, 3, 4, 34, 35, 47, 48, 49, 52, 53, 54, 56, 57, 58, 59, 60, 62, 63, 64], "object": [2, 3, 4, 6, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 43, 45, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 65, 70, 71, 72, 73, 74, 75, 76, 85, 89, 90, 91, 92, 93, 95, 96, 97, 98, 106, 110, 112, 115], "should": [2, 3, 4, 6, 10, 11, 13, 15, 16, 18, 20, 21, 22, 24, 25, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 43, 44, 45, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 65, 67, 68, 70, 71, 72, 73, 74, 75, 81, 82, 83, 84, 85, 89, 90, 91, 93, 94, 96, 97, 98, 100, 101, 102, 103, 111], "have": [2, 3, 4, 9, 10, 11, 22, 28, 29, 33, 34, 35, 36, 37, 39, 40, 43, 45, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 65, 71, 72, 73, 74, 75, 80, 83, 85, 89, 90, 91, 92, 97, 98, 102, 103, 108, 110, 112], "been": [2, 3, 4, 11, 28, 34, 35, 36, 37, 38, 40, 43, 45, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 65, 71, 72, 73, 74, 75, 80, 85, 86, 89, 90, 91, 97, 98, 106, 108], "heap": [2, 3, 4, 34, 35, 45, 52, 53, 54, 56, 57, 58, 59, 60, 98], "oper": [2, 3, 4, 34, 35, 39, 45, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 90, 95, 98, 110, 114], "take": [2, 3, 4, 20, 28, 34, 35, 39, 42, 45, 52, 53, 54, 56, 57, 58, 59, 60, 66, 67, 68, 69, 72, 76, 77, 78, 80, 87, 93, 98, 99, 102, 103, 104, 110], "ownership": [2, 3, 4, 34, 35, 45, 52, 53, 54, 56, 57, 58, 59, 60, 96, 98], "delet": [2, 3, 4, 10, 22, 34, 35, 45, 52, 53, 54, 56, 57, 58, 59, 60, 98], "when": [2, 3, 4, 9, 11, 16, 18, 20, 21, 22, 28, 29, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 87, 89, 91, 92, 93, 94, 95, 97, 98, 99, 102, 103, 104, 110], "itself": [2, 3, 4, 34, 35, 45, 52, 53, 54, 56, 57, 58, 59, 60, 98], "addupdatecontextst": [2, 3, 4, 34, 35, 58], "allow": [2, 3, 4, 6, 10, 14, 16, 18, 22, 27, 28, 33, 34, 35, 37, 45, 46, 56, 58, 59, 60, 67, 68, 69, 70, 75, 81, 84, 85, 88, 93, 102, 103], "context": [2, 3, 4, 11, 27, 28, 34, 35, 36, 37, 39, 40, 41, 42, 43, 45, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 89, 90, 91, 92, 93, 94, 97, 98, 102], "state": [2, 3, 4, 11, 12, 13, 24, 25, 28, 29, 34, 35, 39, 46, 58, 85, 93], "beginifblock": [2, 3, 4, 34, 35, 58], "condit": [2, 3, 4, 10, 13, 24, 25, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 65, 70, 71, 72, 73, 74, 75, 81, 82, 83, 84, 85, 86, 89, 91, 92, 93, 94, 98], "which": [2, 3, 4, 6, 10, 11, 12, 13, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 29, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 81, 82, 83, 84, 85, 87, 89, 90, 91, 93, 94, 97, 98, 102, 103, 104, 107, 108, 110, 112, 113], "begin": [2, 3, 4, 21, 22, 34, 35, 56, 58, 60, 72, 75, 85], "block": [2, 3, 4, 34, 35, 46, 58, 90], "comparison": [2, 3, 4, 34, 35, 58, 108], "between": [2, 3, 4, 10, 22, 27, 29, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 65, 70, 71, 72, 73, 74, 75, 79, 81, 82, 83, 84, 85, 88, 89, 91, 92, 94, 95, 98, 99, 100, 101, 102, 103, 105, 108, 112], "one": [2, 3, 4, 11, 16, 21, 22, 33, 34, 35, 39, 43, 45, 46, 47, 52, 55, 56, 57, 58, 59, 60, 62, 68, 72, 75, 78, 79, 81, 83, 85, 86, 87, 90, 93, 95, 98, 102, 103, 108, 109, 110, 112], "end": [2, 3, 4, 9, 10, 21, 28, 34, 35, 58, 85], "execut": [2, 3, 4, 16, 34, 35, 58], "true": [2, 3, 4, 5, 6, 10, 11, 12, 13, 14, 16, 17, 18, 22, 23, 26, 29, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 65, 68, 70, 71, 72, 73, 74, 75, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 97, 98, 107, 110, 112], "beginwhileblock": [2, 3, 4, 34, 35, 58], "while": [2, 3, 4, 22, 27, 34, 35, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 78, 81, 83, 85, 90, 95, 98, 102, 103], "repeatedli": [2, 3, 4, 34, 35, 58], "long": [2, 3, 4, 34, 35, 37, 39, 46, 56, 57, 58, 59, 60, 71, 72, 75, 85, 95, 97, 103, 110], "remain": [2, 3, 4, 11, 29, 34, 35, 58, 67, 68, 84], "endblock": [2, 3, 4, 34, 35, 58], "mark": [2, 3, 4, 23, 34, 35, 58], "most": [2, 3, 4, 9, 11, 22, 34, 35, 37, 42, 46, 52, 56, 57, 58, 59, 60, 66, 67, 68, 69, 75, 76, 77, 78, 87, 93, 95, 97, 98, 102, 103, 104], "recent": [2, 3, 4, 34, 35, 42, 58, 66, 67, 68, 69, 76, 77, 78, 87, 93, 102, 103, 104], "begun": [2, 3, 4, 34, 35, 58], "getcomputationstep": [2, 3, 4, 34, 35, 58], "ha": [2, 3, 4, 9, 10, 21, 22, 28, 29, 34, 35, 36, 37, 38, 39, 40, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 71, 72, 73, 74, 75, 85, 86, 89, 90, 91, 95, 99, 106, 108, 112], "computationtyp": [2, 3, 4, 34, 35, 56, 58], "perform": [2, 3, 4, 21, 22, 27, 28, 34, 35, 37, 46, 53, 54, 58, 59, 75, 80, 81, 82, 83, 84, 90, 97, 115], "result": [2, 3, 4, 6, 9, 21, 22, 27, 28, 34, 35, 39, 41, 42, 58, 59, 60, 62, 63, 64, 66, 67, 69, 71, 77, 78, 80, 81, 82, 83, 84, 85, 93, 94, 95, 102, 103, 110, 112], "If": [2, 3, 4, 6, 9, 10, 11, 12, 13, 14, 16, 18, 20, 22, 23, 24, 25, 26, 27, 28, 29, 33, 34, 35, 37, 38, 39, 41, 42, 46, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 71, 72, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 92, 93, 94, 95, 97, 98, 102, 103, 104, 110], "doe": [2, 3, 4, 10, 12, 16, 22, 28, 33, 34, 35, 39, 46, 58, 60, 61, 67, 68, 70, 71, 81, 82, 83, 84, 85, 90, 95, 97, 98, 99, 108], "an": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 18, 21, 22, 23, 26, 28, 29, 30, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 102, 103, 104, 105, 106, 110, 115], "empti": [2, 3, 4, 34, 35, 53, 58, 59, 68, 86, 87, 92, 97], "evalu": [2, 3, 4, 6, 10, 34, 35, 37, 52, 53, 54, 56, 57, 58, 59, 60, 62, 63, 64, 70, 85, 93, 99, 115], "getconstrainttoler": [2, 3, 4, 34, 35, 42, 45, 58, 66, 67, 68, 69, 76, 77, 78, 87, 93, 102, 103, 104], "distanc": [2, 3, 4, 6, 10, 14, 16, 18, 22, 34, 35, 37, 39, 42, 45, 46, 51, 53, 54, 55, 56, 57, 58, 59, 60, 66, 67, 68, 69, 71, 72, 74, 75, 76, 77, 78, 80, 85, 87, 93, 98, 102, 103, 104], "toler": [2, 3, 4, 6, 10, 14, 18, 28, 34, 35, 37, 42, 45, 46, 58, 66, 67, 68, 69, 75, 76, 77, 78, 80, 85, 87, 93, 102, 103, 104], "within": [2, 3, 4, 22, 30, 31, 32, 34, 35, 42, 45, 46, 52, 58, 59, 65, 66, 67, 68, 69, 76, 77, 78, 80, 86, 87, 93, 98, 102, 103, 104, 112], "maintain": [2, 3, 4, 28, 34, 35, 41, 42, 45, 58, 66, 67, 68, 69, 76, 77, 78, 81, 82, 83, 84, 87, 93, 96, 102, 103, 104], "fraction": [2, 3, 4, 34, 35, 37, 39, 42, 45, 58, 66, 67, 68, 69, 75, 76, 77, 78, 85, 87, 93, 102, 103, 104], "constrain": [2, 3, 4, 10, 16, 34, 35, 42, 45, 46, 58, 66, 67, 68, 69, 76, 77, 78, 84, 87, 93, 98, 102, 103, 104], "getglobalvari": [2, 3, 4, 34, 35, 58], "current": [2, 3, 4, 11, 13, 16, 21, 22, 24, 25, 28, 29, 34, 35, 39, 41, 45, 46, 52, 55, 56, 58, 68, 81, 82, 83, 84, 85, 87, 92, 93, 94, 97, 102, 103, 110], "getglobalvariablebynam": [2, 3, 4, 34, 35, 58], "getglobalvariablenam": [2, 3, 4, 34, 35, 58], "std": [2, 3, 4, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 65, 68, 70, 71, 72, 73, 74, 75, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 94, 95, 96, 106, 110], "const": [2, 3, 4, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 65, 70, 71, 72, 73, 74, 75, 79, 81, 82, 83, 84, 85, 89, 90, 91, 92, 94, 95, 96], "getintegrationforcegroup": [2, 3, 4, 34, 35, 42, 45, 58, 66, 67, 68, 69, 76, 77, 78, 87, 93, 102, 103, 104], "By": [2, 3, 4, 29, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 81, 82, 83, 84, 85, 87, 89, 91, 92, 93, 94, 102, 103, 104], "default": [2, 3, 4, 9, 13, 16, 22, 24, 25, 29, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 87, 89, 90, 91, 92, 93, 94, 95, 98, 102, 103, 104], "includ": [2, 3, 4, 10, 18, 21, 22, 28, 29, 34, 35, 36, 42, 45, 46, 53, 57, 58, 59, 66, 67, 68, 69, 71, 76, 77, 78, 80, 84, 85, 87, 93, 97, 102, 103, 104, 110, 112], "interpret": [2, 3, 4, 34, 35, 41, 42, 45, 46, 58, 59, 66, 67, 68, 69, 76, 77, 78, 87, 90, 93, 102, 103, 104], "bit": [2, 3, 4, 34, 35, 42, 45, 58, 66, 67, 68, 69, 76, 77, 78, 87, 93, 102, 103, 104], "flag": [2, 3, 4, 29, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106], "from": [2, 3, 4, 6, 8, 9, 10, 11, 13, 14, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 34, 35, 37, 39, 41, 42, 44, 45, 46, 53, 54, 55, 56, 57, 58, 59, 60, 65, 66, 67, 68, 69, 72, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 90, 92, 93, 94, 96, 97, 98, 102, 103, 104, 106, 108, 110, 112, 113], "1": [2, 3, 4, 6, 8, 10, 12, 14, 16, 18, 22, 26, 34, 35, 38, 39, 41, 42, 44, 45, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 65, 66, 67, 68, 69, 71, 72, 76, 77, 78, 79, 85, 86, 87, 88, 90, 93, 99, 100, 101, 102, 103, 104, 110, 112, 114], "getkineticenergyexpress": [2, 3, 4, 34, 35, 58], "kinet": [2, 3, 4, 29, 34, 35, 46, 58, 67, 68, 86, 87, 93, 97], "report": [2, 3, 4, 10, 11, 13, 24, 25, 27, 28, 29, 34, 35, 58, 115], "getnumcomput": [2, 3, 4, 34, 35, 58], "number": [2, 3, 4, 7, 8, 9, 11, 13, 15, 17, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 97, 98, 99, 100, 101, 102, 103, 104, 105, 110, 112, 114], "getnumglobalvari": [2, 3, 4, 34, 35, 58], "getnumperdofvari": [2, 3, 4, 34, 35, 58], "getnumtabulatedfunct": [2, 3, 4, 34, 35, 52, 53, 54, 56, 57, 58, 59, 60], "getperdofvari": [2, 3, 4, 34, 35, 58], "pyobject": [2, 3, 4, 34, 35, 58], "getperdofvariablebynam": [2, 3, 4, 34, 35, 58], "vector": [2, 3, 4, 5, 10, 11, 12, 17, 18, 22, 33, 34, 35, 37, 38, 39, 43, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 68, 72, 75, 79, 85, 86, 87, 88, 90, 92, 93, 95, 97, 98], "vec3": [2, 3, 4, 5, 10, 12, 17, 18, 22, 23, 26, 34, 35, 37, 46, 58, 75, 79, 81, 92, 93, 97, 98], "getperdofvariablenam": [2, 3, 4, 34, 35, 58], "getrandomnumberse": [2, 3, 4, 34, 35, 41, 42, 58, 66, 67, 69, 77, 78, 81, 82, 83, 84, 93, 94, 102], "random": [2, 3, 4, 11, 28, 34, 35, 41, 42, 46, 58, 66, 67, 69, 77, 78, 81, 82, 83, 84, 93, 94, 102], "seed": [2, 3, 4, 34, 35, 41, 42, 46, 58, 66, 67, 69, 77, 78, 81, 82, 83, 84, 93, 94, 102], "setrandomnumberse": [2, 3, 4, 34, 35, 41, 42, 58, 66, 67, 69, 77, 78, 81, 82, 83, 84, 93, 94, 102], "getsteps": [2, 3, 4, 34, 35, 42, 45, 58, 66, 67, 68, 69, 76, 77, 78, 87, 93, 102, 103, 104], "size": [2, 3, 4, 22, 34, 35, 37, 42, 43, 45, 58, 62, 63, 64, 66, 67, 68, 69, 75, 76, 77, 78, 81, 82, 83, 85, 87, 93, 102, 103, 104, 110], "picosecond": [2, 3, 4, 34, 35, 42, 45, 46, 58, 66, 67, 68, 69, 76, 77, 78, 87, 93, 102, 103, 104], "measur": [2, 3, 4, 12, 34, 35, 36, 37, 39, 41, 42, 45, 46, 56, 57, 58, 59, 60, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 81, 82, 83, 84, 85, 86, 87, 89, 91, 93, 94, 97, 98, 102, 103, 104, 110], "p": [2, 3, 4, 27, 34, 35, 39, 41, 42, 45, 58, 66, 67, 68, 69, 76, 77, 78, 86, 87, 93, 102, 103, 104], "gettabulatedfunct": [2, 3, 4, 34, 35, 52, 53, 54, 56, 57, 58, 59, 60], "refer": [2, 3, 4, 34, 35, 37, 38, 45, 52, 53, 54, 56, 57, 58, 59, 60, 75, 90, 92, 95, 98, 110], "gettabulatedfunctionnam": [2, 3, 4, 34, 35, 52, 53, 54, 56, 57, 58, 59, 60], "setconstrainttoler": [2, 3, 4, 34, 35, 42, 45, 58, 66, 67, 68, 69, 76, 77, 78, 87, 93, 102, 103, 104], "tol": [2, 3, 4, 34, 35, 37, 42, 45, 46, 58, 66, 67, 68, 69, 75, 76, 77, 78, 85, 87, 93, 102, 103, 104], "setglobalvari": [2, 3, 4, 34, 35, 58], "setglobalvariablebynam": [2, 3, 4, 34, 35, 58], "setintegrationforcegroup": [2, 3, 4, 34, 35, 42, 45, 58, 66, 67, 68, 69, 76, 77, 78, 80, 87, 93, 102, 103, 104], "indic": [2, 3, 4, 6, 16, 24, 25, 29, 34, 35, 42, 45, 46, 53, 54, 56, 57, 58, 59, 60, 63, 64, 66, 67, 68, 69, 76, 77, 78, 85, 87, 92, 93, 102, 103, 104], "equat": [2, 3, 4, 34, 35, 42, 45, 58, 66, 67, 68, 69, 76, 77, 78, 87, 93, 102, 103, 104], "motion": [2, 3, 4, 34, 35, 42, 44, 45, 58, 66, 67, 68, 69, 76, 77, 78, 86, 87, 93, 102, 103, 104], "altern": [2, 3, 4, 16, 22, 23, 26, 27, 28, 33, 34, 35, 39, 42, 45, 58, 60, 66, 67, 68, 69, 76, 77, 78, 87, 93, 102, 103, 104], "can": [2, 3, 4, 9, 10, 11, 12, 15, 16, 17, 20, 21, 22, 23, 26, 27, 28, 29, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 102, 103, 104, 108, 109, 110, 111, 112], "pass": [2, 3, 4, 6, 10, 16, 18, 21, 22, 23, 26, 28, 29, 34, 35, 42, 45, 46, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 66, 67, 68, 69, 76, 77, 78, 85, 87, 90, 93, 96, 98, 101, 102, 103, 104, 110], "unsign": [2, 3, 4, 34, 35, 42, 45, 46, 58, 66, 67, 68, 69, 76, 77, 78, 87, 93, 102, 103, 104], "integ": [2, 3, 4, 9, 22, 34, 35, 42, 45, 46, 58, 59, 62, 63, 64, 66, 67, 68, 69, 76, 77, 78, 87, 93, 99, 102, 103, 104, 110], "bitmask": [2, 3, 4, 34, 35, 42, 45, 46, 58, 66, 67, 68, 69, 76, 77, 78, 87, 93, 102, 103, 104], "case": [2, 3, 4, 16, 22, 33, 34, 35, 42, 45, 46, 52, 55, 56, 58, 59, 60, 65, 66, 67, 68, 69, 76, 77, 78, 84, 85, 86, 87, 93, 97, 102, 103, 104, 110, 112], "setkineticenergyexpress": [2, 3, 4, 34, 35, 58], "setperdofvari": [2, 3, 4, 34, 35, 58], "setperdofvariablebynam": [2, 3, 4, 34, 35, 58], "precis": [2, 3, 4, 28, 34, 35, 41, 42, 58, 66, 67, 69, 77, 78, 80, 90, 93, 102, 103], "mean": [2, 3, 4, 28, 34, 35, 37, 39, 41, 42, 46, 56, 58, 60, 66, 67, 69, 72, 77, 78, 80, 81, 85, 92, 93, 95, 99, 100, 101, 102, 103, 106, 110], "undefin": [2, 3, 4, 9, 34, 35, 37, 41, 42, 58, 59, 60, 62, 63, 64, 66, 67, 68, 69, 76, 77, 78, 87, 93, 95, 102, 103, 104], "left": [2, 3, 4, 34, 35, 41, 42, 46, 58, 66, 67, 69, 77, 78, 93, 102, 110], "up": [2, 3, 4, 15, 22, 23, 26, 34, 35, 41, 42, 46, 53, 57, 58, 59, 60, 66, 67, 68, 69, 77, 78, 85, 86, 87, 93, 100, 101, 102], "platform": [2, 3, 4, 11, 22, 28, 34, 35, 37, 41, 42, 46, 56, 58, 66, 67, 69, 70, 75, 77, 78, 81, 82, 83, 84, 85, 93, 94, 102], "appropri": [2, 3, 4, 34, 35, 38, 41, 42, 43, 46, 50, 51, 53, 54, 58, 61, 66, 67, 69, 73, 74, 77, 78, 85, 89, 91, 93, 95, 97, 102, 103], "wai": [2, 3, 4, 11, 21, 22, 27, 28, 34, 35, 41, 42, 45, 46, 47, 48, 49, 58, 59, 62, 63, 64, 66, 67, 69, 70, 77, 78, 85, 92, 93, 95, 97, 98, 99, 102, 110], "It": [2, 3, 4, 6, 9, 11, 12, 16, 18, 21, 22, 23, 26, 27, 28, 33, 34, 35, 39, 41, 42, 46, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 65, 66, 67, 68, 69, 72, 77, 78, 81, 82, 83, 84, 85, 90, 92, 93, 94, 99, 102, 103, 107, 108], "guarante": [2, 3, 4, 9, 11, 22, 23, 34, 35, 37, 41, 42, 46, 54, 55, 58, 59, 60, 61, 66, 67, 69, 75, 77, 78, 81, 82, 83, 84, 85, 93, 94, 102], "two": [2, 3, 4, 10, 21, 22, 27, 29, 33, 34, 35, 39, 41, 42, 43, 45, 46, 48, 50, 51, 53, 56, 58, 59, 60, 61, 63, 65, 66, 67, 68, 69, 72, 75, 77, 78, 81, 82, 83, 84, 85, 86, 93, 94, 98, 101, 102, 103, 108, 110, 111, 112, 114, 115], "simul": [2, 3, 4, 10, 11, 12, 13, 20, 21, 22, 24, 25, 27, 29, 34, 35, 39, 41, 42, 45, 46, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 66, 67, 68, 69, 76, 77, 78, 81, 82, 83, 84, 85, 87, 93, 94, 97, 102, 103, 104, 115], "run": [2, 3, 4, 10, 21, 22, 27, 28, 34, 35, 39, 41, 42, 46, 58, 60, 66, 67, 69, 77, 78, 81, 82, 83, 84, 85, 93, 94, 102, 115], "differ": [2, 3, 4, 9, 11, 12, 16, 22, 28, 29, 34, 35, 37, 39, 41, 42, 45, 46, 53, 58, 59, 60, 65, 66, 67, 68, 69, 70, 72, 75, 77, 78, 81, 82, 83, 84, 85, 86, 90, 93, 94, 95, 97, 102, 103, 110, 112], "sequenc": [2, 3, 4, 34, 35, 41, 42, 43, 58, 66, 67, 69, 77, 78, 81, 82, 83, 84, 93, 94, 102, 110], "On": [2, 3, 4, 22, 28, 34, 35, 41, 42, 46, 58, 66, 67, 68, 69, 77, 78, 80, 81, 82, 83, 84, 93, 94, 102], "other": [2, 3, 4, 6, 9, 10, 18, 21, 22, 28, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 110, 111, 112, 114, 115], "hand": [2, 3, 4, 22, 28, 34, 35, 41, 42, 46, 58, 66, 67, 69, 77, 78, 81, 82, 83, 84, 93, 94, 102, 110], "made": [2, 3, 4, 23, 34, 35, 41, 42, 46, 58, 59, 60, 66, 67, 69, 77, 78, 81, 82, 83, 84, 93, 94, 102], "about": [2, 3, 4, 11, 13, 23, 24, 25, 29, 33, 34, 35, 41, 42, 46, 53, 54, 55, 56, 57, 58, 59, 60, 66, 67, 69, 77, 78, 81, 82, 83, 84, 93, 94, 95, 96, 102, 115], "behavior": [2, 3, 4, 16, 34, 35, 41, 42, 58, 66, 67, 69, 70, 72, 75, 77, 78, 81, 82, 83, 84, 85, 90, 93, 94, 102, 110, 112], "same": [2, 3, 4, 6, 10, 11, 13, 14, 16, 18, 21, 22, 24, 25, 28, 34, 35, 41, 42, 45, 46, 58, 60, 66, 67, 69, 70, 72, 75, 77, 78, 81, 82, 83, 84, 85, 93, 94, 97, 102, 108, 110, 112], "particular": [2, 3, 4, 15, 16, 22, 34, 35, 37, 39, 41, 42, 46, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 66, 67, 69, 70, 72, 75, 76, 77, 78, 81, 82, 83, 84, 85, 90, 93, 94, 95, 96, 98, 102, 105, 110, 112], "permit": [2, 3, 4, 34, 35, 41, 42, 56, 58, 66, 67, 69, 77, 78, 81, 82, 83, 84, 90, 93, 94, 102], "non": [2, 3, 4, 9, 10, 18, 19, 22, 34, 35, 37, 41, 42, 45, 58, 59, 66, 67, 69, 77, 78, 81, 82, 83, 84, 93, 94, 95, 102, 110], "determinist": [2, 3, 4, 34, 35, 41, 42, 58, 66, 67, 69, 77, 78, 81, 82, 83, 84, 93, 94, 102], "produc": [2, 3, 4, 11, 12, 28, 34, 35, 41, 42, 46, 58, 66, 67, 69, 71, 77, 78, 81, 82, 83, 84, 93, 94, 95, 102, 103, 110], "success": [2, 3, 4, 16, 34, 35, 41, 42, 58, 66, 67, 69, 77, 78, 81, 82, 83, 84, 93, 94, 102], "even": [2, 3, 4, 28, 34, 35, 41, 42, 46, 55, 56, 58, 60, 66, 67, 69, 77, 78, 81, 82, 83, 84, 92, 93, 94, 102, 110, 112], "were": [2, 3, 4, 16, 21, 34, 35, 39, 41, 42, 53, 58, 66, 67, 69, 77, 78, 81, 82, 83, 84, 90, 93, 94, 97, 102, 107], "ident": [2, 3, 4, 11, 28, 34, 35, 41, 42, 46, 58, 65, 66, 67, 69, 71, 77, 78, 81, 82, 83, 84, 90, 93, 94, 102], "assign": [2, 3, 4, 16, 26, 34, 35, 41, 42, 58, 59, 66, 67, 69, 77, 78, 81, 82, 83, 84, 93, 94, 102], "uniqu": [2, 3, 4, 9, 34, 35, 39, 41, 42, 58, 66, 67, 69, 77, 78, 81, 82, 83, 84, 90, 93, 94, 102], "chosen": [2, 3, 4, 20, 27, 34, 35, 37, 41, 42, 46, 58, 66, 67, 69, 75, 77, 78, 81, 82, 83, 84, 85, 93, 94, 102], "done": [2, 3, 4, 11, 34, 35, 39, 41, 42, 58, 66, 67, 69, 77, 78, 80, 81, 82, 83, 84, 85, 92, 93, 94, 96, 102], "ensur": [2, 3, 4, 22, 34, 35, 41, 42, 58, 66, 67, 69, 77, 78, 79, 81, 82, 83, 84, 93, 94, 102], "receiv": [2, 3, 4, 34, 35, 41, 42, 58, 66, 67, 69, 77, 78, 81, 82, 83, 84, 93, 94, 102], "without": [2, 3, 4, 16, 22, 28, 34, 35, 36, 37, 39, 40, 41, 42, 43, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 65, 66, 67, 69, 71, 72, 73, 74, 75, 77, 78, 80, 81, 82, 83, 84, 85, 89, 91, 92, 93, 94, 102, 103, 106], "you": [2, 3, 4, 10, 11, 15, 21, 22, 23, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 77, 78, 80, 81, 82, 83, 84, 85, 86, 89, 90, 91, 92, 93, 94, 95, 97, 102, 103, 108, 110, 112], "need": [2, 3, 4, 9, 10, 22, 28, 34, 35, 36, 37, 39, 40, 41, 42, 43, 45, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 65, 66, 67, 69, 71, 72, 73, 74, 75, 77, 78, 81, 82, 83, 84, 85, 89, 90, 91, 92, 93, 94, 95, 97, 102, 107, 112, 115], "them": [2, 3, 4, 9, 16, 21, 22, 29, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 45, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 65, 66, 67, 69, 71, 72, 73, 74, 75, 77, 78, 81, 82, 83, 84, 85, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 102, 106], "explicitli": [2, 3, 4, 18, 22, 27, 34, 35, 37, 41, 42, 46, 58, 59, 60, 66, 67, 69, 75, 77, 78, 81, 82, 83, 84, 85, 93, 94, 102], "setsteps": [2, 3, 4, 34, 35, 42, 45, 58, 66, 67, 68, 69, 76, 77, 78, 87, 93, 102, 103, 104], "call": [2, 3, 4, 9, 10, 12, 15, 16, 17, 21, 22, 23, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 85, 87, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 102, 103, 104, 105, 106, 108, 110], "simpli": [2, 3, 4, 9, 22, 34, 35, 36, 37, 39, 40, 42, 43, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 85, 87, 89, 90, 91, 92, 93, 97, 102, 103, 104], "ignor": [2, 3, 4, 6, 16, 22, 27, 34, 35, 37, 42, 52, 57, 58, 60, 65, 66, 67, 68, 69, 72, 75, 76, 77, 78, 85, 87, 90, 93, 98, 102, 103, 104], "advanc": [2, 3, 4, 21, 27, 28, 34, 35, 42, 45, 58, 60, 66, 67, 68, 69, 76, 77, 78, 83, 87, 93, 102, 103, 104], "through": [2, 3, 4, 9, 34, 35, 42, 45, 55, 58, 66, 67, 68, 69, 76, 77, 78, 87, 93, 101, 102, 103, 104], "seri": [2, 3, 4, 13, 24, 25, 34, 35, 42, 45, 56, 58, 66, 67, 68, 69, 76, 77, 78, 87, 93, 102, 103, 104], "properti": [2, 3, 4, 10, 22, 28, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106], "thisown": [2, 3, 4, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106], "membership": [2, 3, 4, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106], "modifi": [3, 16, 22, 36, 37, 38, 39, 40, 41, 43, 44, 46, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 65, 70, 71, 72, 73, 74, 75, 81, 82, 83, 84, 85, 89, 91, 92, 94, 98], "whenev": [3, 90], "v": [3, 58], "r": [3, 51, 56, 58, 60, 78, 79, 88], "less": [3, 6, 11, 22, 34, 35, 37, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 72, 75, 85, 106], "than": [3, 6, 22, 23, 26, 34, 35, 37, 39, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 72, 75, 78, 85, 90, 99, 102, 103, 106, 110], "follow": [3, 9, 11, 16, 22, 28, 33, 34, 35, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 70, 85, 110], "2": [3, 22, 34, 35, 38, 39, 43, 46, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 71, 73, 74, 79, 85, 88, 93, 97, 99, 110, 112, 114], "getalpha": 3, "setalpha": 3, "gete": 3, "sete": 3, "alphatot": 4, "etot": 4, "dual": 4, "total": [4, 6, 10, 14, 16, 18, 22, 27, 29, 37, 58, 68, 84, 86, 87, 93, 94, 97], "second": [4, 21, 29, 33, 34, 35, 37, 38, 39, 43, 46, 50, 51, 56, 57, 58, 59, 60, 61, 65, 67, 68, 72, 73, 74, 75, 79, 84, 85, 86, 88, 89, 91, 98, 100, 101, 110, 112, 115], "getalphatot": 4, "setalphatot": 4, "getetot": 4, "setetot": 4, "totalenergi": [4, 29], "whole": [4, 22, 68, 87], "app": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33], "file": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 33, 85, 90], "loadveloc": 5, "none": [5, 6, 9, 10, 12, 13, 14, 16, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 33, 108, 110], "loadboxvector": 5, "pars": [5, 6, 7, 8, 9, 10, 14, 17, 18, 19, 23, 26], "amber": [5, 6, 85], "inpcrd": 5, "load": [5, 6, 9, 10, 11, 14, 16, 17, 18, 21, 22, 23, 26, 28, 33, 46, 90], "data": [5, 8, 10, 11, 16, 22, 23, 28, 29, 46, 53, 54, 56, 57, 59, 60, 90, 95, 96, 97], "contain": [5, 11, 14, 15, 16, 17, 22, 23, 26, 28, 33, 43, 46, 52, 53, 55, 90, 95, 96, 97, 110], "atom": [5, 6, 7, 8, 9, 10, 12, 14, 15, 16, 17, 18, 22, 23, 24, 25, 26, 31, 32, 33, 36, 37, 39, 56, 57, 59, 60, 68, 75, 83, 85, 86, 87, 98], "option": [5, 6, 10, 11, 14, 16, 18, 20, 21, 22, 27, 28, 33, 46, 53, 56, 57, 60, 67, 68, 72, 84, 85, 92, 93, 102, 103], "period": [5, 10, 11, 12, 13, 17, 18, 20, 21, 22, 24, 25, 29, 33, 36, 37, 38, 39, 40, 41, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 70, 71, 72, 73, 74, 75, 81, 82, 83, 84, 85, 86, 89, 91, 92, 93, 94, 97, 98, 99, 103], "box": [5, 10, 11, 12, 13, 17, 18, 22, 24, 25, 29, 33, 39, 46, 81, 82, 83, 84, 85, 93, 97, 98], "dimens": [5, 10, 12, 17, 18, 22, 33, 37, 43, 53, 54, 56, 57, 59, 60, 75, 81, 84, 98, 107, 108, 110, 111, 112, 113], "str": [5, 6, 9, 10, 18, 21, 22, 26], "bool": [5, 9, 10, 11, 12, 13, 16, 20, 22, 23, 24, 25, 26, 29, 36, 37, 38, 39, 40, 41, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 68, 70, 71, 72, 73, 74, 75, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 98, 99], "deprec": [5, 18], "automat": [5, 13, 20, 22, 24, 25, 27, 28, 33, 37, 38, 58, 85, 95, 98], "present": [5, 14, 22, 110, 112, 114], "getposit": [5, 14, 17, 22, 23, 26, 46, 93, 97], "asnumpi": [5, 17, 23, 26, 97], "fals": [5, 6, 9, 10, 11, 12, 13, 14, 16, 17, 20, 22, 23, 26, 29, 36, 37, 38, 39, 40, 41, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 65, 68, 70, 71, 72, 73, 74, 75, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 97, 98, 107, 110, 112], "numpi": [5, 17, 21, 23, 26, 97, 110], "arrai": [5, 17, 21, 23, 26, 43, 97, 110], "instead": [5, 10, 11, 17, 18, 21, 22, 23, 26, 28, 30, 31, 32, 37, 39, 53, 54, 56, 57, 60, 72, 75, 83, 85, 93, 95, 106, 107, 110], "list": [5, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 21, 22, 23, 24, 25, 26, 27, 28, 29, 33, 34, 35, 37, 46, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 65, 68, 72, 75, 85, 86, 87, 90, 96, 97, 98, 110, 113], "getveloc": [5, 14, 46, 93, 97], "getboxvector": 5, "prmtop": [6, 10], "construct": [6, 10, 14, 16, 17, 18, 22, 23, 26, 30, 31, 32, 37, 46, 59, 60, 85, 90, 97, 106, 111, 113], "topologi": [6, 9, 10, 12, 14, 16, 17, 18, 22, 23, 26, 28, 30, 31, 32, 59, 60, 85], "createsystem": [6, 10, 14, 16, 18], "nonbondedmethod": [6, 10, 14, 16, 18, 36, 37, 39, 40, 56, 57, 59, 60, 65, 71, 72, 75, 85], "nocutoff": [6, 10, 14, 16, 18, 37, 39, 56, 57, 59, 60, 71, 72, 75, 85], "nonbondedcutoff": [6, 10, 14, 16, 18], "quantiti": [6, 10, 14, 15, 16, 18, 20, 22, 28, 56, 58, 59, 60, 107, 108, 112], "unit": [6, 10, 12, 14, 15, 16, 17, 18, 20, 22, 28, 33, 36, 71, 83, 85, 97, 98, 107, 108, 109, 110, 111, 113, 115], "nanomet": [6, 10, 14, 16, 18, 22, 28], "rigidwat": [6, 10, 16, 18], "implicitsolv": [6, 10, 14, 18], "implicitsolventsaltconc": [6, 10], "mole": [6, 10, 21, 28], "liter": [6, 10], "implicitsolventkappa": [6, 10], "temperatur": [6, 10, 21, 27, 29, 35, 41, 42, 46, 58, 66, 67, 68, 69, 77, 78, 81, 82, 83, 84, 86, 87, 93, 102, 107], "298": [6, 10], "15": [6, 10, 27], "kelvin": [6, 10, 27, 35, 41, 42, 46, 66, 67, 68, 69, 77, 78, 81, 82, 83, 84, 86, 87, 93, 102], "solutedielectr": [6, 10, 18, 56], "solventdielectr": [6, 10, 18, 56], "78": [6, 10, 18], "5": [6, 10, 18, 34, 35, 38, 39, 50, 51, 53, 54, 56, 58, 60, 61, 68, 79, 86, 87], "removecmmot": [6, 10, 14, 16, 18], "hydrogenmass": [6, 10, 14, 16, 18], "ewalderrortoler": [6, 10, 14, 18], "0005": [6, 10, 14, 18], "switchdist": [6, 10, 16, 18], "gbsamodel": [6, 10], "ac": [6, 10, 56], "describ": [6, 10, 14, 18, 21, 22, 27, 28, 56, 59, 85, 87, 90, 98, 105, 108, 111], "nonbond": [6, 10, 14, 16, 18, 34, 35, 37, 39, 40, 56, 57, 59, 60, 70, 71, 72, 75, 85, 93], "interact": [6, 10, 14, 16, 18, 34, 35, 37, 38, 39, 40, 43, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 65, 68, 71, 72, 73, 74, 75, 85, 86, 87, 89, 91, 93], "cutoffnonperiod": [6, 10, 14, 16, 18, 71, 85], "cutoffperiod": [6, 10, 14, 16, 18, 71], "ewald": [6, 10, 14, 16, 18, 37, 75, 85], "pme": [6, 10, 14, 16, 18, 37, 75, 85, 93], "ljpme": [6, 10, 14, 16, 18, 85], "bond": [6, 9, 10, 16, 18, 22, 32, 33, 34, 35, 38, 43, 46, 50, 51, 53, 54, 56, 57, 59, 60, 61, 65, 73, 74, 83, 85, 89, 91, 93], "angl": [6, 9, 10, 16, 18, 43, 50, 53, 54, 57, 59, 61, 73, 83, 89, 91], "hbond": [6, 10, 16, 18], "allbond": [6, 10, 16, 18], "hangl": [6, 10, 16, 18], "boolean": [6, 10, 14, 16, 17, 18, 22, 23, 29], "water": [6, 10, 16, 18, 22, 59], "molecul": [6, 10, 13, 14, 16, 18, 22, 24, 25, 33, 46, 53, 83, 85, 93], "fulli": [6, 10, 16, 18, 65, 83, 90], "rigid": [6, 10, 16, 18, 83], "regardless": [6, 10, 12, 16, 18, 22, 46, 59, 85, 93], "argument": [6, 10, 16, 18, 22, 27, 53, 54, 58, 59, 76, 95, 99, 110], "implicit": [6, 10, 14, 18, 36, 40, 56, 71, 107], "solvent": [6, 10, 14, 18, 22, 36, 40, 56, 60, 71, 85], "model": [6, 10, 12, 16, 18, 23, 26, 36, 39, 40, 56, 59, 71, 84], "hct": [6, 10, 14], "obc1": [6, 10], "obc2": [6, 10, 18], "gbn": [6, 10], "gbn2": 6, "float": [6, 10, 14, 15, 16, 18, 20, 21, 22, 108, 110], "salt": [6, 10], "concentr": [6, 10, 22], "gb": [6, 10, 56], "calcul": [6, 21, 37, 38, 39, 43, 44, 46, 50, 51, 53, 54, 56, 57, 58, 59, 60, 61, 65, 67, 68, 72, 73, 74, 75, 85, 89, 90, 91, 97], "deby": [6, 10], "screen": [6, 10, 28, 56, 65], "convert": [6, 10, 22, 95, 106, 110], "length": [6, 10, 22, 33, 37, 43, 46, 74, 75, 83, 86, 92, 107, 108, 110], "kappa": [6, 10], "provid": [6, 9, 12, 21, 22, 23, 27, 28, 34, 35, 36, 37, 39, 40, 43, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 68, 70, 71, 72, 73, 74, 75, 78, 85, 87, 89, 90, 91, 92, 93, 99, 115], "300": [6, 27, 35, 45], "implicitsolventsoltconc": 6, "solut": [6, 10, 18, 22, 36, 56, 60, 71], "dielectr": [6, 10, 18, 36, 56, 71, 85], "constant": [6, 10, 18, 35, 36, 39, 41, 50, 51, 55, 56, 58, 60, 61, 71, 73, 74, 81, 82, 83, 84, 85, 89, 91, 93, 103, 114], "cmmotionremov": [6, 10, 14, 16, 18], "mass": [6, 9, 10, 14, 15, 16, 18, 29, 44, 53, 58, 67, 68, 83, 86, 87, 98, 107, 108], "hydrogen": [6, 10, 14, 15, 16, 18, 22, 39, 57, 59], "bound": [6, 10, 14, 16, 18, 22, 76], "heavi": [6, 10, 14, 16, 18], "ani": [6, 9, 10, 11, 14, 16, 18, 21, 22, 32, 33, 41, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 64, 67, 68, 70, 72, 81, 82, 83, 84, 85, 86, 87, 90, 94, 98, 102, 103, 110, 112], "subtract": [6, 10, 14, 16, 18, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 72, 110], "keep": [6, 10, 14, 16, 18, 23, 26, 53, 57, 58, 60, 81, 83, 102, 103, 110], "make": [6, 10, 11, 16, 18, 22, 23, 26, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 65, 70, 71, 72, 73, 74, 75, 81, 82, 83, 84, 85, 86, 89, 91, 92, 94, 103, 106], "alter": [6, 10, 16, 18, 70, 85], "error": [6, 10, 14, 18, 37, 45, 69, 75, 85, 90, 102, 103], "switch": [6, 10, 16, 18, 45, 60, 72, 75, 85], "turn": [6, 16, 18, 71, 90], "lennard": [6, 16, 18, 39, 60, 72, 85], "jone": [6, 16, 18, 39, 60, 72, 85], "greater": [6, 57], "rais": [6, 9, 10, 97, 108, 110, 112, 114], "valueerror": [6, 10, 114], "sa": [6, 56], "nonpolar": 6, "solvat": [6, 10, 22, 36, 56, 71], "compon": [6, 7, 28, 58, 72, 80, 110, 112], "activ": [6, 10, 45], "must": [6, 9, 10, 14, 16, 21, 22, 28, 29, 34, 35, 36, 39, 43, 45, 46, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 68, 71, 72, 75, 79, 80, 81, 82, 83, 84, 85, 87, 92, 93, 97, 98, 108, 112], "latter": [6, 56, 65], "newli": [6, 16, 18, 33, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 85, 90, 95, 98, 108, 112], "fname": [7, 8], "read": [7, 8, 9, 16, 22, 58, 95], "charmm": [7, 8, 9, 10, 12, 19], "coordin": [7, 8, 22, 28, 53, 54, 55, 56, 58, 59, 66, 67, 69, 75, 79, 83, 92], "crd": [7, 8], "resnam": [7, 8], "etc": [7, 10, 11, 36, 37, 39, 46, 52, 53, 54, 57, 58, 59, 60, 65, 71, 72, 75, 85, 110, 115], "natom": [7, 8, 10], "residu": [7, 8, 9, 16, 17, 22, 23, 26, 30, 31, 33], "cartesian": [7, 8], "x1": [7, 8, 53, 54, 55, 58, 59], "y1": [7, 8, 53, 54, 55, 59], "z1": [7, 8, 53, 54, 55, 59], "x2": [7, 8, 53, 54, 55, 59], "exampl": [7, 8, 9, 10, 22, 27, 28, 34, 35, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 75, 79, 85, 90, 93, 95, 97, 108], "chm": [7, 8], "testfil": [7, 8, 10], "1tnm": 7, "print": [7, 8, 10], "d": [7, 8, 27, 39, 56, 86], "coord": 7, "len": [7, 8, 10], "1414": 7, "charmmcrdfil": 8, "restart": 8, "rst": 8, "positionsold": 8, "old": 8, "sampl": [8, 21, 27, 78], "header": [8, 12, 23, 26, 29], "rest": 8, "37": 8, "nc": 8, "nco": 8, "nv": 8, "vel": 8, "256": 8, "equival": [9, 11, 20, 46], "inform": [9, 11, 13, 17, 24, 25, 27, 28, 29, 33, 36, 37, 39, 40, 43, 46, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 68, 71, 72, 73, 74, 75, 85, 89, 91, 93, 95, 96, 97, 115], "found": [9, 10, 16, 112], "section": [9, 84], "top": [9, 18], "rtf": [9, 10], "par": [9, 10], "filenam": [9, 28], "stream": [9, 95], "suffix": [9, 56, 59, 60], "recogn": [9, 22, 58, 90, 110], "unrecogn": [9, 110], "typeerror": [9, 108, 110, 112], "prm": 9, "inp": 9, "otherwis": [9, 22, 23, 26, 36, 37, 38, 39, 40, 41, 43, 44, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 65, 68, 71, 72, 73, 74, 75, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 94, 97, 98, 107, 108, 110, 112], "dictionari": [9, 108, 111, 112], "whose": [9, 15, 16, 20, 21, 22, 23, 37, 46, 56, 57, 58, 59, 60, 65, 68, 72, 75, 85, 87, 92, 98], "kei": [9, 16, 46, 93, 95, 107, 108, 110, 111, 112], "tupl": [9, 10, 11, 12, 13, 16, 18, 22, 24, 25, 29, 33, 34, 35, 108, 110, 111, 112, 114], "howev": [9, 11, 12, 37, 46, 52, 56, 58, 59, 75, 81, 82, 83, 84, 85], "mani": [9, 12, 21, 22, 28, 29, 37, 58, 59, 60, 75, 80, 85, 90, 92, 93, 114, 115], "element": [9, 10, 11, 13, 16, 17, 22, 23, 24, 25, 29, 30, 33, 34, 35, 37, 43, 46, 59, 60, 62, 63, 64, 75, 85, 98, 110, 114], "order": [9, 12, 27, 33, 37, 58, 90, 91, 107, 110], "sort": [9, 108, 111], "atom_types_str": 9, "atom_types_int": 9, "atom_types_tupl": 9, "bond_typ": 9, "angle_typ": 9, "urey_bradley_typ": 9, "dihedral_typ": 9, "improper_typ": 9, "cmap_typ": 9, "nbfix_typ": 9, "dihedr": [9, 10, 43, 53, 54, 57, 59], "multiterm": 9, "dict": [9, 16, 18, 112], "dihedraltyp": 9, "instanc": [9, 10, 16, 105, 110, 114], "atom_typ": 9, "match": [9, 10, 16, 22, 27, 36, 37, 39, 40, 43, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 65, 71, 72, 73, 74, 75, 85, 89, 91, 92, 108], "robust": 9, "although": [9, 56, 58, 75, 100, 101], "avail": [9, 10, 16, 28, 39, 90, 97, 115], "help": [9, 56, 67, 68], "param": [9, 10, 16, 85], "charmm22": 9, "classmethod": 9, "loadset": 9, "tfile": 9, "pfile": 9, "sfile": 9, "permiss": 9, "instanti": [9, 10], "just": [9, 21, 22, 39, 52, 53, 58, 102, 103, 110], "accept": [9, 37, 58, 75, 81, 82, 83, 84, 85, 94], "bonbd": 9, "popul": [9, 95], "first": [9, 10, 11, 12, 13, 21, 23, 24, 25, 27, 29, 33, 34, 35, 37, 38, 39, 43, 45, 46, 50, 51, 56, 57, 58, 59, 60, 61, 65, 67, 68, 72, 73, 74, 75, 79, 85, 86, 88, 89, 91, 92, 95, 98, 100, 101, 106, 114, 115], "thei": [9, 22, 23, 33, 38, 45, 46, 59, 65, 75, 84, 85, 90, 93, 97, 98, 107, 110, 111, 112], "overwrit": [9, 11], "came": 9, "befor": [9, 10, 11, 28, 45, 56, 97], "append": [9, 12, 13, 28, 29, 56, 59, 60], "exist": [9, 10, 12, 13, 16, 22, 29, 33, 36, 37, 39, 40, 41, 43, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 65, 71, 72, 73, 74, 75, 81, 82, 83, 84, 85, 86, 89, 90, 91, 92, 94, 95, 97, 106, 107, 108], "readparameterfil": 9, "version": [9, 11, 12, 14, 28, 39, 46, 90, 110], "36": 9, "later": [9, 18, 21, 28, 58], "field": [9, 16, 17, 22, 36, 37, 38, 39, 40, 43, 50, 51, 53, 54, 55, 56, 57, 59, 60, 61, 65, 69, 71, 72, 73, 74, 75, 85, 89, 91, 114], "older": 9, "routin": [9, 97], "either": [9, 10, 12, 16, 22, 29, 38, 39, 46, 58, 63, 90, 96], "suppli": [9, 53, 54, 57], "definit": [9, 16, 18, 22, 33, 50, 51, 53, 54, 55, 57, 59, 60, 61, 75, 98], "failur": [9, 16, 90], "do": [9, 16, 22, 23, 29, 39, 58, 59, 60, 68, 70, 93, 102, 103, 112], "runtimeerror": 9, "readtopologyfil": 9, "_only_": 9, "unnecessari": 9, "also": [9, 11, 12, 15, 16, 17, 21, 22, 23, 28, 29, 33, 34, 35, 39, 43, 45, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 65, 68, 71, 72, 75, 81, 82, 83, 84, 85, 93, 98, 107], "readstreamfil": 9, "dispatch": 9, "charmmstreamfil": 9, "condens": 9, "goe": 9, "elimin": 9, "duplic": [9, 60], "after": [9, 16, 27, 33, 36, 37, 38, 40, 46, 50, 51, 53, 54, 55, 56, 57, 59, 60, 61, 65, 69, 71, 72, 73, 74, 75, 85, 89, 91, 98, 108, 110], "improp": [9, 10], "cmap": [9, 10, 43], "pair": [9, 22, 33, 39, 40, 43, 51, 53, 54, 56, 57, 59, 60, 65, 67, 68, 72, 74, 75, 85, 86, 87, 95, 98, 108, 111, 112], "map": [9, 28, 43, 46, 93, 95, 97], "point": [9, 16, 20, 21, 27, 37, 38, 46, 53, 54, 55, 58, 59, 72, 75, 79, 85, 90, 97, 98, 99, 102, 103], "psf_name": 10, "periodicboxvector": [10, 12, 18], "unitcelldimens": [10, 12, 18], "A": [10, 11, 12, 13, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 28, 29, 31, 32, 34, 35, 39, 46, 56, 58, 59, 66, 67, 68, 78, 85, 87, 90, 95, 96, 97, 99, 105, 107, 110, 113], "chemic": [10, 15], "structur": [10, 28, 33, 92], "numer": [10, 65, 95, 115], "residue_list": 10, "atom_list": 10, "bond_list": 10, "angle_list": 10, "dihedral_list": 10, "dihedral_parameter_list": 10, "improper_list": 10, "cmap_list": 10, "donor_list": 10, "donor": [10, 57], "acceptor_list": 10, "acceptor": [10, 57], "group_list": 10, "four": [10, 13, 22, 24, 25, 53, 54, 55, 57, 58, 59, 61, 89, 91, 98], "addit": [10, 16, 21, 22, 28, 33, 50, 52, 53, 54, 56, 57, 58, 59, 60, 61, 70, 72, 98], "drude": [10, 16, 22, 65, 66, 67, 68, 69, 86], "psf": [10, 19], "drudeconsts_list": 10, "drudepair_list": 10, "lonepair_list": 10, "aniso_list": 10, "charmmparameterset": 10, "urey_bradley_list": 10, "give": [10, 22, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 68, 72, 90], "pointer": [10, 95, 96, 98], "g": [10, 16, 27, 46, 86, 108, 109, 110, 112], "nre": 10, "test": [10, 37], "33": 10, "32": [10, 93], "open": [10, 11, 12, 13, 16, 22, 23, 26, 29], "crystallograph": [10, 12, 17, 18, 33], "cell": [10, 12, 17, 18, 22, 33, 83], "rectangular": [10, 12, 18, 22, 33], "ioerror": 10, "charmmpsferror": 10, "encount": [10, 16, 90], "loadparamet": 10, "parmset": 10, "via": [10, 16, 55], "necessari": [10, 22, 46, 68], "cannot": [10, 11, 16, 37, 43, 46, 50, 51, 54, 55, 56, 57, 59, 60, 61, 65, 71, 72, 73, 74, 75, 85, 89, 90, 91, 98], "missingparamet": 10, "try": [10, 11, 36, 46, 56, 59, 60, 71, 72, 85, 90, 99, 102, 103], "insert": [10, 33, 59], "wildcard": 10, "central": [10, 59], "wild": 10, "card": 10, "specif": [10, 11, 16, 28, 39, 46, 58, 65, 70, 84, 90, 93, 94, 97, 99], "expand": 10, "separ": [10, 29, 37, 56, 58, 59, 60, 68, 75, 85, 87, 90, 98, 106], "term": [10, 36, 37, 38, 43, 50, 51, 54, 55, 56, 61, 68, 71, 73, 74, 75, 84, 85, 86, 87, 89, 91], "multi": [10, 59, 68, 86, 87, 107], "expans": 10, "setbox": 10, "b": [10, 37, 46, 56, 58, 98, 110], "90": 10, "beta": 10, "gamma": [10, 59], "boundari": [10, 13, 24, 25, 36, 37, 38, 39, 40, 41, 43, 44, 46, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 65, 70, 71, 72, 73, 74, 75, 81, 82, 83, 84, 85, 86, 89, 91, 92, 93, 94, 98], "network": 10, "flexibleconstraint": [10, 16], "verbos": [10, 14], "drudemass": [10, 16], "4": [10, 16, 34, 35, 38, 56, 58, 60, 85], "dalton": [10, 15, 16], "attributeerror": 10, "illeg": 10, "input": [10, 15, 37, 95, 99], "parametr": [10, 85], "u": [10, 39, 56], "convers": [10, 85, 108, 110, 112], "out": [10, 12, 21, 23, 26, 28, 60, 72, 88], "progress": [10, 29], "amu": [10, 16], "parent": [10, 16, 39, 65, 66, 67, 68, 69, 86], "cach": [10, 46], "boxlength": 10, "3": [10, 33, 34, 35, 37, 38, 53, 54, 56, 59, 61, 68, 75, 79, 85, 86, 87, 88, 97, 99, 110, 114], "boxvector": [10, 22], "deletecmap": 10, "reportinterv": [11, 13, 24, 25, 27, 29], "writest": 11, "save": [11, 21, 27, 28, 60, 97], "checkpoint": [11, 28, 46], "anoth": [11, 22, 28, 39, 58, 59, 60, 68, 81, 82, 83, 84, 85, 86, 87, 108, 110, 111, 112], "last": [11, 90], "serial": [11, 28, 68, 87, 95, 96, 106], "more": [11, 16, 22, 27, 28, 34, 35, 39, 43, 46, 53, 54, 56, 58, 59, 60, 70, 78, 86, 87, 90, 93, 99, 103, 108, 115], "portabl": [11, 28], "thorough": 11, "record": [11, 17, 23, 28, 46, 93, 96, 97], "To": [11, 12, 13, 21, 22, 23, 24, 25, 27, 28, 29, 34, 35, 36, 37, 38, 39, 40, 43, 45, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 71, 72, 73, 74, 75, 79, 85, 89, 90, 91, 98, 105, 108], "": [11, 13, 14, 16, 17, 21, 22, 23, 24, 25, 28, 29, 36, 37, 39, 40, 43, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 65, 68, 71, 72, 73, 74, 75, 80, 83, 85, 87, 89, 90, 91, 92, 94, 95, 96, 100, 101, 105, 112], "continu": [11, 21, 28, 46, 47, 48, 49, 80, 99, 102, 103], "recip": 11, "loadcheckpoint": [11, 28, 46], "chk": 11, "reload": [11, 28], "like": [11, 16, 22, 28, 46, 58, 59, 61, 83, 90, 111], "loadstat": [11, 28], "xml": [11, 16, 22, 28, 33, 106], "publicli": [11, 28, 46], "visibl": [11, 28, 46], "intern": [11, 19, 28, 32, 46, 52, 66, 67, 68, 69, 90, 108, 110, 111], "gener": [11, 12, 13, 16, 22, 23, 24, 25, 26, 28, 29, 33, 36, 46, 56, 108, 110], "ideal": [11, 27, 46, 57], "restor": [11, 46], "written": [11, 12, 21, 23, 26, 28, 29, 46, 95], "trajectori": [11, 12, 28, 46, 78, 102, 103], "strictli": [11, 46, 56, 100, 101], "reli": [11, 46], "purpos": [11, 46, 53, 56, 102, 103], "close": [11, 14, 46, 65, 67, 68, 78], "enough": [11, 17, 22, 46, 58], "reason": [11, 20, 22, 46, 60, 95, 110, 112], "consid": [11, 15, 16, 28, 46], "highli": [11, 28, 46], "depend": [11, 21, 22, 39, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 79, 84, 85, 88, 92, 97, 100, 101, 105], "being": [11, 12, 13, 21, 23, 24, 25, 26, 37, 39, 46, 56, 57, 58, 59, 60, 71, 72, 75, 81, 82, 83, 84, 85, 86, 93, 95, 96, 97], "hardwar": [11, 28, 46], "softwar": [11, 46], "fail": [11, 46], "often": [11, 33, 34, 35, 46, 56, 57, 58, 59, 60, 85, 95, 98, 102, 103], "incompat": [11, 46], "signal": [11, 36, 46], "throw": [11, 46, 54, 56, 57, 60, 90, 95, 97, 98], "contrast": [11, 56, 58, 60], "much": [11, 34, 35, 67, 68, 78, 93], "put": [11, 28], "back": [11, 22, 28, 45], "approxim": [11, 28, 39, 46, 56, 60, 67, 68, 71, 85], "had": [11, 28, 29, 97], "expect": [11, 28, 90, 95], "origin": [11, 22, 28, 79, 90, 95, 110], "write": [11, 12, 13, 21, 23, 24, 25, 26, 27, 28, 29, 58, 60], "content": [11, 22], "overwritten": 11, "binari": [11, 28, 46], "mode": [11, 23, 26, 27, 29, 39, 59, 60, 84, 90], "text": 11, "interv": [11, 12, 13, 21, 24, 25, 27, 28, 29, 85], "describenextreport": [11, 13, 24, 25, 29], "next": [11, 13, 22, 24, 25, 29, 43, 45, 53, 54, 55, 56, 57, 58, 59, 60, 85], "five": [11, 29], "until": [11, 13, 24, 25, 28, 29, 45, 58, 80, 102, 103], "whether": [11, 13, 16, 20, 22, 24, 25, 29, 36, 37, 38, 39, 40, 41, 43, 44, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 65, 70, 71, 72, 73, 74, 75, 81, 82, 83, 84, 85, 86, 89, 90, 91, 92, 93, 94, 95, 98], "requir": [11, 13, 22, 23, 24, 25, 26, 27, 29, 46, 56, 58, 59, 60, 67, 68, 69, 70, 81, 82, 83, 84, 87, 90, 98, 100, 101, 112], "respect": [11, 13, 24, 25, 29, 50, 51, 52, 53, 54, 56, 58, 59, 60, 61, 97], "firststep": 12, "dcd": [12, 13], "format": [12, 22, 23, 26, 29, 95], "support": [12, 18, 22, 39, 46, 52, 53, 54, 56, 57, 58, 59, 60, 85, 90, 98, 110, 114], "program": 12, "namd": 12, "x": [12, 22, 37, 38, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 72, 75, 79, 81, 84, 85, 88, 98, 114], "plor": 12, "subtli": 12, "standard": [12, 15, 16, 20, 22, 33, 37, 39, 58, 72, 75, 85, 90], "byte": 12, "big": 12, "endian": 12, "littl": 12, "alwai": [12, 18, 22, 33, 84, 95], "writemodel": [12, 23, 26], "onc": [12, 23, 28, 34, 35, 36, 37, 38, 39, 40, 50, 51, 55, 56, 58, 59, 60, 61, 65, 71, 72, 73, 74, 75, 80, 85, 89, 91, 93, 98], "molecular": [12, 14, 22, 23, 26, 37, 59, 60, 75, 85, 93, 98, 115], "frequenc": [12, 21, 34, 35, 41, 44, 68, 81, 82, 83, 84, 86, 87, 94], "full": [12, 17, 68, 87], "arbitrari": [12, 16, 36, 37, 38, 39, 40, 41, 43, 44, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 65, 70, 71, 72, 73, 74, 75, 81, 82, 83, 84, 85, 89, 91, 92, 94, 95], "triclin": [12, 46, 98], "neither": [12, 53], "enforceperiodicbox": [13, 24, 25, 46, 93], "output": [13, 23, 24, 25, 26, 27, 28, 29, 37, 95, 115], "frame": [13, 17, 23, 24, 25, 26, 27, 29, 37, 75], "translat": [13, 24, 25, 46, 93], "center": [13, 22, 24, 25, 44, 46, 53, 67, 68, 83, 86, 87, 93], "li": [13, 22, 24, 25, 46, 84, 93], "decid": [13, 24, 25, 58], "six": [13, 24, 25, 57], "final": [13, 22, 23, 24, 25, 28, 45, 50, 51, 55, 56, 61, 72, 75, 85], "wrap": [13, 24, 25], "lie": [13, 24, 25], "desmond": 14, "dm": 14, "multipl": [14, 16, 21, 22, 23, 34, 35, 45, 56, 58, 59, 68, 70, 85, 87, 90, 97, 110, 112], "gettopologi": [14, 22, 23, 26], "getproven": 14, "proven": 14, "setposit": [14, 46, 93], "attach": [14, 65, 67, 68], "setveloc": [14, 46, 93], "opl": 14, "agbnpvers": 14, "combin": [14, 39, 57, 71, 72, 85, 110], "rule": [14, 22, 39, 72, 85, 90, 98, 105], "agbnp": 14, "correspond": [14, 16, 21, 22, 33, 37, 45, 69, 72, 75, 85, 93, 95, 97, 112], "tabl": [14, 62, 63, 64], "sql": 14, "connect": [14, 16, 22, 33, 38, 46, 50, 51, 61, 65, 68, 74, 76, 86, 87, 93], "symbol": [15, 108, 109, 111, 112], "modul": [15, 16, 22], "carbon": 15, "static": [15, 22, 23, 26, 33, 39, 41, 80, 81, 82, 83, 84, 90, 94, 96, 106, 114], "getbysymbol": 15, "look": [15, 18, 34, 35, 58], "immut": 15, "getbymass": 15, "closest": 15, "request": [15, 22, 50, 51, 52, 53, 54, 56, 60, 61, 90, 97], "repartit": 15, "find": [15, 16, 90, 102, 103], "assum": [15, 22, 28, 29, 45, 56, 58, 79, 81, 82, 83, 84, 96, 100, 101, 107], "entri": [16, 26, 37, 75, 93], "absolut": [16, 22, 68, 86, 87, 90, 102, 103, 110], "path": [16, 22, 90], "rel": [16, 22, 67, 68, 86, 87, 90], "work": [16, 22, 58, 59, 60, 83, 110], "directori": [16, 18, 21, 22, 90], "subdirectori": [16, 22], "built": [16, 22, 33], "loadfil": 16, "resname_prefix": 16, "prefix": [16, 109], "prepend": 16, "getgener": 16, "regist": [16, 68, 87, 90, 96], "registergener": 16, "registeratomtyp": 16, "registerresiduetempl": 16, "templat": [16, 22, 95], "registerpatch": 16, "patch": [16, 22], "registertemplatepatch": 16, "patchresidueindex": 16, "registerscript": 16, "script": 16, "build": [16, 22], "registertemplatematch": 16, "matcher": 16, "overrid": [16, 22, 39], "logic": [16, 96], "callabl": 16, "invok": [16, 95], "f": [16, 22, 27, 34, 35, 56, 58, 62, 63, 64], "bondedtoatom": 16, "ignoreexternalbond": [16, 22], "ignoreextraparticl": 16, "where": [16, 21, 46, 52, 53, 54, 57, 59, 60, 83, 85, 86, 92, 97, 103], "extern": [16, 22, 32, 55], "extra": [16, 22, 23, 58, 115], "particul": 16, "_templatedata": 16, "experiment": 16, "api": [16, 28], "subject": [16, 86], "chang": [16, 22, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 70, 71, 72, 73, 74, 75, 81, 82, 83, 84, 85, 89, 91, 92, 94, 99, 110, 112], "registertemplategener": 16, "parameter": 16, "handler": 16, "small": [16, 22, 85], "unnatur": 16, "conform": [16, 27], "abl": [16, 85], "successfulli": [16, 90], "directli": [16, 30, 31, 32, 52, 58, 60, 96, 98, 106], "ffxml": 16, "programmat": 16, "getunmatchedresidu": 16, "check": [16, 21, 38, 46, 95, 98], "against": 16, "unmatched_residu": 16, "miss": [16, 22], "diagnos": 16, "getmatchingtempl": 16, "debug": 16, "issu": [16, 19, 61], "relat": [16, 37, 78], "generatetemplatesforunmatchedresidu": 16, "taken": [16, 60], "residuetempl": 16, "user": [16, 36, 37, 38, 39, 40, 41, 43, 44, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 65, 70, 71, 72, 73, 74, 75, 81, 82, 83, 84, 85, 88, 89, 91, 92, 94, 107, 115], "event": 16, "fe2": 16, "fe3": 16, "monoatom": 16, "iron": 16, "ion": [16, 22], "piec": [16, 22, 46, 56, 59, 97], "larger": [16, 22, 59, 84, 90, 102, 103], "chain": [16, 22, 23, 26, 32, 33, 68, 85, 86, 87], "termin": [16, 22], "properli": [16, 22, 27], "ambigu": 16, "happen": [16, 23], "keyword": 16, "gromac": [17, 18], "gro": 17, "some": [17, 22, 29, 37, 46, 56, 59, 70, 75, 85, 90, 92, 97], "topolog": [17, 33], "public": 17, "retriev": [17, 23, 26, 46, 90, 93], "getnumfram": [17, 23, 26], "getperiodicboxvector": [17, 33, 97], "getunitcelldimens": [17, 33], "includedir": 18, "we": [18, 53, 54, 57, 59, 110], "attempt": [18, 27, 81, 82, 83, 84, 94, 95], "locat": [18, 21, 28, 39, 46, 79, 80, 88, 90, 100, 101], "instal": 18, "your": [18, 34, 35, 58, 60, 102, 103], "usr": 18, "local": [18, 22, 27, 28, 75, 79, 80, 102, 103], "resolv": 18, "share": [18, 21, 75, 112], "preprocessor": 18, "predefin": 18, "sinc": [18, 29, 39, 45, 46, 81, 82, 83, 84, 93, 97], "2019": [18, 35, 78, 87], "longer": 18, "remov": [18, 22, 44, 47, 48, 49, 62, 63, 64, 90, 98, 99], "futur": [18, 37, 47, 48, 49, 62, 63, 64, 90, 99], "releas": [18, 37, 47, 48, 49, 62, 63, 64, 90, 99], "fatal": 19, "metadynam": 20, "minvalu": [20, 21], "maxvalu": [20, 21], "biaswidth": 20, "gridwidth": [20, 21], "collect": [20, 21, 52, 68, 86, 87], "bia": [20, 21], "minimum": [20, 27, 28, 55, 80, 85, 102, 103, 110], "ever": [20, 66, 67, 68, 69, 102, 103], "go": [20, 60, 72, 85], "below": [20, 59, 60, 102, 103], "maximum": [20, 27, 28, 66, 67, 68, 69, 80, 87, 102, 103, 110], "abov": [20, 22, 55, 56, 58, 59, 60], "width": [20, 72, 75], "deviat": [20, 92], "gaussian": [20, 21, 58], "dure": [20, 28, 50, 51, 52, 53, 54, 55, 57, 59, 60, 61, 80, 90, 95, 111], "physic": [20, 29, 107, 108, 110, 112], "grid": [20, 37, 38, 43, 75, 85], "omit": [20, 27, 33, 38, 53, 56, 57, 59, 60, 66, 67, 68, 69, 72, 75, 85, 87], "biasfactor": 21, "height": 21, "savefrequ": 21, "biasdir": 21, "well": [21, 22, 37, 50, 51, 55, 56, 57, 60, 61, 67, 68, 72, 81, 83, 85, 87, 90], "temper": [21, 27, 103], "barducci": 21, "smoothli": [21, 60, 72, 85], "converg": [21, 28, 37, 80], "tunabl": 21, "free": [21, 39, 68, 83, 87, 95], "http": [21, 22, 114], "doi": 21, "org": [21, 114], "10": [21, 27, 28, 35, 80], "1103": 21, "physrevlett": 21, "100": [21, 29, 55], "020603": 21, "three": [21, 22, 49, 50, 53, 54, 56, 57, 58, 59, 61, 64, 72, 73, 79, 83, 85, 88, 100], "acceler": [21, 27], "bias": [21, 92], "zero": [21, 24, 25, 37, 44, 46, 58, 60, 68, 72, 79, 85, 87, 97, 110], "As": [21, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61], "bump": 21, "push": 21, "awai": 21, "area": [21, 27, 36, 56, 84], "alreadi": [21, 22, 29, 36, 37, 40, 41, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 65, 71, 72, 73, 74, 75, 81, 82, 83, 84, 85, 86, 89, 91, 94], "explor": [21, 27], "encourag": 21, "region": [21, 27], "At": [21, 27, 44], "want": [21, 28, 46, 52, 53, 54, 58, 59, 60, 85, 92, 95, 97, 110, 115], "biasvari": 21, "usual": [21, 38, 43, 50, 51, 53, 54, 59, 61, 73, 74, 85, 89, 91, 102, 103, 110], "disk": 21, "metqdynam": 21, "own": [21, 34, 35, 58], "serv": 21, "import": [21, 27, 45, 61, 97, 103], "let": [21, 22, 56, 57, 59, 60, 85], "stop": [21, 58, 114], "resum": [21, 28], "earlier": [21, 102, 103], "easi": 21, "parallel": 21, "across": [21, 28], "process": 21, "customcvforc": [21, 92], "scale": [21, 22, 36, 56, 58, 65, 71, 72, 75, 81, 83, 84, 85, 86, 94, 110, 112], "getfreeenergi": 21, "n": [21, 29, 39, 59], "dimension": [21, 47, 48, 49, 62, 63, 64, 99, 107], "kj": [21, 36, 69, 71, 72, 73, 74, 85, 91], "th": [21, 36, 37, 46, 56, 59, 60, 68, 71, 72, 75, 85, 87], "axi": [21, 22, 37, 72, 75, 79, 81, 84, 85], "getcollectivevari": [21, 52], "tool": 22, "edit": 22, "variou": [22, 28, 46, 84, 99, 112], "addtopologi": 22, "addposit": 22, "what": [22, 23, 28, 46, 68, 96, 97], "todelet": 22, "granular": 22, "caus": [22, 28, 46, 59, 61, 72, 75, 85, 90, 110], "particip": [22, 98], "deletewat": 22, "convertwat": 22, "tip3p": 22, "addextraparticl": 22, "spce": 22, "tip4pew": 22, "tip5p": 22, "addsolv": 22, "forcefield": 22, "boxsiz": 22, "pad": 22, "numad": 22, "boxshap": 22, "cube": 22, "positiveion": 22, "na": 22, "negativeion": 22, "cl": [22, 114], "ionicstrength": 22, "molar": 22, "neutral": 22, "fill": 22, "van": [22, 39, 72, 85], "der": [22, 39, 72, 85], "waal": [22, 39, 72, 85], "radii": [22, 56, 85], "charg": [22, 36, 37, 56, 57, 59, 65, 71, 75, 85], "neg": [22, 57, 110], "randomli": 22, "select": [22, 27, 37, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 75, 85, 95], "replac": [22, 53, 54, 57, 59, 72, 75, 85], "ionic": 22, "strength": [22, 72, 80, 85], "monoval": 22, "sever": [22, 37, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 65, 72, 75, 79, 85], "sphere": [22, 72], "determin": [22, 37, 42, 53, 54, 56, 57, 59, 67, 72, 75, 77, 78, 85, 90, 93, 95, 102], "diamet": [22, 72], "come": [22, 58], "closer": [22, 39], "copi": [22, 36, 37, 39, 40, 43, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 71, 72, 73, 74, 75, 85, 89, 91, 92, 93, 94, 95, 97, 99, 110], "larg": [22, 102, 103], "hold": [22, 83], "amount": [22, 28, 84, 94], "shape": [22, 81, 83, 110], "cubic": [22, 39, 43, 99], "rhombic": 22, "dodecahedron": 22, "truncat": [22, 60, 72, 85], "octahedron": 22, "achiev": 22, "smaller": [22, 84], "compact": 22, "volum": [22, 29, 39, 84, 85, 97], "70": 22, "7": [22, 39, 68, 86, 87], "There": [22, 37, 46, 56, 58, 59, 65, 75, 84, 85, 95, 99, 112], "veri": [22, 52, 56, 58, 59, 60, 94], "preequilibr": 22, "limit": [22, 28, 37, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 65, 67, 68, 72, 75, 85, 102, 103], "equal": [22, 27, 36, 37, 38, 39, 40, 41, 43, 44, 46, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 65, 67, 68, 70, 71, 72, 73, 74, 75, 81, 82, 83, 84, 85, 89, 91, 92, 94, 102, 103, 110], "fb": 22, "minim": [22, 28, 69, 80, 115], "correct": [22, 43, 58, 60, 71, 95], "likewis": [22, 58, 60, 65, 72, 97], "tip4p": 22, "ew": 22, "site": [22, 39, 46, 79, 88, 98, 100, 101, 105], "swm4ndp": 22, "polariz": [22, 39, 65, 75], "k": [22, 50, 51, 53, 55, 57, 61, 73, 74, 89], "rb": 22, "br": 22, "Be": [22, 46, 56, 58, 59, 60, 70], "awar": [22, 37, 46, 56, 59, 60, 70], "loadhydrogendefinit": 22, "addhydrogen": 22, "amino": [22, 33], "acid": [22, 33], "nucleotid": [22, 33], "subsequ": [22, 33], "ph": 22, "variant": [22, 56], "form": [22, 39, 43, 50, 51, 53, 54, 57, 58, 59, 60, 61, 73, 89, 91, 93, 110], "environ": [22, 90], "These": [22, 53, 54, 58, 59, 60, 98], "presenc": 22, "absenc": 22, "aspart": 22, "ash": 22, "delta": [22, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61], "oxygen": [22, 59], "asp": 22, "cystein": 22, "cy": 22, "sulfur": 22, "cyx": 22, "No": [22, 23, 59], "part": [22, 40, 50, 51, 53, 54, 55, 56, 57, 59, 60, 61, 67, 68, 93, 115], "disulfid": [22, 33], "glutam": 22, "glh": 22, "epsilon": [22, 37, 39, 40, 60, 72, 75, 85], "glu": 22, "histidin": 22, "hid": 22, "nd1": 22, "hie": 22, "ne2": 22, "hip": 22, "hin": 22, "lysin": 22, "lyn": 22, "zeta": 22, "nitrogen": 22, "ly": 22, "common": [22, 34, 35, 59, 66, 75, 112], "better": 22, "special": [22, 55, 65, 72, 85], "desir": [22, 61, 95], "never": [22, 58, 60, 85], "ones": [22, 23, 26, 37, 41, 55, 56, 58, 59, 60, 65, 67, 68, 71, 72, 75, 81, 82, 83, 84, 85, 86, 90, 94, 99, 107], "pick": [22, 46], "optim": 22, "start": [22, 29, 58, 60, 70, 102, 103, 114], "still": [22, 37, 46, 59, 60, 81, 85, 95, 102, 103], "lone": 22, "virtual": [22, 46, 79, 88, 98, 100, 101, 105], "adjust": [22, 44, 45, 46, 58, 69, 81, 82, 83, 97, 102, 103], "distribut": [22, 46, 58, 90], "fact": [22, 95], "primarili": [22, 56, 83, 85], "tri": [22, 110], "addmembran": 22, "lipidtyp": 22, "popc": 22, "membranecenterz": 22, "minimumpad": 22, "lipid": 22, "membran": [22, 84], "best": [22, 102, 103], "avoid": [22, 45, 46], "insid": [22, 58], "head": 22, "xy": [22, 38, 84], "plane": [22, 84, 88, 100], "protein": [22, 23, 39], "orient": [22, 72], "correctli": 22, "possibl": [22, 28, 46, 59], "recommend": 22, "opm": 22, "databas": 22, "phar": 22, "umich": 22, "edu": 22, "yourself": 22, "wolf": 22, "comp": 22, "31": [22, 36, 37, 38, 39, 40, 41, 43, 44, 46, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 65, 70, 71, 72, 73, 74, 75, 81, 82, 83, 84, 85, 89, 91, 92, 93, 94], "pp": [22, 27, 34, 35], "2169": 22, "2174": 22, "2010": 22, "tile": 22, "pre": [22, 58], "equilibr": 22, "down": [22, 93], "50": 22, "y": [22, 37, 38, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 63, 64, 72, 75, 79, 81, 84, 85, 98, 114], "ax": [22, 46, 72, 79, 81, 84, 97, 98], "leaf": 22, "dynam": [22, 35, 42, 45, 77, 78, 90, 93, 96, 102], "relax": 22, "gradual": 22, "least": [22, 98], "far": [22, 53, 67, 68], "edg": [22, 46, 98], "That": [22, 45, 52, 53, 54, 56, 57, 58, 59, 60, 85, 95], "lead": 22, "pope": 22, "dlpc": 22, "dlpe": 22, "dmpc": 22, "dopc": 22, "dppc": 22, "pdbfile": [22, 33], "pdbxfile": 22, "z": [22, 37, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 64, 72, 75, 79, 81, 84, 85, 98, 114], "extraparticleidentifi": 23, "ep": [23, 59], "bank": 23, "pdb": [23, 24, 28, 33], "writefil": [23, 26], "writehead": [23, 26], "writefoot": 23, "complet": [23, 28, 29, 46, 50, 51, 60, 61, 72, 75, 85, 113], "column": [23, 29], "_io": [23, 26, 27], "textiowrapp": [23, 26, 27], "stdout": [23, 26, 27], "w": [23, 26, 27, 37, 39, 79, 88], "encod": [23, 26, 27], "utf": [23, 26, 27], "8": [23, 26, 27, 34, 35, 56], "keepid": [23, 26], "id": [23, 26, 30, 31, 32, 33, 68, 86, 87], "rather": [23, 26, 39, 53, 54, 58, 59, 60, 72, 85, 110], "warn": [23, 26], "caller": [23, 26, 96], "sure": [23, 26, 45], "valid": [23, 26], "invalid": [23, 26], "modelindex": [23, 26], "surround": 23, "endmdl": 23, "could": [23, 59, 60, 83, 108], "footer": 23, "atomsubset": [24, 25], "pdbreport": [25, 28], "pdbx": [25, 26], "mmcif": [25, 26], "cif": 26, "numtemperatur": 27, "mintemperatur": 27, "maxtemperatur": 27, "weight": [27, 53, 79, 86, 88, 100, 101], "tempchangeinterv": 27, "25": [27, 56, 81, 82, 83, 84, 94], "1000": [27, 28, 45], "reportfil": 27, "vari": [27, 73, 74, 84, 89, 91, 93], "high": [27, 115], "easili": 27, "cross": [27, 58, 84, 88], "barrier": 27, "wider": 27, "space": [27, 34, 35, 43, 55, 85, 93], "low": 27, "thoroughli": 27, "marinari": 27, "parisi": 27, "europhi": 27, "lett": [27, 35], "19": 27, "6": [27, 38, 39, 56, 60, 85, 93], "451": 27, "458": 27, "1992": [27, 34, 35], "exponenti": 27, "extrem": [27, 56], "st": 27, "450": 27, "transit": [27, 83], "regular": [27, 28, 43, 86], "independ": [27, 56, 58, 68, 83, 84, 86, 87, 93, 107], "chodera": 27, "shirt": 27, "m": [27, 58, 86, 112], "135": 27, "194110": 27, "2011": 27, "factor": [27, 36, 37, 39, 56, 65, 71, 72, 75, 79, 85, 88, 100, 101, 108, 109, 110, 111, 112], "spend": 27, "wang": 27, "landau": 27, "rev": 27, "86": 27, "2050": 27, "2053": 27, "2001": [27, 34, 35], "analyz": [27, 28], "know": [27, 58, 96], "increas": [27, 59, 80], "platformproperti": 28, "simplifi": [28, 72], "ti": 28, "displai": 28, "line": [28, 29, 39, 58, 101], "constructor": [28, 29, 50, 51, 52, 53, 54, 55, 57, 59, 60, 61, 68, 76, 79, 87, 96], "transfer": [28, 75], "currentstep": 28, "minimizeenergi": 28, "kilojoul": 28, "maxiter": [28, 80], "how": [28, 29, 37, 42, 46, 54, 56, 58, 59, 67, 68, 75, 77, 78, 80, 84, 85, 90, 93, 96, 102], "halt": [28, 80], "root": [28, 80, 92, 110, 112], "squar": [28, 80, 85, 92, 110, 112], "reach": [28, 80, 102, 103], "iter": [28, 31, 32, 33, 37, 75, 80, 110], "regard": [28, 80], "runforclocktim": 28, "checkpointfil": 28, "statefil": 28, "checkpointinterv": 28, "fix": [28, 37, 54, 75, 79, 81, 84, 85, 98, 102, 103], "clock": [28, 29], "elaps": [28, 29], "longest": 28, "interrupt": 28, "hour": 28, "savecheckpoint": 28, "savest": 28, "represent": [28, 46, 95, 115], "exactli": [28, 39, 46, 56, 59, 60, 71, 72, 79, 84, 85, 92, 102, 103, 108, 109], "unlik": [28, 50, 51, 60, 61, 81, 103, 107], "therefor": [28, 56, 59, 75], "would": [28, 55, 58, 59, 60, 65, 110], "potentialenergi": 29, "kineticenergi": 29, "densiti": [29, 37, 75], "remainingtim": 29, "speed": 29, "elapsedtim": 29, "systemmass": 29, "totalstep": 29, "configur": [29, 46, 54, 78, 80, 84], "comma": 29, "csv": 29, "instantan": [29, 67, 68], "percent": 29, "estim": [29, 56, 90], "dai": 29, "reflect": 29, "immobil": 29, "addatom": [30, 33], "addchain": [31, 33], "insertioncod": [32, 33], "addresidu": [32, 33], "internal_bond": 32, "external_bond": 32, "consist": [33, 56, 57, 60, 65, 69, 83, 85, 110, 112, 115], "polym": [33, 93, 94], "nomenclatur": 33, "getnumatom": 33, "getnumresidu": 33, "getnumchain": 33, "getnumbond": [33, 51, 53, 54, 74], "identifi": [33, 36, 37, 38, 39, 40, 41, 43, 44, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 81, 82, 83, 84, 85, 86, 89, 90, 91, 92, 94], "code": [33, 50, 51, 53, 54, 55, 56, 57, 59, 60, 61, 90, 96, 112], "addbond": [33, 51, 53, 54, 74], "atom1": 33, "atom2": 33, "tripl": 33, "aromat": 33, "amid": 33, "setperiodicboxvector": [33, 46], "setunitcelldimens": 33, "orthogon": [33, 79], "loadbonddefinit": 33, "createstandardbond": 33, "affect": [33, 41, 46, 55, 81, 82, 83, 84, 85, 86, 94, 98, 102, 103, 107, 110], "createdisulfidebond": 33, "proxim": 33, "rrespa": 34, "expens": [34, 35, 46, 59, 60], "slowli": [34, 35, 58], "frequent": [34, 35, 46, 60], "inexpens": [34, 35, 85], "quickli": [34, 35, 58, 99], "divid": [34, 35, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 110, 112, 114], "setforcegroup": [34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 65, 70, 71, 72, 73, 74, 75, 81, 82, 83, 84, 85, 89, 91, 92, 94], "outermost": [34, 35], "femtosecond": [34, 35], "sai": [34, 35], "twice": [34, 35, 56, 60, 90], "eight": [34, 35], "reciproc": [34, 35, 85, 93], "direct": [34, 35, 46, 65, 72, 79, 85, 98], "nonbondedforc": [34, 35, 60, 71], "getforc": [34, 35, 46, 93, 97, 98], "isinst": [34, 35], "setreciprocalspaceforcegroup": [34, 35, 85], "tuckerman": [34, 35, 86], "97": [34, 35], "1990": [34, 35], "largest": [34, 35, 102, 103], "mtsintegr": 35, "friction": [35, 42, 58, 67, 77, 78, 93, 102], "baoab": [35, 78], "respa": [35, 58], "lagarder": 35, "2593": 35, "2599": 35, "heat": [35, 41, 42, 66, 67, 68, 69, 77, 78, 86, 87, 93, 102], "bath": [35, 41, 42, 66, 67, 68, 69, 77, 78, 86, 87, 93, 102], "coeffici": [35, 37, 42, 67, 75, 77, 78, 91, 93, 102], "coupl": [35, 42, 67, 77, 78, 86, 93, 102], "kirkwood": 36, "grycuk": 36, "addparticl": [36, 39, 40, 55, 56, 59, 60, 65, 71, 72, 75, 85, 98], "els": [36, 53, 54, 56, 57, 59, 60, 71, 72, 85], "setparticleparamet": [36, 39, 40, 55, 56, 59, 60, 65, 71, 72, 75, 85], "unless": [36, 37, 40, 50, 51, 53, 54, 55, 56, 57, 59, 60, 61, 65, 71, 72, 73, 74, 75, 85, 89, 91, 97, 110, 112], "updateparametersincontext": [36, 37, 39, 40, 43, 46, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 65, 71, 72, 73, 74, 75, 85, 89, 91, 92], "getnumparticl": [36, 39, 40, 55, 56, 59, 60, 65, 71, 72, 75, 79, 85, 88, 98, 100, 101, 105], "radiu": [36, 40, 56, 71, 72, 85], "scalingfactor": [36, 71], "proton": [36, 71, 85], "nm": [36, 37, 39, 46, 56, 57, 59, 60, 66, 67, 68, 69, 71, 72, 74, 75, 84, 85, 87, 97, 98], "getparticleparamet": [36, 39, 40, 55, 56, 59, 60, 65, 71, 72, 75, 85], "getsolventdielectr": [36, 56, 71], "setsolventdielectr": [36, 71], "getsolutedielectr": [36, 56, 71], "setsolutedielectr": [36, 71], "getincludecavityterm": 36, "caviti": 36, "setincludecavityterm": 36, "includecavityterm": 36, "getproberadiu": 36, "probe": 36, "sasa": 36, "contribut": [36, 39, 56, 58, 60, 70, 85, 97], "setproberadiu": 36, "proberadiu": 36, "getsurfaceareafactor": 36, "surfac": [36, 56, 71, 84], "setsurfaceareafactor": 36, "surfaceareafactor": 36, "effici": [36, 37, 39, 40, 43, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 65, 71, 72, 73, 74, 75, 85, 89, 91, 92, 93], "certain": [36, 37, 39, 40, 43, 46, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 65, 71, 72, 73, 74, 75, 81, 85, 89, 91, 92, 93, 98], "reiniti": [36, 37, 39, 40, 43, 46, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 65, 68, 71, 72, 73, 74, 75, 85, 89, 91, 92], "aspect": [36, 37, 39, 40, 46, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 71, 72, 75, 85], "unaffect": [36, 37, 39, 40, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 71, 72, 75, 85], "usesperiodicboundarycondit": [36, 37, 38, 39, 40, 41, 43, 44, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 65, 70, 71, 72, 73, 74, 75, 81, 82, 83, 84, 85, 86, 89, 91, 92, 94, 98], "pbc": [36, 37, 38, 39, 40, 41, 43, 44, 50, 51, 52, 53, 54, 56, 57, 59, 60, 61, 65, 71, 72, 73, 74, 75, 81, 82, 83, 84, 85, 86, 89, 91, 92, 94, 98], "getforcegroup": [36, 37, 38, 39, 40, 41, 43, 44, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 65, 70, 71, 72, 73, 74, 75, 81, 82, 83, 84, 85, 89, 91, 92, 94], "belong": [36, 37, 38, 39, 40, 41, 43, 44, 46, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 65, 70, 71, 72, 73, 74, 75, 81, 82, 83, 84, 85, 89, 91, 92, 94], "getnam": [36, 37, 38, 39, 40, 41, 43, 44, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 65, 70, 71, 72, 73, 74, 75, 81, 82, 83, 84, 85, 89, 90, 91, 92, 94, 95], "anyth": [36, 37, 38, 39, 40, 41, 43, 44, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 65, 70, 71, 72, 73, 74, 75, 81, 82, 83, 84, 85, 89, 91, 92, 94, 102, 103], "legal": [36, 37, 38, 39, 40, 41, 43, 44, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 65, 70, 71, 72, 73, 74, 75, 81, 82, 83, 84, 85, 89, 91, 92, 94], "inclus": [36, 37, 38, 39, 40, 41, 43, 44, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 65, 70, 71, 72, 73, 74, 75, 81, 82, 83, 84, 85, 89, 91, 92, 94], "setnam": [36, 37, 38, 39, 40, 41, 43, 44, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 65, 70, 71, 72, 73, 74, 75, 81, 82, 83, 84, 85, 89, 91, 92, 94, 95], "amoeba": [37, 38, 39], "multipol": [37, 75], "addmultipol": 37, "setmultipoleparamet": 37, "getnummultipol": 37, "getnonbondedmethod": [37, 39, 56, 57, 59, 60, 71, 72, 75, 85], "handl": [37, 39, 55, 56, 57, 59, 60, 71, 72, 75, 85, 86], "rang": [37, 39, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 71, 72, 75, 85], "setnonbondedmethod": [37, 39, 56, 57, 59, 60, 71, 72, 75, 85], "getpolarizationtyp": 37, "polarizationtyp": 37, "polar": [37, 56], "setpolarizationtyp": 37, "getcutoffdist": [37, 39, 56, 57, 59, 60, 71, 72, 75, 85], "setcutoffdist": [37, 39, 56, 57, 59, 60, 71, 72, 75, 85], "getpmeparamet": [37, 75, 85], "nx": [37, 75, 85], "ny": [37, 75, 85], "nz": [37, 75, 85], "setpmeparamet": [37, 75, 85], "getaewald": 37, "backward": [37, 39, 53, 54, 56, 57, 60, 106], "compat": [37, 39, 45, 53, 54, 56, 57, 60, 106, 110, 112], "setaewald": 37, "aewald": 37, "getpmebsplineord": 37, "spline": [37, 38, 43, 99], "spread": 37, "getpmegriddimens": 37, "void": [37, 96], "setpmegriddimens": [37, 75], "griddimens": 37, "getpmeparametersincontext": [37, 75, 85], "becaus": [37, 58, 59, 60, 75, 85, 93, 97, 110], "restrict": [37, 56, 58, 60, 70, 75, 80, 85], "slightli": [37, 39, 75, 85], "manual": [37, 75, 85], "moleculardipol": 37, "molecularquadrupol": 37, "axistyp": [37, 75], "multipoleatomz": [37, 75], "multipoleatomx": [37, 75], "multipoleatomi": [37, 75], "thole": [37, 65], "dampingfactor": 37, "info": 37, "dipol": [37, 65, 75], "quadrupol": [37, 75], "9": [37, 75], "lab": 37, "getmultipoleparamet": 37, "damp": [37, 75], "setcovalentmap": 37, "typeid": [37, 95], "covalentatom": 37, "covalentmap": 37, "covalenttyp": 37, "coval": [37, 83], "associ": [37, 58, 65, 68, 87, 98], "specfi": 37, "getcovalentmap": 37, "covalentlist": 37, "getmutualinducedmaxiter": 37, "max": [37, 47, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 110], "mutual": 37, "induc": [37, 75], "setmutualinducedmaxiter": 37, "inputmutualinducedmaxiter": 37, "getmutualinducedtargetepsilon": 37, "target": [37, 55, 68, 87, 115], "setmutualinducedtargetepsilon": 37, "inputmutualinducedtargetepsilon": 37, "setextrapolationcoeffici": [37, 75], "mu_0": [37, 75], "mu_1": [37, 75], "mu_2": [37, 75], "mu_n": [37, 75], "extrapol": [37, 75], "mth": [37, 75], "mu_m": [37, 75], "getextrapolationcoeffici": [37, 75], "vectord": [37, 75, 86], "154": 37, "017": 37, "658": 37, "474": 37, "getewalderrortoler": [37, 75, 85], "summat": [37, 75, 85], "averag": [37, 53, 67, 68, 75, 85, 100, 101, 102, 103], "level": [37, 75, 85, 103, 115], "rigor": [37, 75, 85], "overridden": [37, 70, 75], "setewalderrortoler": [37, 75, 85], "getlabframepermanentdipol": [37, 75], "moment": [37, 75], "getinduceddipol": [37, 75], "gettotaldipol": 37, "plu": [37, 93, 108], "getelectrostaticpotenti": 37, "inputgrid": 37, "electrostat": [37, 56, 75, 85], "outputelectrostaticpotenti": 37, "getsystemmultipolemo": 37, "lowest": 37, "nonvanish": 37, "nonzero": 37, "realli": [37, 55, 58, 59, 85], "outputmultipolemo": 37, "dipole_x": 37, "dipole_i": 37, "dipole_z": 37, "quadrupole_xx": 37, "quadrupole_xi": 37, "quadrupole_xz": 37, "quadrupole_yx": 37, "quadrupole_yi": 37, "quadrupole_yz": 37, "quadrupole_zx": 37, "quadrupole_zi": 37, "quadrupole_zz": 37, "furthermor": [37, 60, 71, 72, 75, 85], "addtorsiontors": 38, "settorsiontorsionparamet": 38, "getnumtorsiontors": 38, "getnumtorsiontorsiongrid": 38, "particle1": [38, 50, 51, 56, 59, 60, 61, 65, 72, 73, 74, 75, 79, 85, 88, 89, 91, 98, 100, 101], "particle2": [38, 50, 51, 56, 59, 60, 61, 65, 72, 73, 74, 75, 79, 85, 88, 89, 91, 98, 100, 101], "particle3": [38, 50, 61, 65, 73, 79, 88, 89, 91, 100], "particle4": [38, 61, 65, 89, 91], "particle5": 38, "chiralcheckatomindex": 38, "gridindex": 38, "third": [38, 43, 46, 50, 57, 58, 61, 65, 73, 75, 79, 88, 89, 91, 98, 100], "fourth": [38, 43, 61, 65, 89, 91], "fifth": 38, "chiral": 38, "gettorsiontorsionparamet": 38, "gettorsiontorsiongrid": 38, "vectorddd": 38, "settorsiontorsiongrid": 38, "deriv": [38, 46, 50, 51, 52, 53, 54, 56, 58, 60, 61, 93, 97], "fit": [38, 99], "2d": 38, "dedx": 38, "dedi": 38, "ded": 38, "setusesperiodicboundarycondit": [38, 43, 50, 51, 53, 54, 61, 73, 74, 89, 91], "displac": [38, 43, 50, 51, 53, 54, 61, 67, 68, 73, 74, 89, 91], "situat": [38, 43, 46, 50, 51, 53, 54, 55, 59, 61, 73, 74, 85, 89, 91, 92, 102, 103], "buffer": 39, "14": [39, 56], "12": [39, 60, 88], "sigma": [39, 59, 60, 72, 85], "individu": [39, 44, 53, 54, 59, 85], "addparticletyp": 39, "wish": 39, "addtypepair": 39, "featur": [39, 58, 60, 66, 85], "place": [39, 70, 79], "known": [39, 83, 85, 108], "reduct": 39, "reduc": [39, 60, 72, 75, 85], "softcor": 39, "alchem": 39, "alchemicalmethod": 39, "decoupl": 39, "annihil": 39, "normal": [39, 79, 85, 92, 100, 101, 114], "influenc": [39, 85], "amoebavdwlambda": 39, "power": [39, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 110, 112], "eq": 39, "jiao": 39, "golubkov": 39, "darden": 39, "t": [39, 95], "ren": 39, "ligand": 39, "bind": 39, "proc": [39, 78], "natl": 39, "acad": 39, "sci": 39, "2008": 39, "105": 39, "17": 39, "6290": 39, "6295": 39, "vdwforc": 39, "lambda": [39, 58, 60], "vdw": 39, "getnumparticletyp": 39, "getnumtypepair": 39, "particleindex": [39, 40, 85], "parentindex": 39, "reductionfactor": 39, "isalchem": 39, "typeindex": 39, "undergo": 39, "getparticletypeparamet": 39, "setparticletypeparamet": 39, "type1": 39, "type2": 39, "gettypepairparamet": 39, "pairindex": 39, "settypepairparamet": 39, "setsigmacombiningrul": 39, "sigmacombiningrul": 39, "arithmet": [39, 72, 85, 90], "geometr": [39, 53, 54, 59, 72, 85], "getsigmacombiningrul": 39, "setepsiloncombiningrul": 39, "epsiloncombiningrul": 39, "harmon": [39, 50, 51, 53, 55, 57, 61, 65, 73, 74, 80, 93], "h": 39, "hhg": 39, "getepsiloncombiningrul": 39, "getusedispersioncorrect": [39, 85], "beyond": [39, 60, 85], "applic": [39, 68, 85, 96, 115], "pressur": [39, 60, 81, 82, 83, 84, 85, 94], "improv": [39, 60, 67, 68, 85, 102, 103], "qualiti": [39, 60, 85], "setusedispersioncorrect": [39, 85], "usecorrect": [39, 85], "getuseparticletyp": 39, "setparticleexclus": 39, "exclus": [39, 56, 57, 59, 60], "getparticleexclus": 39, "setcutoff": 39, "getcutoff": 39, "getpotentialfunct": 39, "potentialfunct": 39, "setpotentialfunct": 39, "setsoftcorepow": 39, "getsoftcorepow": 39, "setsoftcorealpha": 39, "getsoftcorealpha": 39, "getalchemicalmethod": 39, "setalchemicalmethod": 39, "amoebageneralizedkirkwoodforc": 40, "wca": 40, "dispers": [40, 75, 85], "getepso": 40, "getepsh": 40, "getrmino": 40, "getrminh": 40, "getawat": 40, "getshctd": 40, "getdispoff": 40, "getslevi": 40, "setepso": 40, "inputvalu": 40, "setepsh": 40, "setrmino": 40, "setrminh": 40, "setawat": 40, "setshctd": 40, "setdispoff": 40, "setslevi": 40, "andersen": 41, "defaulttemperatur": [41, 81, 82, 83, 84], "defaultcollisionfrequ": 41, "collis": [41, 68, 86, 87], "collisionfrequ": [41, 68, 86, 87], "getdefaulttemperatur": [41, 81, 82, 83, 84], "setdefaulttemperatur": [41, 81, 82, 83, 84], "getdefaultcollisionfrequ": 41, "setdefaultcollisionfrequ": 41, "brownian": 42, "frictioncoeff": [42, 67, 77, 78, 93, 102], "stepsiz": [42, 58, 66, 67, 68, 69, 77, 78, 87, 93, 104], "gettemperatur": [42, 67, 68, 77, 78, 86, 87, 93, 102], "settemperatur": [42, 67, 68, 77, 78, 86, 87, 93, 102], "temp": [42, 66, 67, 69, 77, 78, 81, 82, 83, 84, 93, 102], "getfrict": [42, 67, 77, 78, 93, 102], "strongli": [42, 67, 77, 78, 93, 102], "invers": [42, 67, 68, 77, 78, 84, 87, 93, 102, 110], "setfrict": [42, 67, 77, 78, 93, 102], "coeff": [42, 67, 77, 78, 93, 102], "phi": 43, "psi": [43, 56], "natur": [43, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 99], "interpol": [43, 60, 85, 99], "addmap": 43, "uniformli": [43, 58], "addtors": [43, 61, 89, 91], "getnummap": 43, "getnumtors": [43, 61, 89, 91], "pi": [43, 54, 61], "getmapparamet": 43, "setmapparamet": 43, "a1": [43, 57], "a2": [43, 57], "a3": [43, 57], "a4": 43, "b1": [43, 56], "b2": [43, 56], "b3": 43, "b4": 43, "gettorsionparamet": [43, 61, 89, 91], "settorsionparamet": [43, 61, 89, 91], "prevent": [44, 46, 98, 102, 103], "drift": 44, "momentum": [44, 58], "getfrequ": [44, 81, 82, 83, 84, 94], "setfrequ": [44, 81, 82, 83, 84, 94], "freq": [44, 81, 82, 83, 84, 94], "forth": 45, "whatev": [45, 46, 93, 95, 97], "customintegr": 45, "addintegr": 45, "verletintegr": [45, 58], "001": [45, 58, 102, 103], "langevinintegr": [45, 78, 81, 82, 83, 84], "setcurrentintegr": 45, "verlet": [45, 58, 69, 103, 104], "langevin": [45, 67, 77, 78, 102], "rememb": [45, 58], "leapfrog": [45, 58, 78, 87, 97], "style": 45, "offset": [45, 85, 89, 97], "half": [45, 58, 78, 97], "introduc": 45, "getnumintegr": 45, "getintegr": 45, "getcurrentintegr": 45, "whichev": [45, 53, 54, 59], "snapshot": [46, 97], "getstat": [46, 50, 51, 52, 53, 54, 56, 60, 61, 93, 97], "analysi": 46, "getsystem": 46, "getplatform": [46, 90], "setstat": 46, "unchang": [46, 59, 60, 110], "advantag": [46, 60], "gettim": [46, 97], "settim": 46, "getstepcount": [46, 97], "count": [46, 114], "setstepcount": 46, "enforc": [46, 67, 68, 80], "applyconstraint": 46, "setvelocitiestotemperatur": 46, "randomse": 46, "osrngse": 46, "boltzmann": [46, 58], "getparamet": [46, 93, 97], "mapstringdoubl": [46, 97], "setparamet": [46, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 85], "mostli": [46, 98], "document": [46, 98], "recomput": [46, 58, 79], "applyvelocityconstraint": 46, "computevirtualsit": 46, "rare": [46, 59], "preservest": 46, "rebuild": 46, "too": [46, 53, 90], "sometim": [46, 60, 67, 68], "discard": 46, "tell": [46, 58], "preserv": 46, "lost": 46, "getmolecul": 46, "vectorii": 46, "descript": [46, 96, 108], "getenergi": [46, 93], "getparameterderiv": [46, 93], "getintegratorparamet": 46, "act": [46, 58, 72, 81, 82, 83, 84, 90, 93, 94, 97, 98], "createcheckpoint": 46, "treat": [46, 59, 84, 86, 98], "opaqu": 46, "min": [47, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 110], "getfunctionparamet": [47, 48, 49, 54, 56, 57, 60, 62, 63, 64], "setfunctionparamet": [47, 48, 49, 52, 54, 56, 57, 60, 62, 63, 64, 99], "__eq__": [47, 48, 49, 62, 63, 64, 99, 110], "__ne__": [47, 48, 49, 62, 63, 64, 99, 110], "getperiod": [47, 48, 49, 62, 63, 64, 99], "statu": [47, 48, 49, 62, 63, 64, 99], "getupdatecount": [47, 48, 49, 62, 63, 64, 99], "counter": [47, 48, 49, 62, 63, 64, 99], "fast": [47, 48, 49, 58, 62, 63, 64, 90, 99], "detect": [47, 48, 49, 62, 63, 64, 99], "xsize": [48, 49, 63, 64], "ysize": [48, 49, 63, 64], "xmin": [48, 49], "xmax": [48, 49], "ymin": [48, 49], "ymax": [48, 49], "zsize": [49, 64], "zmin": 49, "zmax": 49, "harmonicangleforc": 50, "customiz": [50, 51, 60, 61], "algebra": [50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61], "theta": [50, 61], "choos": [50, 51, 55, 60, 61], "Then": [50, 51, 52, 53, 54, 55, 57, 59, 60, 61], "addperangleparamet": 50, "addglobalparamet": [50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 85], "addangl": [50, 73], "setangleparamet": [50, 73], "theta0": [50, 54, 57, 61], "spring": [50, 51, 55, 61, 93], "equilibrium": [50, 51, 55, 61, 73, 74], "abil": [50, 51, 52, 53, 54, 56, 60, 61], "addenergyparameterderiv": [50, 51, 52, 53, 54, 56, 58, 60, 61], "queri": [50, 51, 52, 53, 54, 56, 60, 61, 85, 93, 97], "multipli": [50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 72, 85, 86, 109, 110, 114], "sqrt": [50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 110, 112], "exp": [50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61], "log": [50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61], "sin": [50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61], "co": [50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61], "sec": [50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61], "csc": [50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61], "tan": [50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61], "cot": [50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61], "asin": [50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61], "aco": [50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61], "atan": [50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61], "atan2": [50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61], "sinh": [50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61], "cosh": [50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61], "tanh": [50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61], "erf": [50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61], "erfc": [50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61], "ab": [50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61], "floor": [50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61], "ceil": [50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61], "trigonometr": [50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61], "radian": [50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 73, 89], "logarithm": [50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61], "getnumangl": [50, 73], "getnumperangleparamet": 50, "getnumglobalparamet": [50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 85], "getnumenergyparameterderiv": [50, 51, 52, 53, 54, 56, 60, 61], "getenergyfunct": [50, 51, 52, 53, 54, 55, 57, 59, 60, 61], "setenergyfunct": [50, 51, 52, 53, 54, 55, 57, 59, 60, 61], "getperangleparameternam": 50, "setperangleparameternam": 50, "defaultvalu": [50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 85, 95], "getglobalparameternam": [50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 85], "setglobalparameternam": [50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 85], "getglobalparameterdefaultvalu": [50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 85], "setglobalparameterdefaultvalu": [50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 85], "getenergyparameterderivativenam": [50, 51, 52, 53, 54, 56, 60, 61], "getangleparamet": [50, 73], "nor": [50, 51, 53, 54, 57, 61, 73, 74, 89, 91], "harmonicbondforc": 51, "addperbondparamet": [51, 53, 54], "setbondparamet": [51, 53, 54, 74], "r0": [51, 54, 57], "getnumperbondparamet": [51, 53, 54], "getperbondparameternam": [51, 53, 54], "setperbondparameternam": [51, 53, 54], "getbondparamet": [51, 53, 54, 74], "scalar": [52, 56, 58, 110], "becom": 52, "enorm": 52, "flexibl": [52, 53, 54, 58, 59, 83], "especi": [52, 97], "custom": [52, 56, 58, 99], "addcollectivevari": 52, "getnumcollectivevari": 52, "getcollectivevariablenam": 52, "getcollectivevariablevalu": 52, "getinnercontext": 52, "inner": 52, "cv": 52, "few": 52, "access": [52, 58, 95], "customcompoundbondforc": 53, "varieti": [53, 54, 57, 59], "restraint": [53, 61], "move": [53, 66, 67, 68, 69, 81, 82, 83, 84, 94, 98], "apart": [53, 59], "g1": 53, "g2": 53, "g3": 53, "y2": [53, 54, 55, 59], "z2": [53, 54, 55, 59], "y3": [53, 54, 59], "g4": 53, "addgroup": 53, "particles1": 53, "particles2": 53, "bondgroup": 53, "push_back": 53, "bondparamet": 53, "pointdist": [53, 54, 59], "pointangl": [53, 54, 59], "x3": [53, 54, 59], "z3": [53, 54, 59], "pointdihedr": [53, 54, 59], "x4": [53, 54, 59], "y4": [53, 54, 59], "z4": [53, 54, 59], "enabl": [53, 54, 59, 60, 72, 85], "midpoint": [53, 54, 59, 79], "numgroup": 53, "inter": [53, 54, 57, 59], "getnumgroupsperbond": 53, "getnumgroup": 53, "getnumfunct": [53, 54, 56, 57, 60], "getgroupparamet": 53, "setgroupparamet": 53, "everyth": [53, 54, 56, 57, 59, 60], "wide": [54, 57, 58, 59, 93], "p1": [54, 57, 59], "p2": [54, 57, 59], "p3": [54, 57, 59], "p4": [54, 57, 59], "urei": 54, "bradlei": 54, "kangl": 54, "kbond": 54, "numparticl": 54, "getnumparticlesperbond": 54, "addfunct": [54, 56, 57, 60], "gettabulatedfunctionparamet": [54, 56, 57, 60], "continuous1dfunct": [54, 56, 57, 60], "settabulatedfunctionparamet": [54, 56, 57, 60], "subset": [55, 59, 60, 70, 86, 92], "addperparticleparamet": [55, 56, 59, 60], "attract": 55, "x0": [55, 58], "y0": 55, "z0": 55, "care": [55, 58, 61, 90], "infinit": [55, 58, 85], "repeat": [55, 60], "might": [55, 56, 60, 85, 93, 112], "periodicdist": 55, "rewritten": 55, "getnumperparticleparamet": [55, 56, 59, 60], "getperparticleparameternam": [55, 56, 59, 60], "setperparticleparameternam": [55, 56, 59, 60], "complex": 56, "stage": 56, "design": [56, 84, 94, 98], "born": 56, "_comput": 56, "values_": 56, "_energi": 56, "terms_": 56, "type_": 56, "main": [56, 58, 59, 60, 67], "symmetr": [56, 59, 60, 72], "again": [56, 58, 68, 85, 106], "_must_": [56, 59, 60], "suffici": [56, 93, 102, 103], "complic": 56, "clarifi": 56, "obc": [56, 71], "q": 56, "addcomputedvalu": [56, 60], "sr2": 56, "or1": 56, "l": [56, 59, 80, 86], "scale2": 56, "or2": 56, "radius1": 56, "009": 56, "radius2": 56, "particlepairnoexclus": 56, "85": 56, "singleparticl": 56, "addenergyterm": 56, "28": [56, 78], "3919551": 56, "138": 56, "935456": 56, "q1": 56, "q2": 56, "particlepair": 56, "scale1": 56, "roughli": [56, 69], "speak": 56, "nearbi": [56, 59], "intermedi": [56, 58, 59, 60], "shown": [56, 58], "seen": [56, 59, 60], "getnumexclus": [56, 57, 59, 60], "exclud": [56, 57, 58, 59, 60, 65, 85, 112], "getnumcomputedvalu": [56, 60], "getnumenergyterm": 56, "previou": 56, "getcomputedvalueparamet": [56, 60], "setcomputedvalueparamet": [56, 60], "getenergytermparamet": 56, "setenergytermparamet": 56, "addexclus": [56, 57, 59, 60], "getexclusionparticl": [56, 57, 59, 60], "setexclusionparticl": [56, 57, 59, 60], "d1": 57, "d2": 57, "d3": 57, "addperdonorparamet": 57, "addperacceptorparamet": 57, "adddonor": 57, "addacceptor": 57, "setdonorparamet": 57, "setacceptorparamet": 57, "simpl": [57, 68, 86, 87, 112], "getnumdonor": 57, "getnumacceptor": 57, "getnumperdonorparamet": 57, "getnumperacceptorparamet": 57, "getperdonorparameternam": 57, "setperdonorparameternam": 57, "getperacceptorparameternam": 57, "setperacceptorparameternam": 57, "getdonorparamet": 57, "getacceptorparamet": 57, "stochast": 58, "metropol": 58, "momenta": 58, "persist": 58, "skip": [58, 59], "energy0": 58, "energy1": 58, "energy2": 58, "f0": 58, "f1": 58, "f2": 58, "uniform": 58, "everywher": 58, "varianc": [58, 110], "problem": 58, "opportun": 58, "andersenthermostat": [58, 81, 82, 83, 84], "montecarlobarostat": [58, 81, 83, 94], "rattl": 58, "show": 58, "slow": [58, 60], "004": 58, "lt": [58, 59], "flow": 58, "control": [58, 68, 75, 86, 87, 102, 103], "noth": 58, "loop": [58, 90], "suppos": 58, "mont": [58, 81, 82, 83, 84, 94], "carlo": [58, 81, 82, 83, 84, 94], "xnew": 58, "probabl": [58, 81, 82, 83, 84], "acceptanceprob": 58, "nest": 58, "thought": 58, "product": [58, 59, 60, 85, 88, 110], "angular": 58, "angularmomentum": 58, "here": 58, "langevinmiddleintegr": 58, "kb": 58, "kt": 58, "told": [58, 97], "job": 58, "evolv": 58, "mv": [58, 97], "answer": 58, "delai": 58, "formula": 58, "ago": 58, "v1": 58, "computeperdof": 58, "computesum": 58, "dot": 58, "_x": 58, "_y": 58, "_z": 58, "extract": 58, "wherev": 58, "cost": 59, "rapidli": 59, "exact": 59, "permut": 59, "discuss": 59, "_all_": 59, "axilrod": 59, "teller": 59, "theta1": 59, "theta2": 59, "theta3": 59, "r12": 59, "r13": 59, "r23": 59, "setpermutationmod": 59, "singlepermut": 59, "notic": 59, "label": [59, 60], "did": 59, "clearer": 59, "exchang": 59, "Not": 59, "pattern": 59, "stilling": 59, "weber": 59, "uniquecentralparticl": 59, "_any_": 59, "further": [59, 70], "necessarili": 59, "fundament": 59, "inher": 59, "settypefilt": 59, "gt": 59, "oxygentyp": 59, "hydrogentyp": 59, "triplet": 59, "charge2": 59, "particlesperset": 59, "getnumparticlesperset": 59, "getpermutationmod": 59, "permutationmod": 59, "createexclusionsfrombond": [59, 60], "bondcutoff": [59, 60], "fewer": [59, 60], "gettypefilt": 59, "filter": 59, "sigma1": 60, "sigma2": 60, "epsilon1": 60, "epsilon2": 60, "revers": 60, "sigmaa": 60, "sigmab": 60, "cours": [60, 81], "emb": 60, "thu": 60, "addinteractiongroup": 60, "account": 60, "accident": 60, "unwant": 60, "sharpli": [60, 72, 85], "finit": [60, 72, 85], "setuseswitchingfunct": [60, 72, 85], "setswitchingdist": [60, 72, 75, 85], "decreas": [60, 72, 85], "Of": 60, "incorpor": 60, "simpler": [60, 110], "understand": 60, "accur": [60, 78, 102, 103], "setuselongrangecorrect": 60, "neglig": 60, "precomput": 60, "disabl": [60, 81, 82, 83, 84, 93, 94], "rh": 60, "getnuminteractiongroup": 60, "getuseswitchingfunct": [60, 72, 85], "getswitchingdist": [60, 72, 75, 85], "getuselongrangecorrect": 60, "compens": 60, "set1": 60, "set2": 60, "getinteractiongroupparamet": 60, "setinteractiongroupparamet": 60, "periodictorsionforc": 61, "addpertorsionparamet": 61, "discontinu": 61, "domain": 61, "idiom": 61, "dtheta": 61, "1415926535": 61, "getnumpertorsionparamet": 61, "getpertorsionparameternam": 61, "setpertorsionparameternam": 61, "discret": [62, 63, 64, 78, 99], "round": [62, 63, 64], "nearest": [62, 63, 64, 72], "outsid": [62, 63, 64], "oscil": [65, 86], "distinct": [65, 75], "anisotrop": [65, 72, 84], "coulomb": [65, 75, 85], "addscreenedpair": 65, "getnumscreenedpair": 65, "aniso12": 65, "aniso34": 65, "isotrop": [65, 81, 84], "screenedpair": 65, "getscreenedpairparamet": 65, "setscreenedpairparamet": 65, "encapsul": 66, "drudescfintegr": 66, "getdrudetemperatur": [66, 67, 69], "setdrudetemperatur": [66, 67, 69], "getmaxdrudedist": [66, 67, 68, 69], "hard": [66, 67, 68, 69, 87], "wall": [66, 67, 68, 69, 87], "02": [66, 67, 68, 69], "setmaxdrudedist": [66, 67, 68, 69], "thermostat": [67, 68, 86, 87, 93], "ordinari": [67, 68], "lower": [67, 68], "upper": [67, 68], "stabil": [67, 68, 102, 103], "drudeforc": [67, 68, 69], "drudetemperatur": [67, 68], "drudefrictioncoeff": 67, "getdrudefrict": 67, "setdrudefrict": 67, "computesystemtemperatur": [67, 68], "computedrudetemperatur": [67, 68], "prescrib": [67, 68], "nose": [68, 86, 87], "hoover": [68, 86, 87], "drudecollisionfrequ": 68, "chainlength": [68, 86, 87], "nummt": [68, 86, 87], "numyoshidasuzuki": [68, 86, 87], "bead": [68, 87], "propag": [68, 86, 87], "yoshida": [68, 86, 87], "suzuki": [68, 86, 87], "decomposit": [68, 86, 87], "chanc": [68, 90], "computedrudekineticenergi": 68, "computetotalkineticenergi": 68, "real": [68, 110, 112], "addsubsystemthermostat": [68, 87], "thermostatedparticl": [68, 87], "thermostatedpair": [68, 86, 87], "relativetemperatur": [68, 86, 87], "relativecollisionfrequ": [68, 86, 87], "thermost": [68, 86, 87], "member": [68, 87, 110], "addition": [68, 87], "addthermostat": [68, 87], "computeheatbathenergi": [68, 87], "getcollisionfrequ": [68, 86, 87], "chainid": [68, 86, 87], "getmaximumpairdist": [68, 87], "strai": [68, 87], "intra": [68, 87], "getnumthermostat": [68, 87], "getrelativecollisionfrequ": [68, 86, 87], "getrelativetemperatur": [68, 86, 87], "getthermostat": [68, 87], "nosehooverchain": [68, 87], "hassubsystemthermostat": [68, 87], "setcollisionfrequ": [68, 86, 87], "setmaximumpairdist": [68, 87], "setrelativecollisionfrequ": [68, 86, 87], "setrelativetemperatur": [68, 86, 87], "leap": [69, 103, 104], "frog": [69, 103, 104], "scf": 69, "getminimizationerrortoler": 69, "magnitud": [69, 75, 90], "mol": [69, 71, 72, 73, 74, 85, 86, 91], "setminimizationerrortoler": 69, "abstract": [70, 76, 96, 99, 105], "subclass": [70, 76, 95, 96, 99, 105], "organ": [70, 95], "split": 70, "openmmexcept": [70, 98], "gbsa": 71, "setreactionfielddielectr": [71, 85], "off": [71, 112], "reaction": [71, 85], "getsurfaceareaenergi": 71, "setsurfaceareaenergi": 71, "gai": 72, "bern": 72, "ellipsoid": 72, "sx": 72, "sy": 72, "sz": 72, "ex": 72, "ei": 72, "ez": 72, "think": [72, 102, 103], "axial": 72, "lorentz": [72, 85], "berthelot": [72, 85], "getnumexcept": [72, 75, 85], "xparticl": 72, "yparticl": 72, "depth": [72, 85], "addexcept": [72, 75, 85], "getexceptionparamet": [72, 75, 85], "setexceptionparamet": [72, 75, 85], "ellips": 72, "stretch": 74, "hippo": 75, "induct": 75, "repuls": 75, "conceptu": 75, "pauli": 75, "getdpmeparamet": 75, "setdpmeparamet": 75, "getdpmeparametersincontext": 75, "corecharg": 75, "c6": 75, "paulik": 75, "pauliq": 75, "paulialpha": 75, "core": [75, 115], "electron": 75, "multipolemultipolescal": 75, "dipolemultipolescal": 75, "dipoledipolescal": 75, "dispersionscal": 75, "repulsionscal": 75, "chargetransferscal": 75, "lfmiddl": 78, "123": [78, 87], "6056": [78, 87], "6079": [78, 87], "tend": [78, 84], "soc": 78, "472": 78, "20160138": 78, "former": 78, "thermal": 78, "ensembl": 78, "virtualsit": [79, 88, 98, 100, 101], "sub": [79, 88], "xdir": 79, "ydir": 79, "toward": 79, "zdir": 79, "originweight": 79, "xweight": 79, "yweight": 79, "localposit": 79, "getoriginweight": 79, "getxweight": 79, "getyweight": 79, "getlocalposit": 79, "getparticl": [79, 88, 92, 100, 101, 105], "search": [80, 90], "bfg": 80, "restrain": [80, 92], "steadili": 80, "exit": 80, "entir": [81, 83], "regul": [81, 82, 83, 84], "mechan": [81, 82, 83, 84, 93], "defaultpressur": [81, 82, 83, 84, 94], "scalex": 81, "scalei": 81, "scalez": 81, "bar": [81, 82, 83, 84, 90, 94], "pressurex": 81, "pressurei": 81, "pressurez": 81, "getdefaultpressur": [81, 82, 83, 84, 94], "setdefaultpressur": [81, 82, 83, 84, 94], "getscalex": 81, "getscalei": 81, "getscalez": 81, "barostat": [81, 82, 83, 84, 94], "bulk": 83, "materi": 83, "crystal": 83, "phase": [83, 89], "centroid": [83, 93], "setscalemoleculesasrigid": 83, "scalemoleculesasrigid": 83, "getscalemoleculesasrigid": 83, "criterion": 84, "tension": 84, "opposit": [84, 85], "sens": [84, 85], "proport": 84, "held": 84, "defaultsurfacetens": 84, "xymod": 84, "zmode": 84, "surfacetens": 84, "getdefaultsurfacetens": 84, "setdefaultsurfacetens": 84, "getxymod": 84, "setxymod": 84, "getzmod": 84, "setzmod": 84, "conveni": [85, 95, 112], "createexceptionsfrombond": 85, "titrat": 85, "addparticleparameteroffset": 85, "chargescal": 85, "sigmascal": 85, "epsilonscal": 85, "basecharg": 85, "basesigma": 85, "baseepsilon": 85, "oaram": 85, "addexceptionparameteroffset": 85, "getnumparticleparameteroffset": 85, "getnumexceptionparameteroffset": 85, "getreactionfielddielectr": 85, "someth": 85, "getljpmeparamet": 85, "lj": 85, "setljpmeparamet": 85, "getljpmeparametersincontext": 85, "chargeprod": 85, "coulomb14scal": 85, "lj14scale": 85, "Its": 85, "getparticleparameteroffset": 85, "setparticleparameteroffset": 85, "exceptionindex": 85, "chargeprodscal": 85, "getexceptionparameteroffset": 85, "setexceptionparameteroffset": 85, "getreciprocalspaceforcegroup": 85, "getincludedirectspac": 85, "customnonbondedforc": 85, "nonstandard": 85, "setincludedirectspac": 85, "getexceptionsuseperiodicboundarycondit": 85, "setexceptionsuseperiodicboundarycondit": 85, "addparticle_usingrvdw": 85, "rvdw": 85, "elemetrari": 85, "usag": 85, "rmin": 85, "addexception_usingrmin": 85, "elementari": 85, "approach": 86, "martyna": 86, "tobia": 86, "klein": 86, "87": 86, "1117": 86, "1996": 86, "timestep": 86, "mt": 86, "nhc": 86, "elabor": 86, "tether": 86, "numdof": 86, "thermostatedatom": 86, "distinguish": 86, "getnumdegreesoffreedom": 86, "setnumdegreesoffreedom": 86, "getchainlength": 86, "getnummultitimestep": 86, "getnumyoshidasuzukitimestep": 86, "getchainid": 86, "getthermostatedatom": 86, "vectori": [86, 92], "setthermostatedatom": 86, "atomid": 86, "getthermostatedpair": 86, "vectorpairii": 86, "setthermostatedpair": 86, "pairid": 86, "getyoshidasuzukiweight": 86, "dimensionless": [86, 110, 112], "middl": 87, "13": 88, "weight12": 88, "weight13": 88, "weightcross": 88, "getweight12": 88, "getweight13": 88, "getweightcross": 88, "kernel": 90, "registri": [90, 96], "kernelfactori": 90, "findplatform": 90, "kernelnam": 90, "plan": 90, "fastest": 90, "createkernel": 90, "registerplatform": 90, "getnumplatform": 90, "getpluginloadfailur": 90, "vectorstr": 90, "loadpluginsfromdirectori": 90, "getplatformbynam": 90, "loadpluginlibrari": 90, "dll": 90, "plugin": 90, "runtim": 90, "qualifi": 90, "join": 90, "unix": 90, "window": 90, "foo": 90, "occur": 90, "delimin": 90, "getdefaultpluginsdirectori": 90, "openmm_plugin_dir": 90, "getopenmmvers": 90, "getspe": 90, "unoptim": 90, "faster": [90, 106], "supportsdoubleprecis": 90, "simplist": 90, "offer": 90, "getpropertynam": 90, "getpropertyvalu": 90, "setpropertyvalu": 90, "getpropertydefaultvalu": 90, "setpropertydefaultvalu": 90, "linkedcontextcr": 90, "originalcontext": 90, "contextimpl": 90, "createlinkedcontext": 90, "link": [90, 93], "supportskernel": 90, "interest": 90, "accord": 91, "ryckaert": 91, "belleman": 91, "c0": 91, "c1": 91, "c2": 91, "c3": 91, "c4": 91, "c5": 91, "1st": 91, "2nd": 91, "3rd": 91, "4th": 91, "5th": 91, "rmsd": 92, "intend": 92, "align": 92, "referenceposit": 92, "getreferenceposit": 92, "alloc": [92, 95], "setreferenceposit": 92, "setparticl": 92, "ring": [93, 94], "rpmd": 93, "quantum": 93, "pile": 93, "setapplythermostat": 93, "similarli": [93, 95], "contract": 93, "accuraci": [93, 102, 103], "numcopi": 93, "getnumcopi": 93, "getapplythermostat": 93, "getcontract": 93, "mapii": 93, "gettotalenergi": [93, 94], "rpmdintegr": 94, "trial": 94, "reject": 94, "deseri": [95, 96, 106], "serializationproxi": 95, "reconstruct": [95, 96, 106], "arrang": 95, "tree": 95, "proxi": [95, 96], "child": [95, 96], "node": [95, 96], "getstringproperti": 95, "setstringproperti": 95, "getintproperti": 95, "getchildren": 95, "getchildnod": 95, "getproperti": 95, "mapstringstr": 95, "hasproperti": 95, "setintproperti": 95, "getlongproperti": 95, "setlongproperti": 95, "getboolproperti": 95, "setboolproperti": 95, "getdoubleproperti": 95, "setdoubleproperti": 95, "createchildnod": 95, "registerproxi": 96, "startup": 96, "type_info": 96, "getproxi": 96, "typenam": 96, "gettypenam": 96, "manipul": [96, 115], "serializationnod": [96, 106], "indirectli": 96, "memori": [97, 98, 106], "stl": 97, "getkineticenergi": 97, "getpotentialenergi": 97, "getperiodicboxvolum": 97, "getenergyparameterderiv": 97, "getdatatyp": 97, "datatyp": 97, "__copy__": [97, 98, 110], "extend": 98, "addconstraint": 98, "addforc": 98, "setvirtualsit": [98, 105], "getparticlemass": 98, "setparticlemass": 98, "isvirtualsit": 98, "getvirtualsit": 98, "getnumconstraint": 98, "getconstraintparamet": 98, "setconstraintparamet": 98, "removeconstraint": 98, "getnumforc": 98, "writabl": 98, "removeforc": 98, "getdefaultperiodicboxvector": 98, "setdefaultperiodicboxvector": 98, "concret": 99, "weight1": [100, 101], "weight2": [100, 101], "weight3": 100, "getweight": [100, 101], "compar": [102, 103, 111, 112], "explicit": [102, 103], "euler": [102, 103], "good": [102, 103], "excess": [102, 103], "right": [102, 103, 110], "errortol": [102, 103], "geterrortoler": [102, 103], "seterrortoler": [102, 103], "getmaximumsteps": [102, 103], "setmaximumsteps": [102, 103], "stepto": [102, 103], "symplect": 103, "conserv": 103, "serializesystem": 106, "deserializesystem": 106, "inputstr": 106, "clone": 106, "__lt__": [107, 108, 111, 112], "hash": [107, 112], "__hash__": [107, 112], "base_dim": 108, "basedimens": [108, 111, 112], "meter_base_unit": 108, "kilogram": [108, 112], "kg": [108, 112], "iter_base_dimens": [108, 111, 112], "expon": [108, 110, 111, 112], "get_dimension_tupl": [108, 111], "__str__": [108, 110, 111, 112, 113], "define_conversion_factor_to": 108, "previous": 108, "conversion_factor_to": [108, 112], "matter": 108, "lookuperror": 108, "yield": [109, 112], "millimet": 109, "milli": 109, "meter": [109, 110, 112], "__mul__": [109, 110, 114], "baseunit": [109, 111, 112], "scaledunit": [109, 112], "shallow": 110, "underli": [110, 112], "__deepcopy__": 110, "memo": 110, "deep": 110, "__getattr__": 110, "deleg": 110, "printabl": 110, "abbrevi": 110, "__repr__": [110, 111, 112], "__add__": [110, 114], "__sub__": [110, 114], "reduce_unit": 110, "guide_unit": 110, "__rmul__": [110, 114], "__truediv__": [110, 112, 114], "__div__": [110, 112, 114], "__rtruediv__": 110, "__rdiv__": 110, "__pow__": [110, 112], "arithmeticerror": [110, 112], "life": [110, 112], "me": [110, 112], "reshap": 110, "ndarrai": 110, "plain": 110, "__abs__": 110, "__pos__": 110, "__neg__": 110, "negat": 110, "sign": 110, "__nonzero__": 110, "value_in_unit": 110, "value_in_unit_system": 110, "in_unit_system": [110, 112], "in_units_of": 110, "other_unit": 110, "post_multipli": 110, "commut": 110, "__len__": 110, "__getitem__": 110, "master": 111, "base_or_scaled_unit": 112, "amper": 112, "create_unit": 112, "compris": 112, "iter_all_base_unit": 112, "iter_top_base_unit": 112, "get_conversion_factor_to_base_unit": 112, "scaleunit": 112, "composit": 112, "AND": 112, "human": 112, "readabl": 112, "compos": 112, "is_compat": 112, "is_dimensionless": 112, "strict": 112, "strip": 112, "leav": 112, "get_symbol": 112, "get_nam": 112, "secon": 112, "express_unit": 113, "old_unit": 113, "math": 114, "__new__": 114, "__getnewargs__": 114, "pickl": 114, "protocol": 114, "doc": 114, "python": 114, "html": 114, "unpickl": 114, "__radd__": 114, "__rsub__": 114, "occurr": 114, "9223372036854775807": 114, "alia": 114, "develop": 115, "layer": 115, "interfac": 115, "biologist": 115, "peopl": 115, "who": 115, "programm": 115, "guid": 115, "loader": 115, "setup": 115}, "objects": {"openmm": [[1, 0, 1, "", "OpenMMException"]], "openmm.OpenMMException": [[1, 1, 1, "", "__init__"], [1, 1, 1, "", "add_note"], [1, 1, 1, "", "with_traceback"]], "openmm.amd": [[2, 0, 1, "", "AMDForceGroupIntegrator"], [3, 0, 1, "", "AMDIntegrator"], [4, 0, 1, "", "DualAMDIntegrator"]], "openmm.amd.AMDForceGroupIntegrator": [[2, 1, 1, "", "__init__"], [2, 1, 1, "", "addComputeGlobal"], [2, 1, 1, "", "addComputePerDof"], [2, 1, 1, "", "addComputeSum"], [2, 1, 1, "", "addConstrainPositions"], [2, 1, 1, "", "addConstrainVelocities"], [2, 1, 1, "", "addGlobalVariable"], [2, 1, 1, "", "addPerDofVariable"], [2, 1, 1, "", "addTabulatedFunction"], [2, 1, 1, "", "addUpdateContextState"], [2, 1, 1, "", "beginIfBlock"], [2, 1, 1, "", "beginWhileBlock"], [2, 1, 1, "", "endBlock"], [2, 1, 1, "", "getAlphaGroup"], [2, 1, 1, "", "getComputationStep"], [2, 1, 1, "", "getConstraintTolerance"], [2, 1, 1, "", "getEGroup"], [2, 1, 1, "", "getEffectiveEnergy"], [2, 1, 1, "", "getGlobalVariable"], [2, 1, 1, "", "getGlobalVariableByName"], [2, 1, 1, "", "getGlobalVariableName"], [2, 1, 1, "", "getIntegrationForceGroups"], [2, 1, 1, "", "getKineticEnergyExpression"], [2, 1, 1, "", "getNumComputations"], [2, 1, 1, "", "getNumGlobalVariables"], [2, 1, 1, "", "getNumPerDofVariables"], [2, 1, 1, "", "getNumTabulatedFunctions"], [2, 1, 1, "", "getPerDofVariable"], [2, 1, 1, "", "getPerDofVariableByName"], [2, 1, 1, "", "getPerDofVariableName"], [2, 1, 1, "", "getRandomNumberSeed"], [2, 1, 1, "", "getStepSize"], [2, 1, 1, "", "getTabulatedFunction"], [2, 1, 1, "", "getTabulatedFunctionName"], [2, 1, 1, "", "setAlphaGroup"], [2, 1, 1, "", "setConstraintTolerance"], [2, 1, 1, "", "setEGroup"], [2, 1, 1, "", "setGlobalVariable"], [2, 1, 1, "", "setGlobalVariableByName"], [2, 1, 1, "", "setIntegrationForceGroups"], [2, 1, 1, "", "setKineticEnergyExpression"], [2, 1, 1, "", "setPerDofVariable"], [2, 1, 1, "", "setPerDofVariableByName"], [2, 1, 1, "", "setRandomNumberSeed"], [2, 1, 1, "", "setStepSize"], [2, 1, 1, "", "step"], [2, 2, 1, "", "thisown"]], "openmm.amd.AMDIntegrator": [[3, 1, 1, "", "__init__"], [3, 1, 1, "", "addComputeGlobal"], [3, 1, 1, "", "addComputePerDof"], [3, 1, 1, "", "addComputeSum"], [3, 1, 1, "", "addConstrainPositions"], [3, 1, 1, "", "addConstrainVelocities"], [3, 1, 1, "", "addGlobalVariable"], [3, 1, 1, "", "addPerDofVariable"], [3, 1, 1, "", "addTabulatedFunction"], [3, 1, 1, "", "addUpdateContextState"], [3, 1, 1, "", "beginIfBlock"], [3, 1, 1, "", "beginWhileBlock"], [3, 1, 1, "", "endBlock"], [3, 1, 1, "", "getAlpha"], [3, 1, 1, "", "getComputationStep"], [3, 1, 1, "", "getConstraintTolerance"], [3, 1, 1, "", "getE"], [3, 1, 1, "", "getEffectiveEnergy"], [3, 1, 1, "", "getGlobalVariable"], [3, 1, 1, "", "getGlobalVariableByName"], [3, 1, 1, "", "getGlobalVariableName"], [3, 1, 1, "", "getIntegrationForceGroups"], [3, 1, 1, "", "getKineticEnergyExpression"], [3, 1, 1, "", "getNumComputations"], [3, 1, 1, "", "getNumGlobalVariables"], [3, 1, 1, "", "getNumPerDofVariables"], [3, 1, 1, "", "getNumTabulatedFunctions"], [3, 1, 1, "", "getPerDofVariable"], [3, 1, 1, "", "getPerDofVariableByName"], [3, 1, 1, "", "getPerDofVariableName"], [3, 1, 1, "", "getRandomNumberSeed"], [3, 1, 1, "", "getStepSize"], [3, 1, 1, "", "getTabulatedFunction"], [3, 1, 1, "", "getTabulatedFunctionName"], [3, 1, 1, "", "setAlpha"], [3, 1, 1, "", "setConstraintTolerance"], [3, 1, 1, "", "setE"], [3, 1, 1, "", "setGlobalVariable"], [3, 1, 1, "", "setGlobalVariableByName"], [3, 1, 1, "", "setIntegrationForceGroups"], [3, 1, 1, "", "setKineticEnergyExpression"], [3, 1, 1, "", "setPerDofVariable"], [3, 1, 1, "", "setPerDofVariableByName"], [3, 1, 1, "", "setRandomNumberSeed"], [3, 1, 1, "", "setStepSize"], [3, 1, 1, "", "step"], [3, 2, 1, "", "thisown"]], "openmm.amd.DualAMDIntegrator": [[4, 1, 1, "", "__init__"], [4, 1, 1, "", "addComputeGlobal"], [4, 1, 1, "", "addComputePerDof"], [4, 1, 1, "", "addComputeSum"], [4, 1, 1, "", "addConstrainPositions"], [4, 1, 1, "", "addConstrainVelocities"], [4, 1, 1, "", "addGlobalVariable"], [4, 1, 1, "", "addPerDofVariable"], [4, 1, 1, "", "addTabulatedFunction"], [4, 1, 1, "", "addUpdateContextState"], [4, 1, 1, "", "beginIfBlock"], [4, 1, 1, "", "beginWhileBlock"], [4, 1, 1, "", "endBlock"], [4, 1, 1, "", "getAlphaGroup"], [4, 1, 1, "", "getAlphaTotal"], [4, 1, 1, "", "getComputationStep"], [4, 1, 1, "", "getConstraintTolerance"], [4, 1, 1, "", "getEGroup"], [4, 1, 1, "", "getETotal"], [4, 1, 1, "", "getEffectiveEnergy"], [4, 1, 1, "", "getGlobalVariable"], [4, 1, 1, "", "getGlobalVariableByName"], [4, 1, 1, "", "getGlobalVariableName"], [4, 1, 1, "", "getIntegrationForceGroups"], [4, 1, 1, "", "getKineticEnergyExpression"], [4, 1, 1, "", "getNumComputations"], [4, 1, 1, "", "getNumGlobalVariables"], [4, 1, 1, "", "getNumPerDofVariables"], [4, 1, 1, "", "getNumTabulatedFunctions"], [4, 1, 1, "", "getPerDofVariable"], [4, 1, 1, "", "getPerDofVariableByName"], [4, 1, 1, "", "getPerDofVariableName"], [4, 1, 1, "", "getRandomNumberSeed"], [4, 1, 1, "", "getStepSize"], [4, 1, 1, "", "getTabulatedFunction"], [4, 1, 1, "", "getTabulatedFunctionName"], [4, 1, 1, "", "setAlphaGroup"], [4, 1, 1, "", "setAlphaTotal"], [4, 1, 1, "", "setConstraintTolerance"], [4, 1, 1, "", "setEGroup"], [4, 1, 1, "", "setETotal"], [4, 1, 1, "", "setGlobalVariable"], [4, 1, 1, "", "setGlobalVariableByName"], [4, 1, 1, "", "setIntegrationForceGroups"], [4, 1, 1, "", "setKineticEnergyExpression"], [4, 1, 1, "", "setPerDofVariable"], [4, 1, 1, "", "setPerDofVariableByName"], [4, 1, 1, "", "setRandomNumberSeed"], [4, 1, 1, "", "setStepSize"], [4, 1, 1, "", "step"], [4, 2, 1, "", "thisown"]], "openmm.app.amberinpcrdfile": [[5, 0, 1, "", "AmberInpcrdFile"]], "openmm.app.amberinpcrdfile.AmberInpcrdFile": [[5, 1, 1, "", "__init__"], [5, 1, 1, "", "getBoxVectors"], [5, 1, 1, "", "getPositions"], [5, 1, 1, "", "getVelocities"]], "openmm.app.amberprmtopfile": [[6, 0, 1, "", "AmberPrmtopFile"]], "openmm.app.amberprmtopfile.AmberPrmtopFile": [[6, 1, 1, "", "__init__"], [6, 1, 1, "", "createSystem"]], "openmm.app.charmmcrdfiles": [[7, 0, 1, "", "CharmmCrdFile"], [8, 0, 1, "", "CharmmRstFile"]], "openmm.app.charmmcrdfiles.CharmmCrdFile": [[7, 1, 1, "", "__init__"], [7, 3, 1, "", "natom"], [7, 3, 1, "", "positions"], [7, 3, 1, "", "resname"]], "openmm.app.charmmcrdfiles.CharmmRstFile": [[8, 1, 1, "", "__init__"], [8, 3, 1, "", "natom"], [8, 3, 1, "", "positions"], [8, 3, 1, "", "positionsold"], [8, 3, 1, "", "resname"], [8, 3, 1, "", "velocities"]], "openmm.app.charmmparameterset": [[9, 0, 1, "", "CharmmParameterSet"]], "openmm.app.charmmparameterset.CharmmParameterSet": [[9, 1, 1, "", "__init__"], [9, 1, 1, "", "condense"], [9, 3, 1, "", "helpful"], [9, 1, 1, "", "loadSet"], [9, 1, 1, "", "readParameterFile"], [9, 1, 1, "", "readStreamFile"], [9, 1, 1, "", "readTopologyFile"]], "openmm.app.charmmpsffile": [[10, 0, 1, "", "CharmmPsfFile"]], "openmm.app.charmmpsffile.CharmmPsfFile": [[10, 1, 1, "", "__init__"], [10, 2, 1, "", "boxLengths"], [10, 2, 1, "", "boxVectors"], [10, 1, 1, "", "createSystem"], [10, 1, 1, "", "deleteCmap"], [10, 1, 1, "", "loadParameters"], [10, 1, 1, "", "setBox"], [10, 2, 1, "", "system"], [10, 2, 1, "", "topology"]], "openmm.app.checkpointreporter": [[11, 0, 1, "", "CheckpointReporter"]], "openmm.app.checkpointreporter.CheckpointReporter": [[11, 1, 1, "", "__init__"], [11, 1, 1, "", "describeNextReport"], [11, 1, 1, "", "report"]], "openmm.app.dcdfile": [[12, 0, 1, "", "DCDFile"]], "openmm.app.dcdfile.DCDFile": [[12, 1, 1, "", "__init__"], [12, 1, 1, "", "writeModel"]], "openmm.app.dcdreporter": [[13, 0, 1, "", "DCDReporter"]], "openmm.app.dcdreporter.DCDReporter": [[13, 1, 1, "", "__init__"], [13, 1, 1, "", "describeNextReport"], [13, 1, 1, "", "report"]], "openmm.app.desmonddmsfile": [[14, 0, 1, "", "DesmondDMSFile"]], "openmm.app.desmonddmsfile.DesmondDMSFile": [[14, 1, 1, "", "__init__"], [14, 1, 1, "", "close"], [14, 1, 1, "", "createSystem"], [14, 1, 1, "", "getPositions"], [14, 1, 1, "", "getProvenance"], [14, 1, 1, "", "getTopology"], [14, 1, 1, "", "getVelocities"], [14, 1, 1, "", "setPositions"], [14, 1, 1, "", "setVelocities"]], "openmm.app.element": [[15, 0, 1, "", "Element"]], "openmm.app.element.Element": [[15, 1, 1, "", "__init__"], [15, 1, 1, "", "getByMass"], [15, 1, 1, "", "getBySymbol"]], "openmm.app.forcefield": [[16, 0, 1, "", "ForceField"]], "openmm.app.forcefield.ForceField": [[16, 1, 1, "", "__init__"], [16, 1, 1, "", "createSystem"], [16, 1, 1, "", "generateTemplatesForUnmatchedResidues"], [16, 1, 1, "", "getGenerators"], [16, 1, 1, "", "getMatchingTemplates"], [16, 1, 1, "", "getUnmatchedResidues"], [16, 1, 1, "", "loadFile"], [16, 1, 1, "", "registerAtomType"], [16, 1, 1, "", "registerGenerator"], [16, 1, 1, "", "registerPatch"], [16, 1, 1, "", "registerResidueTemplate"], [16, 1, 1, "", "registerScript"], [16, 1, 1, "", "registerTemplateGenerator"], [16, 1, 1, "", "registerTemplateMatcher"], [16, 1, 1, "", "registerTemplatePatch"]], "openmm.app.gromacsgrofile": [[17, 0, 1, "", "GromacsGroFile"]], "openmm.app.gromacsgrofile.GromacsGroFile": [[17, 1, 1, "", "__init__"], [17, 1, 1, "", "getNumFrames"], [17, 1, 1, "", "getPeriodicBoxVectors"], [17, 1, 1, "", "getPositions"], [17, 1, 1, "", "getUnitCellDimensions"]], "openmm.app.gromacstopfile": [[18, 0, 1, "", "GromacsTopFile"]], "openmm.app.gromacstopfile.GromacsTopFile": [[18, 1, 1, "", "__init__"], [18, 1, 1, "", "createSystem"]], "openmm.app.internal.charmm.exceptions": [[19, 0, 1, "", "CharmmPSFWarning"]], "openmm.app.internal.charmm.exceptions.CharmmPSFWarning": [[19, 1, 1, "", "__init__"], [19, 1, 1, "", "add_note"], [19, 1, 1, "", "with_traceback"]], "openmm.app.metadynamics": [[20, 0, 1, "", "BiasVariable"], [21, 0, 1, "", "Metadynamics"]], "openmm.app.metadynamics.BiasVariable": [[20, 1, 1, "", "__init__"]], "openmm.app.metadynamics.Metadynamics": [[21, 1, 1, "", "__init__"], [21, 1, 1, "", "getCollectiveVariables"], [21, 1, 1, "", "getFreeEnergy"], [21, 1, 1, "", "step"]], "openmm.app.modeller": [[22, 0, 1, "", "Modeller"]], "openmm.app.modeller.Modeller": [[22, 1, 1, "", "__init__"], [22, 1, 1, "", "add"], [22, 1, 1, "", "addExtraParticles"], [22, 1, 1, "", "addHydrogens"], [22, 1, 1, "", "addMembrane"], [22, 1, 1, "", "addSolvent"], [22, 1, 1, "", "convertWater"], [22, 1, 1, "", "delete"], [22, 1, 1, "", "deleteWater"], [22, 1, 1, "", "getPositions"], [22, 1, 1, "", "getTopology"], [22, 1, 1, "", "loadHydrogenDefinitions"]], "openmm.app.pdbfile": [[23, 0, 1, "", "PDBFile"]], "openmm.app.pdbfile.PDBFile": [[23, 1, 1, "", "__init__"], [23, 1, 1, "", "getNumFrames"], [23, 1, 1, "", "getPositions"], [23, 1, 1, "", "getTopology"], [23, 1, 1, "", "writeFile"], [23, 1, 1, "", "writeFooter"], [23, 1, 1, "", "writeHeader"], [23, 1, 1, "", "writeModel"]], "openmm.app.pdbreporter": [[24, 0, 1, "", "PDBReporter"], [25, 0, 1, "", "PDBxReporter"]], "openmm.app.pdbreporter.PDBReporter": [[24, 1, 1, "", "__init__"], [24, 1, 1, "", "describeNextReport"], [24, 1, 1, "", "report"]], "openmm.app.pdbreporter.PDBxReporter": [[25, 1, 1, "", "__init__"], [25, 1, 1, "", "describeNextReport"], [25, 1, 1, "", "report"]], "openmm.app.pdbxfile": [[26, 0, 1, "", "PDBxFile"]], "openmm.app.pdbxfile.PDBxFile": [[26, 1, 1, "", "__init__"], [26, 1, 1, "", "getNumFrames"], [26, 1, 1, "", "getPositions"], [26, 1, 1, "", "getTopology"], [26, 1, 1, "", "writeFile"], [26, 1, 1, "", "writeHeader"], [26, 1, 1, "", "writeModel"]], "openmm.app.simulatedtempering": [[27, 0, 1, "", "SimulatedTempering"]], "openmm.app.simulatedtempering.SimulatedTempering": [[27, 1, 1, "", "__init__"], [27, 1, 1, "", "step"]], "openmm.app.simulation": [[28, 0, 1, "", "Simulation"]], "openmm.app.simulation.Simulation": [[28, 1, 1, "", "__init__"], [28, 2, 1, "", "currentStep"], [28, 1, 1, "", "loadCheckpoint"], [28, 1, 1, "", "loadState"], [28, 1, 1, "", "minimizeEnergy"], [28, 1, 1, "", "runForClockTime"], [28, 1, 1, "", "saveCheckpoint"], [28, 1, 1, "", "saveState"], [28, 1, 1, "", "step"]], "openmm.app.statedatareporter": [[29, 0, 1, "", "StateDataReporter"]], "openmm.app.statedatareporter.StateDataReporter": [[29, 1, 1, "", "__init__"], [29, 1, 1, "", "describeNextReport"], [29, 1, 1, "", "report"]], "openmm.app.topology": [[30, 0, 1, "", "Atom"], [31, 0, 1, "", "Chain"], [32, 0, 1, "", "Residue"], [33, 0, 1, "", "Topology"]], "openmm.app.topology.Atom": [[30, 1, 1, "", "__init__"]], "openmm.app.topology.Chain": [[31, 1, 1, "", "__init__"], [31, 1, 1, "", "atoms"], [31, 1, 1, "", "residues"]], "openmm.app.topology.Residue": [[32, 1, 1, "", "__init__"], [32, 1, 1, "", "atoms"], [32, 1, 1, "", "bonds"], [32, 1, 1, "", "external_bonds"], [32, 1, 1, "", "internal_bonds"]], "openmm.app.topology.Topology": [[33, 1, 1, "", "__init__"], [33, 1, 1, "", "addAtom"], [33, 1, 1, "", "addBond"], [33, 1, 1, "", "addChain"], [33, 1, 1, "", "addResidue"], [33, 1, 1, "", "atoms"], [33, 1, 1, "", "bonds"], [33, 1, 1, "", "chains"], [33, 1, 1, "", "createDisulfideBonds"], [33, 1, 1, "", "createStandardBonds"], [33, 1, 1, "", "getNumAtoms"], [33, 1, 1, "", "getNumBonds"], [33, 1, 1, "", "getNumChains"], [33, 1, 1, "", "getNumResidues"], [33, 1, 1, "", "getPeriodicBoxVectors"], [33, 1, 1, "", "getUnitCellDimensions"], [33, 1, 1, "", "loadBondDefinitions"], [33, 1, 1, "", "residues"], [33, 1, 1, "", "setPeriodicBoxVectors"], [33, 1, 1, "", "setUnitCellDimensions"]], "openmm.mtsintegrator": [[34, 0, 1, "", "MTSIntegrator"], [35, 0, 1, "", "MTSLangevinIntegrator"]], "openmm.mtsintegrator.MTSIntegrator": [[34, 1, 1, "", "__init__"], [34, 1, 1, "", "addComputeGlobal"], [34, 1, 1, "", "addComputePerDof"], [34, 1, 1, "", "addComputeSum"], [34, 1, 1, "", "addConstrainPositions"], [34, 1, 1, "", "addConstrainVelocities"], [34, 1, 1, "", "addGlobalVariable"], [34, 1, 1, "", "addPerDofVariable"], [34, 1, 1, "", "addTabulatedFunction"], [34, 1, 1, "", "addUpdateContextState"], [34, 1, 1, "", "beginIfBlock"], [34, 1, 1, "", "beginWhileBlock"], [34, 1, 1, "", "endBlock"], [34, 1, 1, "", "getComputationStep"], [34, 1, 1, "", "getConstraintTolerance"], [34, 1, 1, "", "getGlobalVariable"], [34, 1, 1, "", "getGlobalVariableByName"], [34, 1, 1, "", "getGlobalVariableName"], [34, 1, 1, "", "getIntegrationForceGroups"], [34, 1, 1, "", "getKineticEnergyExpression"], [34, 1, 1, "", "getNumComputations"], [34, 1, 1, "", "getNumGlobalVariables"], [34, 1, 1, "", "getNumPerDofVariables"], [34, 1, 1, "", "getNumTabulatedFunctions"], [34, 1, 1, "", "getPerDofVariable"], [34, 1, 1, "", "getPerDofVariableByName"], [34, 1, 1, "", "getPerDofVariableName"], [34, 1, 1, "", "getRandomNumberSeed"], [34, 1, 1, "", "getStepSize"], [34, 1, 1, "", "getTabulatedFunction"], [34, 1, 1, "", "getTabulatedFunctionName"], [34, 1, 1, "", "setConstraintTolerance"], [34, 1, 1, "", "setGlobalVariable"], [34, 1, 1, "", "setGlobalVariableByName"], [34, 1, 1, "", "setIntegrationForceGroups"], [34, 1, 1, "", "setKineticEnergyExpression"], [34, 1, 1, "", "setPerDofVariable"], [34, 1, 1, "", "setPerDofVariableByName"], [34, 1, 1, "", "setRandomNumberSeed"], [34, 1, 1, "", "setStepSize"], [34, 1, 1, "", "step"], [34, 2, 1, "", "thisown"]], "openmm.mtsintegrator.MTSLangevinIntegrator": [[35, 1, 1, "", "__init__"], [35, 1, 1, "", "addComputeGlobal"], [35, 1, 1, "", "addComputePerDof"], [35, 1, 1, "", "addComputeSum"], [35, 1, 1, "", "addConstrainPositions"], [35, 1, 1, "", "addConstrainVelocities"], [35, 1, 1, "", "addGlobalVariable"], [35, 1, 1, "", "addPerDofVariable"], [35, 1, 1, "", "addTabulatedFunction"], [35, 1, 1, "", "addUpdateContextState"], [35, 1, 1, "", "beginIfBlock"], [35, 1, 1, "", "beginWhileBlock"], [35, 1, 1, "", "endBlock"], [35, 1, 1, "", "getComputationStep"], [35, 1, 1, "", "getConstraintTolerance"], [35, 1, 1, "", "getGlobalVariable"], [35, 1, 1, "", "getGlobalVariableByName"], [35, 1, 1, "", "getGlobalVariableName"], [35, 1, 1, "", "getIntegrationForceGroups"], [35, 1, 1, "", "getKineticEnergyExpression"], [35, 1, 1, "", "getNumComputations"], [35, 1, 1, "", "getNumGlobalVariables"], [35, 1, 1, "", "getNumPerDofVariables"], [35, 1, 1, "", "getNumTabulatedFunctions"], [35, 1, 1, "", "getPerDofVariable"], [35, 1, 1, "", "getPerDofVariableByName"], [35, 1, 1, "", "getPerDofVariableName"], [35, 1, 1, "", "getRandomNumberSeed"], [35, 1, 1, "", "getStepSize"], [35, 1, 1, "", "getTabulatedFunction"], [35, 1, 1, "", "getTabulatedFunctionName"], [35, 1, 1, "", "setConstraintTolerance"], [35, 1, 1, "", "setGlobalVariable"], [35, 1, 1, "", "setGlobalVariableByName"], [35, 1, 1, "", "setIntegrationForceGroups"], [35, 1, 1, "", "setKineticEnergyExpression"], [35, 1, 1, "", "setPerDofVariable"], [35, 1, 1, "", "setPerDofVariableByName"], [35, 1, 1, "", "setRandomNumberSeed"], [35, 1, 1, "", "setStepSize"], [35, 1, 1, "", "step"], [35, 2, 1, "", "thisown"]], "openmm.openmm": [[36, 0, 1, "", "AmoebaGeneralizedKirkwoodForce"], [37, 0, 1, "", "AmoebaMultipoleForce"], [38, 0, 1, "", "AmoebaTorsionTorsionForce"], [39, 0, 1, "", "AmoebaVdwForce"], [40, 0, 1, "", "AmoebaWcaDispersionForce"], [41, 0, 1, "", "AndersenThermostat"], [42, 0, 1, "", "BrownianIntegrator"], [43, 0, 1, "", "CMAPTorsionForce"], [44, 0, 1, "", "CMMotionRemover"], [45, 0, 1, "", "CompoundIntegrator"], [46, 0, 1, "", "Context"], [47, 0, 1, "", "Continuous1DFunction"], [48, 0, 1, "", "Continuous2DFunction"], [49, 0, 1, "", "Continuous3DFunction"], [50, 0, 1, "", "CustomAngleForce"], [51, 0, 1, "", "CustomBondForce"], [52, 0, 1, "", "CustomCVForce"], [53, 0, 1, "", "CustomCentroidBondForce"], [54, 0, 1, "", "CustomCompoundBondForce"], [55, 0, 1, "", "CustomExternalForce"], [56, 0, 1, "", "CustomGBForce"], [57, 0, 1, "", "CustomHbondForce"], [58, 0, 1, "", "CustomIntegrator"], [59, 0, 1, "", "CustomManyParticleForce"], [60, 0, 1, "", "CustomNonbondedForce"], [61, 0, 1, "", "CustomTorsionForce"], [62, 0, 1, "", "Discrete1DFunction"], [63, 0, 1, "", "Discrete2DFunction"], [64, 0, 1, "", "Discrete3DFunction"], [65, 0, 1, "", "DrudeForce"], [66, 0, 1, "", "DrudeIntegrator"], [67, 0, 1, "", "DrudeLangevinIntegrator"], [68, 0, 1, "", "DrudeNoseHooverIntegrator"], [69, 0, 1, "", "DrudeSCFIntegrator"], [70, 0, 1, "", "Force"], [71, 0, 1, "", "GBSAOBCForce"], [72, 0, 1, "", "GayBerneForce"], [73, 0, 1, "", "HarmonicAngleForce"], [74, 0, 1, "", "HarmonicBondForce"], [75, 0, 1, "", "HippoNonbondedForce"], [76, 0, 1, "", "Integrator"], [77, 0, 1, "", "LangevinIntegrator"], [78, 0, 1, "", "LangevinMiddleIntegrator"], [79, 0, 1, "", "LocalCoordinatesSite"], [80, 0, 1, "", "LocalEnergyMinimizer"], [81, 0, 1, "", "MonteCarloAnisotropicBarostat"], [82, 0, 1, "", "MonteCarloBarostat"], [83, 0, 1, "", "MonteCarloFlexibleBarostat"], [84, 0, 1, "", "MonteCarloMembraneBarostat"], [85, 0, 1, "", "NonbondedForce"], [86, 0, 1, "", "NoseHooverChain"], [87, 0, 1, "", "NoseHooverIntegrator"], [88, 0, 1, "", "OutOfPlaneSite"], [89, 0, 1, "", "PeriodicTorsionForce"], [90, 0, 1, "", "Platform"], [91, 0, 1, "", "RBTorsionForce"], [92, 0, 1, "", "RMSDForce"], [93, 0, 1, "", "RPMDIntegrator"], [94, 0, 1, "", "RPMDMonteCarloBarostat"], [95, 0, 1, "", "SerializationNode"], [96, 0, 1, "", "SerializationProxy"], [97, 0, 1, "", "State"], [98, 0, 1, "", "System"], [99, 0, 1, "", "TabulatedFunction"], [100, 0, 1, "", "ThreeParticleAverageSite"], [101, 0, 1, "", "TwoParticleAverageSite"], [102, 0, 1, "", "VariableLangevinIntegrator"], [103, 0, 1, "", "VariableVerletIntegrator"], [104, 0, 1, "", "VerletIntegrator"], [105, 0, 1, "", "VirtualSite"], [106, 0, 1, "", "XmlSerializer"]], "openmm.openmm.AmoebaGeneralizedKirkwoodForce": [[36, 1, 1, "", "__init__"], [36, 1, 1, "", "addParticle"], [36, 1, 1, "", "getForceGroup"], [36, 1, 1, "", "getIncludeCavityTerm"], [36, 1, 1, "", "getName"], [36, 1, 1, "", "getNumParticles"], [36, 1, 1, "", "getParticleParameters"], [36, 1, 1, "", "getProbeRadius"], [36, 1, 1, "", "getSoluteDielectric"], [36, 1, 1, "", "getSolventDielectric"], [36, 1, 1, "", "getSurfaceAreaFactor"], [36, 1, 1, "", "setForceGroup"], [36, 1, 1, "", "setIncludeCavityTerm"], [36, 1, 1, "", "setName"], [36, 1, 1, "", "setParticleParameters"], [36, 1, 1, "", "setProbeRadius"], [36, 1, 1, "", "setSoluteDielectric"], [36, 1, 1, "", "setSolventDielectric"], [36, 1, 1, "", "setSurfaceAreaFactor"], [36, 2, 1, "", "thisown"], [36, 1, 1, "", "updateParametersInContext"], [36, 1, 1, "", "usesPeriodicBoundaryConditions"]], "openmm.openmm.AmoebaMultipoleForce": [[37, 1, 1, "", "__init__"], [37, 1, 1, "", "addMultipole"], [37, 1, 1, "", "getAEwald"], [37, 1, 1, "", "getCovalentMap"], [37, 1, 1, "", "getCovalentMaps"], [37, 1, 1, "", "getCutoffDistance"], [37, 1, 1, "", "getElectrostaticPotential"], [37, 1, 1, "", "getEwaldErrorTolerance"], [37, 1, 1, "", "getExtrapolationCoefficients"], [37, 1, 1, "", "getForceGroup"], [37, 1, 1, "", "getInducedDipoles"], [37, 1, 1, "", "getLabFramePermanentDipoles"], [37, 1, 1, "", "getMultipoleParameters"], [37, 1, 1, "", "getMutualInducedMaxIterations"], [37, 1, 1, "", "getMutualInducedTargetEpsilon"], [37, 1, 1, "", "getName"], [37, 1, 1, "", "getNonbondedMethod"], [37, 1, 1, "", "getNumMultipoles"], [37, 1, 1, "", "getPMEParameters"], [37, 1, 1, "", "getPMEParametersInContext"], [37, 1, 1, "", "getPmeBSplineOrder"], [37, 1, 1, "", "getPmeGridDimensions"], [37, 1, 1, "", "getPolarizationType"], [37, 1, 1, "", "getSystemMultipoleMoments"], [37, 1, 1, "", "getTotalDipoles"], [37, 1, 1, "", "setAEwald"], [37, 1, 1, "", "setCovalentMap"], [37, 1, 1, "", "setCutoffDistance"], [37, 1, 1, "", "setEwaldErrorTolerance"], [37, 1, 1, "", "setExtrapolationCoefficients"], [37, 1, 1, "", "setForceGroup"], [37, 1, 1, "", "setMultipoleParameters"], [37, 1, 1, "", "setMutualInducedMaxIterations"], [37, 1, 1, "", "setMutualInducedTargetEpsilon"], [37, 1, 1, "", "setName"], [37, 1, 1, "", "setNonbondedMethod"], [37, 1, 1, "", "setPMEParameters"], [37, 1, 1, "", "setPmeGridDimensions"], [37, 1, 1, "", "setPolarizationType"], [37, 2, 1, "", "thisown"], [37, 1, 1, "", "updateParametersInContext"], [37, 1, 1, "", "usesPeriodicBoundaryConditions"]], "openmm.openmm.AmoebaTorsionTorsionForce": [[38, 1, 1, "", "__init__"], [38, 1, 1, "", "addTorsionTorsion"], [38, 1, 1, "", "getForceGroup"], [38, 1, 1, "", "getName"], [38, 1, 1, "", "getNumTorsionTorsionGrids"], [38, 1, 1, "", "getNumTorsionTorsions"], [38, 1, 1, "", "getTorsionTorsionGrid"], [38, 1, 1, "", "getTorsionTorsionParameters"], [38, 1, 1, "", "setForceGroup"], [38, 1, 1, "", "setName"], [38, 1, 1, "", "setTorsionTorsionGrid"], [38, 1, 1, "", "setTorsionTorsionParameters"], [38, 1, 1, "", "setUsesPeriodicBoundaryConditions"], [38, 2, 1, "", "thisown"], [38, 1, 1, "", "usesPeriodicBoundaryConditions"]], "openmm.openmm.AmoebaVdwForce": [[39, 1, 1, "", "Lambda"], [39, 1, 1, "", "__init__"], [39, 1, 1, "", "addParticle"], [39, 1, 1, "", "addParticleType"], [39, 1, 1, "", "addTypePair"], [39, 1, 1, "", "getAlchemicalMethod"], [39, 1, 1, "", "getCutoff"], [39, 1, 1, "", "getCutoffDistance"], [39, 1, 1, "", "getEpsilonCombiningRule"], [39, 1, 1, "", "getForceGroup"], [39, 1, 1, "", "getName"], [39, 1, 1, "", "getNonbondedMethod"], [39, 1, 1, "", "getNumParticleTypes"], [39, 1, 1, "", "getNumParticles"], [39, 1, 1, "", "getNumTypePairs"], [39, 1, 1, "", "getParticleExclusions"], [39, 1, 1, "", "getParticleParameters"], [39, 1, 1, "", "getParticleTypeParameters"], [39, 1, 1, "", "getPotentialFunction"], [39, 1, 1, "", "getSigmaCombiningRule"], [39, 1, 1, "", "getSoftcoreAlpha"], [39, 1, 1, "", "getSoftcorePower"], [39, 1, 1, "", "getTypePairParameters"], [39, 1, 1, "", "getUseDispersionCorrection"], [39, 1, 1, "", "getUseParticleTypes"], [39, 1, 1, "", "setAlchemicalMethod"], [39, 1, 1, "", "setCutoff"], [39, 1, 1, "", "setCutoffDistance"], [39, 1, 1, "", "setEpsilonCombiningRule"], [39, 1, 1, "", "setForceGroup"], [39, 1, 1, "", "setName"], [39, 1, 1, "", "setNonbondedMethod"], [39, 1, 1, "", "setParticleExclusions"], [39, 1, 1, "", "setParticleParameters"], [39, 1, 1, "", "setParticleTypeParameters"], [39, 1, 1, "", "setPotentialFunction"], [39, 1, 1, "", "setSigmaCombiningRule"], [39, 1, 1, "", "setSoftcoreAlpha"], [39, 1, 1, "", "setSoftcorePower"], [39, 1, 1, "", "setTypePairParameters"], [39, 1, 1, "", "setUseDispersionCorrection"], [39, 2, 1, "", "thisown"], [39, 1, 1, "", "updateParametersInContext"], [39, 1, 1, "", "usesPeriodicBoundaryConditions"]], "openmm.openmm.AmoebaWcaDispersionForce": [[40, 1, 1, "", "__init__"], [40, 1, 1, "", "addParticle"], [40, 1, 1, "", "getAwater"], [40, 1, 1, "", "getDispoff"], [40, 1, 1, "", "getEpsh"], [40, 1, 1, "", "getEpso"], [40, 1, 1, "", "getForceGroup"], [40, 1, 1, "", "getName"], [40, 1, 1, "", "getNumParticles"], [40, 1, 1, "", "getParticleParameters"], [40, 1, 1, "", "getRminh"], [40, 1, 1, "", "getRmino"], [40, 1, 1, "", "getShctd"], [40, 1, 1, "", "getSlevy"], [40, 1, 1, "", "setAwater"], [40, 1, 1, "", "setDispoff"], [40, 1, 1, "", "setEpsh"], [40, 1, 1, "", "setEpso"], [40, 1, 1, "", "setForceGroup"], [40, 1, 1, "", "setName"], [40, 1, 1, "", "setParticleParameters"], [40, 1, 1, "", "setRminh"], [40, 1, 1, "", "setRmino"], [40, 1, 1, "", "setShctd"], [40, 1, 1, "", "setSlevy"], [40, 2, 1, "", "thisown"], [40, 1, 1, "", "updateParametersInContext"], [40, 1, 1, "", "usesPeriodicBoundaryConditions"]], "openmm.openmm.AndersenThermostat": [[41, 1, 1, "", "CollisionFrequency"], [41, 1, 1, "", "Temperature"], [41, 1, 1, "", "__init__"], [41, 1, 1, "", "getDefaultCollisionFrequency"], [41, 1, 1, "", "getDefaultTemperature"], [41, 1, 1, "", "getForceGroup"], [41, 1, 1, "", "getName"], [41, 1, 1, "", "getRandomNumberSeed"], [41, 1, 1, "", "setDefaultCollisionFrequency"], [41, 1, 1, "", "setDefaultTemperature"], [41, 1, 1, "", "setForceGroup"], [41, 1, 1, "", "setName"], [41, 1, 1, "", "setRandomNumberSeed"], [41, 2, 1, "", "thisown"], [41, 1, 1, "", "usesPeriodicBoundaryConditions"]], "openmm.openmm.BrownianIntegrator": [[42, 1, 1, "", "__init__"], [42, 1, 1, "", "getConstraintTolerance"], [42, 1, 1, "", "getFriction"], [42, 1, 1, "", "getIntegrationForceGroups"], [42, 1, 1, "", "getRandomNumberSeed"], [42, 1, 1, "", "getStepSize"], [42, 1, 1, "", "getTemperature"], [42, 1, 1, "", "setConstraintTolerance"], [42, 1, 1, "", "setFriction"], [42, 1, 1, "", "setIntegrationForceGroups"], [42, 1, 1, "", "setRandomNumberSeed"], [42, 1, 1, "", "setStepSize"], [42, 1, 1, "", "setTemperature"], [42, 1, 1, "", "step"], [42, 2, 1, "", "thisown"]], "openmm.openmm.CMAPTorsionForce": [[43, 1, 1, "", "__init__"], [43, 1, 1, "", "addMap"], [43, 1, 1, "", "addTorsion"], [43, 1, 1, "", "getForceGroup"], [43, 1, 1, "", "getMapParameters"], [43, 1, 1, "", "getName"], [43, 1, 1, "", "getNumMaps"], [43, 1, 1, "", "getNumTorsions"], [43, 1, 1, "", "getTorsionParameters"], [43, 1, 1, "", "setForceGroup"], [43, 1, 1, "", "setMapParameters"], [43, 1, 1, "", "setName"], [43, 1, 1, "", "setTorsionParameters"], [43, 1, 1, "", "setUsesPeriodicBoundaryConditions"], [43, 2, 1, "", "thisown"], [43, 1, 1, "", "updateParametersInContext"], [43, 1, 1, "", "usesPeriodicBoundaryConditions"]], "openmm.openmm.CMMotionRemover": [[44, 1, 1, "", "__init__"], [44, 1, 1, "", "getForceGroup"], [44, 1, 1, "", "getFrequency"], [44, 1, 1, "", "getName"], [44, 1, 1, "", "setForceGroup"], [44, 1, 1, "", "setFrequency"], [44, 1, 1, "", "setName"], [44, 2, 1, "", "thisown"], [44, 1, 1, "", "usesPeriodicBoundaryConditions"]], "openmm.openmm.CompoundIntegrator": [[45, 1, 1, "", "__init__"], [45, 1, 1, "", "addIntegrator"], [45, 1, 1, "", "getConstraintTolerance"], [45, 1, 1, "", "getCurrentIntegrator"], [45, 1, 1, "", "getIntegrationForceGroups"], [45, 1, 1, "", "getIntegrator"], [45, 1, 1, "", "getNumIntegrators"], [45, 1, 1, "", "getStepSize"], [45, 1, 1, "", "setConstraintTolerance"], [45, 1, 1, "", "setCurrentIntegrator"], [45, 1, 1, "", "setIntegrationForceGroups"], [45, 1, 1, "", "setStepSize"], [45, 1, 1, "", "step"], [45, 2, 1, "", "thisown"]], "openmm.openmm.Context": [[46, 1, 1, "", "__init__"], [46, 1, 1, "", "applyConstraints"], [46, 1, 1, "", "applyVelocityConstraints"], [46, 1, 1, "", "computeVirtualSites"], [46, 1, 1, "", "createCheckpoint"], [46, 1, 1, "", "getMolecules"], [46, 1, 1, "", "getParameter"], [46, 1, 1, "", "getParameters"], [46, 1, 1, "", "getPlatform"], [46, 1, 1, "", "getState"], [46, 1, 1, "", "getStepCount"], [46, 1, 1, "", "getSystem"], [46, 1, 1, "", "getTime"], [46, 1, 1, "", "loadCheckpoint"], [46, 1, 1, "", "reinitialize"], [46, 1, 1, "", "setParameter"], [46, 1, 1, "", "setPeriodicBoxVectors"], [46, 1, 1, "", "setPositions"], [46, 1, 1, "", "setState"], [46, 1, 1, "", "setStepCount"], [46, 1, 1, "", "setTime"], [46, 1, 1, "", "setVelocities"], [46, 1, 1, "", "setVelocitiesToTemperature"], [46, 2, 1, "", "thisown"]], "openmm.openmm.Continuous1DFunction": [[47, 1, 1, "", "Copy"], [47, 1, 1, "", "__eq__"], [47, 1, 1, "", "__init__"], [47, 1, 1, "", "__ne__"], [47, 1, 1, "", "getFunctionParameters"], [47, 1, 1, "", "getPeriodic"], [47, 1, 1, "", "getUpdateCount"], [47, 1, 1, "", "setFunctionParameters"], [47, 2, 1, "", "thisown"]], "openmm.openmm.Continuous2DFunction": [[48, 1, 1, "", "Copy"], [48, 1, 1, "", "__eq__"], [48, 1, 1, "", "__init__"], [48, 1, 1, "", "__ne__"], [48, 1, 1, "", "getFunctionParameters"], [48, 1, 1, "", "getPeriodic"], [48, 1, 1, "", "getUpdateCount"], [48, 1, 1, "", "setFunctionParameters"], [48, 2, 1, "", "thisown"]], "openmm.openmm.Continuous3DFunction": [[49, 1, 1, "", "Copy"], [49, 1, 1, "", "__eq__"], [49, 1, 1, "", "__init__"], [49, 1, 1, "", "__ne__"], [49, 1, 1, "", "getFunctionParameters"], [49, 1, 1, "", "getPeriodic"], [49, 1, 1, "", "getUpdateCount"], [49, 1, 1, "", "setFunctionParameters"], [49, 2, 1, "", "thisown"]], "openmm.openmm.CustomAngleForce": [[50, 1, 1, "", "__init__"], [50, 1, 1, "", "addAngle"], [50, 1, 1, "", "addEnergyParameterDerivative"], [50, 1, 1, "", "addGlobalParameter"], [50, 1, 1, "", "addPerAngleParameter"], [50, 1, 1, "", "getAngleParameters"], [50, 1, 1, "", "getEnergyFunction"], [50, 1, 1, "", "getEnergyParameterDerivativeName"], [50, 1, 1, "", "getForceGroup"], [50, 1, 1, "", "getGlobalParameterDefaultValue"], [50, 1, 1, "", "getGlobalParameterName"], [50, 1, 1, "", "getName"], [50, 1, 1, "", "getNumAngles"], [50, 1, 1, "", "getNumEnergyParameterDerivatives"], [50, 1, 1, "", "getNumGlobalParameters"], [50, 1, 1, "", "getNumPerAngleParameters"], [50, 1, 1, "", "getPerAngleParameterName"], [50, 1, 1, "", "setAngleParameters"], [50, 1, 1, "", "setEnergyFunction"], [50, 1, 1, "", "setForceGroup"], [50, 1, 1, "", "setGlobalParameterDefaultValue"], [50, 1, 1, "", "setGlobalParameterName"], [50, 1, 1, "", "setName"], [50, 1, 1, "", "setPerAngleParameterName"], [50, 1, 1, "", "setUsesPeriodicBoundaryConditions"], [50, 2, 1, "", "thisown"], [50, 1, 1, "", "updateParametersInContext"], [50, 1, 1, "", "usesPeriodicBoundaryConditions"]], "openmm.openmm.CustomBondForce": [[51, 1, 1, "", "__init__"], [51, 1, 1, "", "addBond"], [51, 1, 1, "", "addEnergyParameterDerivative"], [51, 1, 1, "", "addGlobalParameter"], [51, 1, 1, "", "addPerBondParameter"], [51, 1, 1, "", "getBondParameters"], [51, 1, 1, "", "getEnergyFunction"], [51, 1, 1, "", "getEnergyParameterDerivativeName"], [51, 1, 1, "", "getForceGroup"], [51, 1, 1, "", "getGlobalParameterDefaultValue"], [51, 1, 1, "", "getGlobalParameterName"], [51, 1, 1, "", "getName"], [51, 1, 1, "", "getNumBonds"], [51, 1, 1, "", "getNumEnergyParameterDerivatives"], [51, 1, 1, "", "getNumGlobalParameters"], [51, 1, 1, "", "getNumPerBondParameters"], [51, 1, 1, "", "getPerBondParameterName"], [51, 1, 1, "", "setBondParameters"], [51, 1, 1, "", "setEnergyFunction"], [51, 1, 1, "", "setForceGroup"], [51, 1, 1, "", "setGlobalParameterDefaultValue"], [51, 1, 1, "", "setGlobalParameterName"], [51, 1, 1, "", "setName"], [51, 1, 1, "", "setPerBondParameterName"], [51, 1, 1, "", "setUsesPeriodicBoundaryConditions"], [51, 2, 1, "", "thisown"], [51, 1, 1, "", "updateParametersInContext"], [51, 1, 1, "", "usesPeriodicBoundaryConditions"]], "openmm.openmm.CustomCVForce": [[52, 1, 1, "", "__init__"], [52, 1, 1, "", "addCollectiveVariable"], [52, 1, 1, "", "addEnergyParameterDerivative"], [52, 1, 1, "", "addGlobalParameter"], [52, 1, 1, "", "addTabulatedFunction"], [52, 1, 1, "", "getCollectiveVariable"], [52, 1, 1, "", "getCollectiveVariableName"], [52, 1, 1, "", "getCollectiveVariableValues"], [52, 1, 1, "", "getEnergyFunction"], [52, 1, 1, "", "getEnergyParameterDerivativeName"], [52, 1, 1, "", "getForceGroup"], [52, 1, 1, "", "getGlobalParameterDefaultValue"], [52, 1, 1, "", "getGlobalParameterName"], [52, 1, 1, "", "getInnerContext"], [52, 1, 1, "", "getName"], [52, 1, 1, "", "getNumCollectiveVariables"], [52, 1, 1, "", "getNumEnergyParameterDerivatives"], [52, 1, 1, "", "getNumGlobalParameters"], [52, 1, 1, "", "getNumTabulatedFunctions"], [52, 1, 1, "", "getTabulatedFunction"], [52, 1, 1, "", "getTabulatedFunctionName"], [52, 1, 1, "", "setEnergyFunction"], [52, 1, 1, "", "setForceGroup"], [52, 1, 1, "", "setGlobalParameterDefaultValue"], [52, 1, 1, "", "setGlobalParameterName"], [52, 1, 1, "", "setName"], [52, 2, 1, "", "thisown"], [52, 1, 1, "", "updateParametersInContext"], [52, 1, 1, "", "usesPeriodicBoundaryConditions"]], "openmm.openmm.CustomCentroidBondForce": [[53, 1, 1, "", "__init__"], [53, 1, 1, "", "addBond"], [53, 1, 1, "", "addEnergyParameterDerivative"], [53, 1, 1, "", "addGlobalParameter"], [53, 1, 1, "", "addGroup"], [53, 1, 1, "", "addPerBondParameter"], [53, 1, 1, "", "addTabulatedFunction"], [53, 1, 1, "", "getBondParameters"], [53, 1, 1, "", "getEnergyFunction"], [53, 1, 1, "", "getEnergyParameterDerivativeName"], [53, 1, 1, "", "getForceGroup"], [53, 1, 1, "", "getGlobalParameterDefaultValue"], [53, 1, 1, "", "getGlobalParameterName"], [53, 1, 1, "", "getGroupParameters"], [53, 1, 1, "", "getName"], [53, 1, 1, "", "getNumBonds"], [53, 1, 1, "", "getNumEnergyParameterDerivatives"], [53, 1, 1, "", "getNumFunctions"], [53, 1, 1, "", "getNumGlobalParameters"], [53, 1, 1, "", "getNumGroups"], [53, 1, 1, "", "getNumGroupsPerBond"], [53, 1, 1, "", "getNumPerBondParameters"], [53, 1, 1, "", "getNumTabulatedFunctions"], [53, 1, 1, "", "getPerBondParameterName"], [53, 1, 1, "", "getTabulatedFunction"], [53, 1, 1, "", "getTabulatedFunctionName"], [53, 1, 1, "", "setBondParameters"], [53, 1, 1, "", "setEnergyFunction"], [53, 1, 1, "", "setForceGroup"], [53, 1, 1, "", "setGlobalParameterDefaultValue"], [53, 1, 1, "", "setGlobalParameterName"], [53, 1, 1, "", "setGroupParameters"], [53, 1, 1, "", "setName"], [53, 1, 1, "", "setPerBondParameterName"], [53, 1, 1, "", "setUsesPeriodicBoundaryConditions"], [53, 2, 1, "", "thisown"], [53, 1, 1, "", "updateParametersInContext"], [53, 1, 1, "", "usesPeriodicBoundaryConditions"]], "openmm.openmm.CustomCompoundBondForce": [[54, 1, 1, "", "__init__"], [54, 1, 1, "", "addBond"], [54, 1, 1, "", "addEnergyParameterDerivative"], [54, 1, 1, "", "addFunction"], [54, 1, 1, "", "addGlobalParameter"], [54, 1, 1, "", "addPerBondParameter"], [54, 1, 1, "", "addTabulatedFunction"], [54, 1, 1, "", "getBondParameters"], [54, 1, 1, "", "getEnergyFunction"], [54, 1, 1, "", "getEnergyParameterDerivativeName"], [54, 1, 1, "", "getForceGroup"], [54, 1, 1, "", "getFunctionParameters"], [54, 1, 1, "", "getGlobalParameterDefaultValue"], [54, 1, 1, "", "getGlobalParameterName"], [54, 1, 1, "", "getName"], [54, 1, 1, "", "getNumBonds"], [54, 1, 1, "", "getNumEnergyParameterDerivatives"], [54, 1, 1, "", "getNumFunctions"], [54, 1, 1, "", "getNumGlobalParameters"], [54, 1, 1, "", "getNumParticlesPerBond"], [54, 1, 1, "", "getNumPerBondParameters"], [54, 1, 1, "", "getNumTabulatedFunctions"], [54, 1, 1, "", "getPerBondParameterName"], [54, 1, 1, "", "getTabulatedFunction"], [54, 1, 1, "", "getTabulatedFunctionName"], [54, 1, 1, "", "setBondParameters"], [54, 1, 1, "", "setEnergyFunction"], [54, 1, 1, "", "setForceGroup"], [54, 1, 1, "", "setFunctionParameters"], [54, 1, 1, "", "setGlobalParameterDefaultValue"], [54, 1, 1, "", "setGlobalParameterName"], [54, 1, 1, "", "setName"], [54, 1, 1, "", "setPerBondParameterName"], [54, 1, 1, "", "setUsesPeriodicBoundaryConditions"], [54, 2, 1, "", "thisown"], [54, 1, 1, "", "updateParametersInContext"], [54, 1, 1, "", "usesPeriodicBoundaryConditions"]], "openmm.openmm.CustomExternalForce": [[55, 1, 1, "", "__init__"], [55, 1, 1, "", "addGlobalParameter"], [55, 1, 1, "", "addParticle"], [55, 1, 1, "", "addPerParticleParameter"], [55, 1, 1, "", "getEnergyFunction"], [55, 1, 1, "", "getForceGroup"], [55, 1, 1, "", "getGlobalParameterDefaultValue"], [55, 1, 1, "", "getGlobalParameterName"], [55, 1, 1, "", "getName"], [55, 1, 1, "", "getNumGlobalParameters"], [55, 1, 1, "", "getNumParticles"], [55, 1, 1, "", "getNumPerParticleParameters"], [55, 1, 1, "", "getParticleParameters"], [55, 1, 1, "", "getPerParticleParameterName"], [55, 1, 1, "", "setEnergyFunction"], [55, 1, 1, "", "setForceGroup"], [55, 1, 1, "", "setGlobalParameterDefaultValue"], [55, 1, 1, "", "setGlobalParameterName"], [55, 1, 1, "", "setName"], [55, 1, 1, "", "setParticleParameters"], [55, 1, 1, "", "setPerParticleParameterName"], [55, 2, 1, "", "thisown"], [55, 1, 1, "", "updateParametersInContext"], [55, 1, 1, "", "usesPeriodicBoundaryConditions"]], "openmm.openmm.CustomGBForce": [[56, 1, 1, "", "__init__"], [56, 1, 1, "", "addComputedValue"], [56, 1, 1, "", "addEnergyParameterDerivative"], [56, 1, 1, "", "addEnergyTerm"], [56, 1, 1, "", "addExclusion"], [56, 1, 1, "", "addFunction"], [56, 1, 1, "", "addGlobalParameter"], [56, 1, 1, "", "addParticle"], [56, 1, 1, "", "addPerParticleParameter"], [56, 1, 1, "", "addTabulatedFunction"], [56, 1, 1, "", "getComputedValueParameters"], [56, 1, 1, "", "getCutoffDistance"], [56, 1, 1, "", "getEnergyParameterDerivativeName"], [56, 1, 1, "", "getEnergyTermParameters"], [56, 1, 1, "", "getExclusionParticles"], [56, 1, 1, "", "getForceGroup"], [56, 1, 1, "", "getFunctionParameters"], [56, 1, 1, "", "getGlobalParameterDefaultValue"], [56, 1, 1, "", "getGlobalParameterName"], [56, 1, 1, "", "getName"], [56, 1, 1, "", "getNonbondedMethod"], [56, 1, 1, "", "getNumComputedValues"], [56, 1, 1, "", "getNumEnergyParameterDerivatives"], [56, 1, 1, "", "getNumEnergyTerms"], [56, 1, 1, "", "getNumExclusions"], [56, 1, 1, "", "getNumFunctions"], [56, 1, 1, "", "getNumGlobalParameters"], [56, 1, 1, "", "getNumParticles"], [56, 1, 1, "", "getNumPerParticleParameters"], [56, 1, 1, "", "getNumTabulatedFunctions"], [56, 1, 1, "", "getParticleParameters"], [56, 1, 1, "", "getPerParticleParameterName"], [56, 1, 1, "", "getTabulatedFunction"], [56, 1, 1, "", "getTabulatedFunctionName"], [56, 1, 1, "", "setComputedValueParameters"], [56, 1, 1, "", "setCutoffDistance"], [56, 1, 1, "", "setEnergyTermParameters"], [56, 1, 1, "", "setExclusionParticles"], [56, 1, 1, "", "setForceGroup"], [56, 1, 1, "", "setFunctionParameters"], [56, 1, 1, "", "setGlobalParameterDefaultValue"], [56, 1, 1, "", "setGlobalParameterName"], [56, 1, 1, "", "setName"], [56, 1, 1, "", "setNonbondedMethod"], [56, 1, 1, "", "setParticleParameters"], [56, 1, 1, "", "setPerParticleParameterName"], [56, 2, 1, "", "thisown"], [56, 1, 1, "", "updateParametersInContext"], [56, 1, 1, "", "usesPeriodicBoundaryConditions"]], "openmm.openmm.CustomHbondForce": [[57, 1, 1, "", "__init__"], [57, 1, 1, "", "addAcceptor"], [57, 1, 1, "", "addDonor"], [57, 1, 1, "", "addExclusion"], [57, 1, 1, "", "addFunction"], [57, 1, 1, "", "addGlobalParameter"], [57, 1, 1, "", "addPerAcceptorParameter"], [57, 1, 1, "", "addPerDonorParameter"], [57, 1, 1, "", "addTabulatedFunction"], [57, 1, 1, "", "getAcceptorParameters"], [57, 1, 1, "", "getCutoffDistance"], [57, 1, 1, "", "getDonorParameters"], [57, 1, 1, "", "getEnergyFunction"], [57, 1, 1, "", "getExclusionParticles"], [57, 1, 1, "", "getForceGroup"], [57, 1, 1, "", "getFunctionParameters"], [57, 1, 1, "", "getGlobalParameterDefaultValue"], [57, 1, 1, "", "getGlobalParameterName"], [57, 1, 1, "", "getName"], [57, 1, 1, "", "getNonbondedMethod"], [57, 1, 1, "", "getNumAcceptors"], [57, 1, 1, "", "getNumDonors"], [57, 1, 1, "", "getNumExclusions"], [57, 1, 1, "", "getNumFunctions"], [57, 1, 1, "", "getNumGlobalParameters"], [57, 1, 1, "", "getNumPerAcceptorParameters"], [57, 1, 1, "", "getNumPerDonorParameters"], [57, 1, 1, "", "getNumTabulatedFunctions"], [57, 1, 1, "", "getPerAcceptorParameterName"], [57, 1, 1, "", "getPerDonorParameterName"], [57, 1, 1, "", "getTabulatedFunction"], [57, 1, 1, "", "getTabulatedFunctionName"], [57, 1, 1, "", "setAcceptorParameters"], [57, 1, 1, "", "setCutoffDistance"], [57, 1, 1, "", "setDonorParameters"], [57, 1, 1, "", "setEnergyFunction"], [57, 1, 1, "", "setExclusionParticles"], [57, 1, 1, "", "setForceGroup"], [57, 1, 1, "", "setFunctionParameters"], [57, 1, 1, "", "setGlobalParameterDefaultValue"], [57, 1, 1, "", "setGlobalParameterName"], [57, 1, 1, "", "setName"], [57, 1, 1, "", "setNonbondedMethod"], [57, 1, 1, "", "setPerAcceptorParameterName"], [57, 1, 1, "", "setPerDonorParameterName"], [57, 2, 1, "", "thisown"], [57, 1, 1, "", "updateParametersInContext"], [57, 1, 1, "", "usesPeriodicBoundaryConditions"]], "openmm.openmm.CustomIntegrator": [[58, 1, 1, "", "__init__"], [58, 1, 1, "", "addComputeGlobal"], [58, 1, 1, "", "addComputePerDof"], [58, 1, 1, "", "addComputeSum"], [58, 1, 1, "", "addConstrainPositions"], [58, 1, 1, "", "addConstrainVelocities"], [58, 1, 1, "", "addGlobalVariable"], [58, 1, 1, "", "addPerDofVariable"], [58, 1, 1, "", "addTabulatedFunction"], [58, 1, 1, "", "addUpdateContextState"], [58, 1, 1, "", "beginIfBlock"], [58, 1, 1, "", "beginWhileBlock"], [58, 1, 1, "", "endBlock"], [58, 1, 1, "", "getComputationStep"], [58, 1, 1, "", "getConstraintTolerance"], [58, 1, 1, "", "getGlobalVariable"], [58, 1, 1, "", "getGlobalVariableByName"], [58, 1, 1, "", "getGlobalVariableName"], [58, 1, 1, "", "getIntegrationForceGroups"], [58, 1, 1, "", "getKineticEnergyExpression"], [58, 1, 1, "", "getNumComputations"], [58, 1, 1, "", "getNumGlobalVariables"], [58, 1, 1, "", "getNumPerDofVariables"], [58, 1, 1, "", "getNumTabulatedFunctions"], [58, 1, 1, "", "getPerDofVariable"], [58, 1, 1, "", "getPerDofVariableByName"], [58, 1, 1, "", "getPerDofVariableName"], [58, 1, 1, "", "getRandomNumberSeed"], [58, 1, 1, "", "getStepSize"], [58, 1, 1, "", "getTabulatedFunction"], [58, 1, 1, "", "getTabulatedFunctionName"], [58, 1, 1, "", "setConstraintTolerance"], [58, 1, 1, "", "setGlobalVariable"], [58, 1, 1, "", "setGlobalVariableByName"], [58, 1, 1, "", "setIntegrationForceGroups"], [58, 1, 1, "", "setKineticEnergyExpression"], [58, 1, 1, "", "setPerDofVariable"], [58, 1, 1, "", "setPerDofVariableByName"], [58, 1, 1, "", "setRandomNumberSeed"], [58, 1, 1, "", "setStepSize"], [58, 1, 1, "", "step"], [58, 2, 1, "", "thisown"]], "openmm.openmm.CustomManyParticleForce": [[59, 1, 1, "", "__init__"], [59, 1, 1, "", "addExclusion"], [59, 1, 1, "", "addGlobalParameter"], [59, 1, 1, "", "addParticle"], [59, 1, 1, "", "addPerParticleParameter"], [59, 1, 1, "", "addTabulatedFunction"], [59, 1, 1, "", "createExclusionsFromBonds"], [59, 1, 1, "", "getCutoffDistance"], [59, 1, 1, "", "getEnergyFunction"], [59, 1, 1, "", "getExclusionParticles"], [59, 1, 1, "", "getForceGroup"], [59, 1, 1, "", "getGlobalParameterDefaultValue"], [59, 1, 1, "", "getGlobalParameterName"], [59, 1, 1, "", "getName"], [59, 1, 1, "", "getNonbondedMethod"], [59, 1, 1, "", "getNumExclusions"], [59, 1, 1, "", "getNumGlobalParameters"], [59, 1, 1, "", "getNumParticles"], [59, 1, 1, "", "getNumParticlesPerSet"], [59, 1, 1, "", "getNumPerParticleParameters"], [59, 1, 1, "", "getNumTabulatedFunctions"], [59, 1, 1, "", "getParticleParameters"], [59, 1, 1, "", "getPerParticleParameterName"], [59, 1, 1, "", "getPermutationMode"], [59, 1, 1, "", "getTabulatedFunction"], [59, 1, 1, "", "getTabulatedFunctionName"], [59, 1, 1, "", "getTypeFilter"], [59, 1, 1, "", "setCutoffDistance"], [59, 1, 1, "", "setEnergyFunction"], [59, 1, 1, "", "setExclusionParticles"], [59, 1, 1, "", "setForceGroup"], [59, 1, 1, "", "setGlobalParameterDefaultValue"], [59, 1, 1, "", "setGlobalParameterName"], [59, 1, 1, "", "setName"], [59, 1, 1, "", "setNonbondedMethod"], [59, 1, 1, "", "setParticleParameters"], [59, 1, 1, "", "setPerParticleParameterName"], [59, 1, 1, "", "setPermutationMode"], [59, 1, 1, "", "setTypeFilter"], [59, 2, 1, "", "thisown"], [59, 1, 1, "", "updateParametersInContext"], [59, 1, 1, "", "usesPeriodicBoundaryConditions"]], "openmm.openmm.CustomNonbondedForce": [[60, 1, 1, "", "__init__"], [60, 1, 1, "", "addComputedValue"], [60, 1, 1, "", "addEnergyParameterDerivative"], [60, 1, 1, "", "addExclusion"], [60, 1, 1, "", "addFunction"], [60, 1, 1, "", "addGlobalParameter"], [60, 1, 1, "", "addInteractionGroup"], [60, 1, 1, "", "addParticle"], [60, 1, 1, "", "addPerParticleParameter"], [60, 1, 1, "", "addTabulatedFunction"], [60, 1, 1, "", "createExclusionsFromBonds"], [60, 1, 1, "", "getComputedValueParameters"], [60, 1, 1, "", "getCutoffDistance"], [60, 1, 1, "", "getEnergyFunction"], [60, 1, 1, "", "getEnergyParameterDerivativeName"], [60, 1, 1, "", "getExclusionParticles"], [60, 1, 1, "", "getForceGroup"], [60, 1, 1, "", "getFunctionParameters"], [60, 1, 1, "", "getGlobalParameterDefaultValue"], [60, 1, 1, "", "getGlobalParameterName"], [60, 1, 1, "", "getInteractionGroupParameters"], [60, 1, 1, "", "getName"], [60, 1, 1, "", "getNonbondedMethod"], [60, 1, 1, "", "getNumComputedValues"], [60, 1, 1, "", "getNumEnergyParameterDerivatives"], [60, 1, 1, "", "getNumExclusions"], [60, 1, 1, "", "getNumFunctions"], [60, 1, 1, "", "getNumGlobalParameters"], [60, 1, 1, "", "getNumInteractionGroups"], [60, 1, 1, "", "getNumParticles"], [60, 1, 1, "", "getNumPerParticleParameters"], [60, 1, 1, "", "getNumTabulatedFunctions"], [60, 1, 1, "", "getParticleParameters"], [60, 1, 1, "", "getPerParticleParameterName"], [60, 1, 1, "", "getSwitchingDistance"], [60, 1, 1, "", "getTabulatedFunction"], [60, 1, 1, "", "getTabulatedFunctionName"], [60, 1, 1, "", "getUseLongRangeCorrection"], [60, 1, 1, "", "getUseSwitchingFunction"], [60, 1, 1, "", "setComputedValueParameters"], [60, 1, 1, "", "setCutoffDistance"], [60, 1, 1, "", "setEnergyFunction"], [60, 1, 1, "", "setExclusionParticles"], [60, 1, 1, "", "setForceGroup"], [60, 1, 1, "", "setFunctionParameters"], [60, 1, 1, "", "setGlobalParameterDefaultValue"], [60, 1, 1, "", "setGlobalParameterName"], [60, 1, 1, "", "setInteractionGroupParameters"], [60, 1, 1, "", "setName"], [60, 1, 1, "", "setNonbondedMethod"], [60, 1, 1, "", "setParticleParameters"], [60, 1, 1, "", "setPerParticleParameterName"], [60, 1, 1, "", "setSwitchingDistance"], [60, 1, 1, "", "setUseLongRangeCorrection"], [60, 1, 1, "", "setUseSwitchingFunction"], [60, 2, 1, "", "thisown"], [60, 1, 1, "", "updateParametersInContext"], [60, 1, 1, "", "usesPeriodicBoundaryConditions"]], "openmm.openmm.CustomTorsionForce": [[61, 1, 1, "", "__init__"], [61, 1, 1, "", "addEnergyParameterDerivative"], [61, 1, 1, "", "addGlobalParameter"], [61, 1, 1, "", "addPerTorsionParameter"], [61, 1, 1, "", "addTorsion"], [61, 1, 1, "", "getEnergyFunction"], [61, 1, 1, "", "getEnergyParameterDerivativeName"], [61, 1, 1, "", "getForceGroup"], [61, 1, 1, "", "getGlobalParameterDefaultValue"], [61, 1, 1, "", "getGlobalParameterName"], [61, 1, 1, "", "getName"], [61, 1, 1, "", "getNumEnergyParameterDerivatives"], [61, 1, 1, "", "getNumGlobalParameters"], [61, 1, 1, "", "getNumPerTorsionParameters"], [61, 1, 1, "", "getNumTorsions"], [61, 1, 1, "", "getPerTorsionParameterName"], [61, 1, 1, "", "getTorsionParameters"], [61, 1, 1, "", "setEnergyFunction"], [61, 1, 1, "", "setForceGroup"], [61, 1, 1, "", "setGlobalParameterDefaultValue"], [61, 1, 1, "", "setGlobalParameterName"], [61, 1, 1, "", "setName"], [61, 1, 1, "", "setPerTorsionParameterName"], [61, 1, 1, "", "setTorsionParameters"], [61, 1, 1, "", "setUsesPeriodicBoundaryConditions"], [61, 2, 1, "", "thisown"], [61, 1, 1, "", "updateParametersInContext"], [61, 1, 1, "", "usesPeriodicBoundaryConditions"]], "openmm.openmm.Discrete1DFunction": [[62, 1, 1, "", "Copy"], [62, 1, 1, "", "__eq__"], [62, 1, 1, "", "__init__"], [62, 1, 1, "", "__ne__"], [62, 1, 1, "", "getFunctionParameters"], [62, 1, 1, "", "getPeriodic"], [62, 1, 1, "", "getUpdateCount"], [62, 1, 1, "", "setFunctionParameters"], [62, 2, 1, "", "thisown"]], "openmm.openmm.Discrete2DFunction": [[63, 1, 1, "", "Copy"], [63, 1, 1, "", "__eq__"], [63, 1, 1, "", "__init__"], [63, 1, 1, "", "__ne__"], [63, 1, 1, "", "getFunctionParameters"], [63, 1, 1, "", "getPeriodic"], [63, 1, 1, "", "getUpdateCount"], [63, 1, 1, "", "setFunctionParameters"], [63, 2, 1, "", "thisown"]], "openmm.openmm.Discrete3DFunction": [[64, 1, 1, "", "Copy"], [64, 1, 1, "", "__eq__"], [64, 1, 1, "", "__init__"], [64, 1, 1, "", "__ne__"], [64, 1, 1, "", "getFunctionParameters"], [64, 1, 1, "", "getPeriodic"], [64, 1, 1, "", "getUpdateCount"], [64, 1, 1, "", "setFunctionParameters"], [64, 2, 1, "", "thisown"]], "openmm.openmm.DrudeForce": [[65, 1, 1, "", "__init__"], [65, 1, 1, "", "addParticle"], [65, 1, 1, "", "addScreenedPair"], [65, 1, 1, "", "getForceGroup"], [65, 1, 1, "", "getName"], [65, 1, 1, "", "getNumParticles"], [65, 1, 1, "", "getNumScreenedPairs"], [65, 1, 1, "", "getParticleParameters"], [65, 1, 1, "", "getScreenedPairParameters"], [65, 1, 1, "", "setForceGroup"], [65, 1, 1, "", "setName"], [65, 1, 1, "", "setParticleParameters"], [65, 1, 1, "", "setScreenedPairParameters"], [65, 2, 1, "", "thisown"], [65, 1, 1, "", "updateParametersInContext"], [65, 1, 1, "", "usesPeriodicBoundaryConditions"]], "openmm.openmm.DrudeIntegrator": [[66, 1, 1, "", "__init__"], [66, 1, 1, "", "getConstraintTolerance"], [66, 1, 1, "", "getDrudeTemperature"], [66, 1, 1, "", "getIntegrationForceGroups"], [66, 1, 1, "", "getMaxDrudeDistance"], [66, 1, 1, "", "getRandomNumberSeed"], [66, 1, 1, "", "getStepSize"], [66, 1, 1, "", "setConstraintTolerance"], [66, 1, 1, "", "setDrudeTemperature"], [66, 1, 1, "", "setIntegrationForceGroups"], [66, 1, 1, "", "setMaxDrudeDistance"], [66, 1, 1, "", "setRandomNumberSeed"], [66, 1, 1, "", "setStepSize"], [66, 1, 1, "", "step"], [66, 2, 1, "", "thisown"]], "openmm.openmm.DrudeLangevinIntegrator": [[67, 1, 1, "", "__init__"], [67, 1, 1, "", "computeDrudeTemperature"], [67, 1, 1, "", "computeSystemTemperature"], [67, 1, 1, "", "getConstraintTolerance"], [67, 1, 1, "", "getDrudeFriction"], [67, 1, 1, "", "getDrudeTemperature"], [67, 1, 1, "", "getFriction"], [67, 1, 1, "", "getIntegrationForceGroups"], [67, 1, 1, "", "getMaxDrudeDistance"], [67, 1, 1, "", "getRandomNumberSeed"], [67, 1, 1, "", "getStepSize"], [67, 1, 1, "", "getTemperature"], [67, 1, 1, "", "setConstraintTolerance"], [67, 1, 1, "", "setDrudeFriction"], [67, 1, 1, "", "setDrudeTemperature"], [67, 1, 1, "", "setFriction"], [67, 1, 1, "", "setIntegrationForceGroups"], [67, 1, 1, "", "setMaxDrudeDistance"], [67, 1, 1, "", "setRandomNumberSeed"], [67, 1, 1, "", "setStepSize"], [67, 1, 1, "", "setTemperature"], [67, 1, 1, "", "step"], [67, 2, 1, "", "thisown"]], "openmm.openmm.DrudeNoseHooverIntegrator": [[68, 1, 1, "", "__init__"], [68, 1, 1, "", "addSubsystemThermostat"], [68, 1, 1, "", "addThermostat"], [68, 1, 1, "", "computeDrudeKineticEnergy"], [68, 1, 1, "", "computeDrudeTemperature"], [68, 1, 1, "", "computeHeatBathEnergy"], [68, 1, 1, "", "computeSystemTemperature"], [68, 1, 1, "", "computeTotalKineticEnergy"], [68, 1, 1, "", "getCollisionFrequency"], [68, 1, 1, "", "getConstraintTolerance"], [68, 1, 1, "", "getIntegrationForceGroups"], [68, 1, 1, "", "getMaxDrudeDistance"], [68, 1, 1, "", "getMaximumPairDistance"], [68, 1, 1, "", "getNumThermostats"], [68, 1, 1, "", "getRelativeCollisionFrequency"], [68, 1, 1, "", "getRelativeTemperature"], [68, 1, 1, "", "getStepSize"], [68, 1, 1, "", "getTemperature"], [68, 1, 1, "", "getThermostat"], [68, 1, 1, "", "hasSubsystemThermostats"], [68, 1, 1, "", "initialize"], [68, 1, 1, "", "setCollisionFrequency"], [68, 1, 1, "", "setConstraintTolerance"], [68, 1, 1, "", "setIntegrationForceGroups"], [68, 1, 1, "", "setMaxDrudeDistance"], [68, 1, 1, "", "setMaximumPairDistance"], [68, 1, 1, "", "setRelativeCollisionFrequency"], [68, 1, 1, "", "setRelativeTemperature"], [68, 1, 1, "", "setStepSize"], [68, 1, 1, "", "setTemperature"], [68, 1, 1, "", "step"], [68, 2, 1, "", "thisown"]], "openmm.openmm.DrudeSCFIntegrator": [[69, 1, 1, "", "__init__"], [69, 1, 1, "", "getConstraintTolerance"], [69, 1, 1, "", "getDrudeTemperature"], [69, 1, 1, "", "getIntegrationForceGroups"], [69, 1, 1, "", "getMaxDrudeDistance"], [69, 1, 1, "", "getMinimizationErrorTolerance"], [69, 1, 1, "", "getRandomNumberSeed"], [69, 1, 1, "", "getStepSize"], [69, 1, 1, "", "setConstraintTolerance"], [69, 1, 1, "", "setDrudeTemperature"], [69, 1, 1, "", "setIntegrationForceGroups"], [69, 1, 1, "", "setMaxDrudeDistance"], [69, 1, 1, "", "setMinimizationErrorTolerance"], [69, 1, 1, "", "setRandomNumberSeed"], [69, 1, 1, "", "setStepSize"], [69, 1, 1, "", "step"], [69, 2, 1, "", "thisown"]], "openmm.openmm.Force": [[70, 1, 1, "", "__init__"], [70, 1, 1, "", "getForceGroup"], [70, 1, 1, "", "getName"], [70, 1, 1, "", "setForceGroup"], [70, 1, 1, "", "setName"], [70, 2, 1, "", "thisown"], [70, 1, 1, "", "usesPeriodicBoundaryConditions"]], "openmm.openmm.GBSAOBCForce": [[71, 1, 1, "", "__init__"], [71, 1, 1, "", "addParticle"], [71, 1, 1, "", "getCutoffDistance"], [71, 1, 1, "", "getForceGroup"], [71, 1, 1, "", "getName"], [71, 1, 1, "", "getNonbondedMethod"], [71, 1, 1, "", "getNumParticles"], [71, 1, 1, "", "getParticleParameters"], [71, 1, 1, "", "getSoluteDielectric"], [71, 1, 1, "", "getSolventDielectric"], [71, 1, 1, "", "getSurfaceAreaEnergy"], [71, 1, 1, "", "setCutoffDistance"], [71, 1, 1, "", "setForceGroup"], [71, 1, 1, "", "setName"], [71, 1, 1, "", "setNonbondedMethod"], [71, 1, 1, "", "setParticleParameters"], [71, 1, 1, "", "setSoluteDielectric"], [71, 1, 1, "", "setSolventDielectric"], [71, 1, 1, "", "setSurfaceAreaEnergy"], [71, 2, 1, "", "thisown"], [71, 1, 1, "", "updateParametersInContext"], [71, 1, 1, "", "usesPeriodicBoundaryConditions"]], "openmm.openmm.GayBerneForce": [[72, 1, 1, "", "__init__"], [72, 1, 1, "", "addException"], [72, 1, 1, "", "addParticle"], [72, 1, 1, "", "getCutoffDistance"], [72, 1, 1, "", "getExceptionParameters"], [72, 1, 1, "", "getForceGroup"], [72, 1, 1, "", "getName"], [72, 1, 1, "", "getNonbondedMethod"], [72, 1, 1, "", "getNumExceptions"], [72, 1, 1, "", "getNumParticles"], [72, 1, 1, "", "getParticleParameters"], [72, 1, 1, "", "getSwitchingDistance"], [72, 1, 1, "", "getUseSwitchingFunction"], [72, 1, 1, "", "setCutoffDistance"], [72, 1, 1, "", "setExceptionParameters"], [72, 1, 1, "", "setForceGroup"], [72, 1, 1, "", "setName"], [72, 1, 1, "", "setNonbondedMethod"], [72, 1, 1, "", "setParticleParameters"], [72, 1, 1, "", "setSwitchingDistance"], [72, 1, 1, "", "setUseSwitchingFunction"], [72, 2, 1, "", "thisown"], [72, 1, 1, "", "updateParametersInContext"], [72, 1, 1, "", "usesPeriodicBoundaryConditions"]], "openmm.openmm.HarmonicAngleForce": [[73, 1, 1, "", "__init__"], [73, 1, 1, "", "addAngle"], [73, 1, 1, "", "getAngleParameters"], [73, 1, 1, "", "getForceGroup"], [73, 1, 1, "", "getName"], [73, 1, 1, "", "getNumAngles"], [73, 1, 1, "", "setAngleParameters"], [73, 1, 1, "", "setForceGroup"], [73, 1, 1, "", "setName"], [73, 1, 1, "", "setUsesPeriodicBoundaryConditions"], [73, 2, 1, "", "thisown"], [73, 1, 1, "", "updateParametersInContext"], [73, 1, 1, "", "usesPeriodicBoundaryConditions"]], "openmm.openmm.HarmonicBondForce": [[74, 1, 1, "", "__init__"], [74, 1, 1, "", "addBond"], [74, 1, 1, "", "getBondParameters"], [74, 1, 1, "", "getForceGroup"], [74, 1, 1, "", "getName"], [74, 1, 1, "", "getNumBonds"], [74, 1, 1, "", "setBondParameters"], [74, 1, 1, "", "setForceGroup"], [74, 1, 1, "", "setName"], [74, 1, 1, "", "setUsesPeriodicBoundaryConditions"], [74, 2, 1, "", "thisown"], [74, 1, 1, "", "updateParametersInContext"], [74, 1, 1, "", "usesPeriodicBoundaryConditions"]], "openmm.openmm.HippoNonbondedForce": [[75, 1, 1, "", "__init__"], [75, 1, 1, "", "addException"], [75, 1, 1, "", "addParticle"], [75, 1, 1, "", "getCutoffDistance"], [75, 1, 1, "", "getDPMEParameters"], [75, 1, 1, "", "getDPMEParametersInContext"], [75, 1, 1, "", "getEwaldErrorTolerance"], [75, 1, 1, "", "getExceptionParameters"], [75, 1, 1, "", "getExtrapolationCoefficients"], [75, 1, 1, "", "getForceGroup"], [75, 1, 1, "", "getInducedDipoles"], [75, 1, 1, "", "getLabFramePermanentDipoles"], [75, 1, 1, "", "getName"], [75, 1, 1, "", "getNonbondedMethod"], [75, 1, 1, "", "getNumExceptions"], [75, 1, 1, "", "getNumParticles"], [75, 1, 1, "", "getPMEParameters"], [75, 1, 1, "", "getPMEParametersInContext"], [75, 1, 1, "", "getParticleParameters"], [75, 1, 1, "", "getSwitchingDistance"], [75, 1, 1, "", "setCutoffDistance"], [75, 1, 1, "", "setDPMEParameters"], [75, 1, 1, "", "setEwaldErrorTolerance"], [75, 1, 1, "", "setExceptionParameters"], [75, 1, 1, "", "setExtrapolationCoefficients"], [75, 1, 1, "", "setForceGroup"], [75, 1, 1, "", "setName"], [75, 1, 1, "", "setNonbondedMethod"], [75, 1, 1, "", "setPMEParameters"], [75, 1, 1, "", "setParticleParameters"], [75, 1, 1, "", "setSwitchingDistance"], [75, 2, 1, "", "thisown"], [75, 1, 1, "", "updateParametersInContext"], [75, 1, 1, "", "usesPeriodicBoundaryConditions"]], "openmm.openmm.Integrator": [[76, 1, 1, "", "__init__"], [76, 1, 1, "", "getConstraintTolerance"], [76, 1, 1, "", "getIntegrationForceGroups"], [76, 1, 1, "", "getStepSize"], [76, 1, 1, "", "setConstraintTolerance"], [76, 1, 1, "", "setIntegrationForceGroups"], [76, 1, 1, "", "setStepSize"], [76, 1, 1, "", "step"], [76, 2, 1, "", "thisown"]], "openmm.openmm.LangevinIntegrator": [[77, 1, 1, "", "__init__"], [77, 1, 1, "", "getConstraintTolerance"], [77, 1, 1, "", "getFriction"], [77, 1, 1, "", "getIntegrationForceGroups"], [77, 1, 1, "", "getRandomNumberSeed"], [77, 1, 1, "", "getStepSize"], [77, 1, 1, "", "getTemperature"], [77, 1, 1, "", "setConstraintTolerance"], [77, 1, 1, "", "setFriction"], [77, 1, 1, "", "setIntegrationForceGroups"], [77, 1, 1, "", "setRandomNumberSeed"], [77, 1, 1, "", "setStepSize"], [77, 1, 1, "", "setTemperature"], [77, 1, 1, "", "step"], [77, 2, 1, "", "thisown"]], "openmm.openmm.LangevinMiddleIntegrator": [[78, 1, 1, "", "__init__"], [78, 1, 1, "", "getConstraintTolerance"], [78, 1, 1, "", "getFriction"], [78, 1, 1, "", "getIntegrationForceGroups"], [78, 1, 1, "", "getRandomNumberSeed"], [78, 1, 1, "", "getStepSize"], [78, 1, 1, "", "getTemperature"], [78, 1, 1, "", "setConstraintTolerance"], [78, 1, 1, "", "setFriction"], [78, 1, 1, "", "setIntegrationForceGroups"], [78, 1, 1, "", "setRandomNumberSeed"], [78, 1, 1, "", "setStepSize"], [78, 1, 1, "", "setTemperature"], [78, 1, 1, "", "step"], [78, 2, 1, "", "thisown"]], "openmm.openmm.LocalCoordinatesSite": [[79, 1, 1, "", "__init__"], [79, 1, 1, "", "getLocalPosition"], [79, 1, 1, "", "getNumParticles"], [79, 1, 1, "", "getOriginWeights"], [79, 1, 1, "", "getParticle"], [79, 1, 1, "", "getXWeights"], [79, 1, 1, "", "getYWeights"], [79, 2, 1, "", "thisown"]], "openmm.openmm.LocalEnergyMinimizer": [[80, 1, 1, "", "__init__"], [80, 1, 1, "", "minimize"], [80, 2, 1, "", "thisown"]], "openmm.openmm.MonteCarloAnisotropicBarostat": [[81, 1, 1, "", "PressureX"], [81, 1, 1, "", "PressureY"], [81, 1, 1, "", "PressureZ"], [81, 1, 1, "", "Temperature"], [81, 1, 1, "", "__init__"], [81, 1, 1, "", "getDefaultPressure"], [81, 1, 1, "", "getDefaultTemperature"], [81, 1, 1, "", "getForceGroup"], [81, 1, 1, "", "getFrequency"], [81, 1, 1, "", "getName"], [81, 1, 1, "", "getRandomNumberSeed"], [81, 1, 1, "", "getScaleX"], [81, 1, 1, "", "getScaleY"], [81, 1, 1, "", "getScaleZ"], [81, 1, 1, "", "setDefaultPressure"], [81, 1, 1, "", "setDefaultTemperature"], [81, 1, 1, "", "setForceGroup"], [81, 1, 1, "", "setFrequency"], [81, 1, 1, "", "setName"], [81, 1, 1, "", "setRandomNumberSeed"], [81, 2, 1, "", "thisown"], [81, 1, 1, "", "usesPeriodicBoundaryConditions"]], "openmm.openmm.MonteCarloBarostat": [[82, 1, 1, "", "Pressure"], [82, 1, 1, "", "Temperature"], [82, 1, 1, "", "__init__"], [82, 1, 1, "", "getDefaultPressure"], [82, 1, 1, "", "getDefaultTemperature"], [82, 1, 1, "", "getForceGroup"], [82, 1, 1, "", "getFrequency"], [82, 1, 1, "", "getName"], [82, 1, 1, "", "getRandomNumberSeed"], [82, 1, 1, "", "setDefaultPressure"], [82, 1, 1, "", "setDefaultTemperature"], [82, 1, 1, "", "setForceGroup"], [82, 1, 1, "", "setFrequency"], [82, 1, 1, "", "setName"], [82, 1, 1, "", "setRandomNumberSeed"], [82, 2, 1, "", "thisown"], [82, 1, 1, "", "usesPeriodicBoundaryConditions"]], "openmm.openmm.MonteCarloFlexibleBarostat": [[83, 1, 1, "", "Pressure"], [83, 1, 1, "", "Temperature"], [83, 1, 1, "", "__init__"], [83, 1, 1, "", "getDefaultPressure"], [83, 1, 1, "", "getDefaultTemperature"], [83, 1, 1, "", "getForceGroup"], [83, 1, 1, "", "getFrequency"], [83, 1, 1, "", "getName"], [83, 1, 1, "", "getRandomNumberSeed"], [83, 1, 1, "", "getScaleMoleculesAsRigid"], [83, 1, 1, "", "setDefaultPressure"], [83, 1, 1, "", "setDefaultTemperature"], [83, 1, 1, "", "setForceGroup"], [83, 1, 1, "", "setFrequency"], [83, 1, 1, "", "setName"], [83, 1, 1, "", "setRandomNumberSeed"], [83, 1, 1, "", "setScaleMoleculesAsRigid"], [83, 2, 1, "", "thisown"], [83, 1, 1, "", "usesPeriodicBoundaryConditions"]], "openmm.openmm.MonteCarloMembraneBarostat": [[84, 1, 1, "", "Pressure"], [84, 1, 1, "", "SurfaceTension"], [84, 1, 1, "", "Temperature"], [84, 1, 1, "", "__init__"], [84, 1, 1, "", "getDefaultPressure"], [84, 1, 1, "", "getDefaultSurfaceTension"], [84, 1, 1, "", "getDefaultTemperature"], [84, 1, 1, "", "getForceGroup"], [84, 1, 1, "", "getFrequency"], [84, 1, 1, "", "getName"], [84, 1, 1, "", "getRandomNumberSeed"], [84, 1, 1, "", "getXYMode"], [84, 1, 1, "", "getZMode"], [84, 1, 1, "", "setDefaultPressure"], [84, 1, 1, "", "setDefaultSurfaceTension"], [84, 1, 1, "", "setDefaultTemperature"], [84, 1, 1, "", "setForceGroup"], [84, 1, 1, "", "setFrequency"], [84, 1, 1, "", "setName"], [84, 1, 1, "", "setRandomNumberSeed"], [84, 1, 1, "", "setXYMode"], [84, 1, 1, "", "setZMode"], [84, 2, 1, "", "thisown"], [84, 1, 1, "", "usesPeriodicBoundaryConditions"]], "openmm.openmm.NonbondedForce": [[85, 1, 1, "", "__init__"], [85, 1, 1, "", "addException"], [85, 1, 1, "", "addExceptionParameterOffset"], [85, 1, 1, "", "addException_usingRMin"], [85, 1, 1, "", "addGlobalParameter"], [85, 1, 1, "", "addParticle"], [85, 1, 1, "", "addParticleParameterOffset"], [85, 1, 1, "", "addParticle_usingRVdw"], [85, 1, 1, "", "createExceptionsFromBonds"], [85, 1, 1, "", "getCutoffDistance"], [85, 1, 1, "", "getEwaldErrorTolerance"], [85, 1, 1, "", "getExceptionParameterOffset"], [85, 1, 1, "", "getExceptionParameters"], [85, 1, 1, "", "getExceptionsUsePeriodicBoundaryConditions"], [85, 1, 1, "", "getForceGroup"], [85, 1, 1, "", "getGlobalParameterDefaultValue"], [85, 1, 1, "", "getGlobalParameterName"], [85, 1, 1, "", "getIncludeDirectSpace"], [85, 1, 1, "", "getLJPMEParameters"], [85, 1, 1, "", "getLJPMEParametersInContext"], [85, 1, 1, "", "getName"], [85, 1, 1, "", "getNonbondedMethod"], [85, 1, 1, "", "getNumExceptionParameterOffsets"], [85, 1, 1, "", "getNumExceptions"], [85, 1, 1, "", "getNumGlobalParameters"], [85, 1, 1, "", "getNumParticleParameterOffsets"], [85, 1, 1, "", "getNumParticles"], [85, 1, 1, "", "getPMEParameters"], [85, 1, 1, "", "getPMEParametersInContext"], [85, 1, 1, "", "getParticleParameterOffset"], [85, 1, 1, "", "getParticleParameters"], [85, 1, 1, "", "getReactionFieldDielectric"], [85, 1, 1, "", "getReciprocalSpaceForceGroup"], [85, 1, 1, "", "getSwitchingDistance"], [85, 1, 1, "", "getUseDispersionCorrection"], [85, 1, 1, "", "getUseSwitchingFunction"], [85, 1, 1, "", "setCutoffDistance"], [85, 1, 1, "", "setEwaldErrorTolerance"], [85, 1, 1, "", "setExceptionParameterOffset"], [85, 1, 1, "", "setExceptionParameters"], [85, 1, 1, "", "setExceptionsUsePeriodicBoundaryConditions"], [85, 1, 1, "", "setForceGroup"], [85, 1, 1, "", "setGlobalParameterDefaultValue"], [85, 1, 1, "", "setGlobalParameterName"], [85, 1, 1, "", "setIncludeDirectSpace"], [85, 1, 1, "", "setLJPMEParameters"], [85, 1, 1, "", "setName"], [85, 1, 1, "", "setNonbondedMethod"], [85, 1, 1, "", "setPMEParameters"], [85, 1, 1, "", "setParticleParameterOffset"], [85, 1, 1, "", "setParticleParameters"], [85, 1, 1, "", "setReactionFieldDielectric"], [85, 1, 1, "", "setReciprocalSpaceForceGroup"], [85, 1, 1, "", "setSwitchingDistance"], [85, 1, 1, "", "setUseDispersionCorrection"], [85, 1, 1, "", "setUseSwitchingFunction"], [85, 2, 1, "", "thisown"], [85, 1, 1, "", "updateParametersInContext"], [85, 1, 1, "", "usesPeriodicBoundaryConditions"]], "openmm.openmm.NoseHooverChain": [[86, 1, 1, "", "__init__"], [86, 1, 1, "", "getChainID"], [86, 1, 1, "", "getChainLength"], [86, 1, 1, "", "getCollisionFrequency"], [86, 1, 1, "", "getNumDegreesOfFreedom"], [86, 1, 1, "", "getNumMultiTimeSteps"], [86, 1, 1, "", "getNumYoshidaSuzukiTimeSteps"], [86, 1, 1, "", "getRelativeCollisionFrequency"], [86, 1, 1, "", "getRelativeTemperature"], [86, 1, 1, "", "getTemperature"], [86, 1, 1, "", "getThermostatedAtoms"], [86, 1, 1, "", "getThermostatedPairs"], [86, 1, 1, "", "getYoshidaSuzukiWeights"], [86, 1, 1, "", "setCollisionFrequency"], [86, 1, 1, "", "setNumDegreesOfFreedom"], [86, 1, 1, "", "setRelativeCollisionFrequency"], [86, 1, 1, "", "setRelativeTemperature"], [86, 1, 1, "", "setTemperature"], [86, 1, 1, "", "setThermostatedAtoms"], [86, 1, 1, "", "setThermostatedPairs"], [86, 2, 1, "", "thisown"], [86, 1, 1, "", "usesPeriodicBoundaryConditions"]], "openmm.openmm.NoseHooverIntegrator": [[87, 1, 1, "", "__init__"], [87, 1, 1, "", "addSubsystemThermostat"], [87, 1, 1, "", "addThermostat"], [87, 1, 1, "", "computeHeatBathEnergy"], [87, 1, 1, "", "getCollisionFrequency"], [87, 1, 1, "", "getConstraintTolerance"], [87, 1, 1, "", "getIntegrationForceGroups"], [87, 1, 1, "", "getMaximumPairDistance"], [87, 1, 1, "", "getNumThermostats"], [87, 1, 1, "", "getRelativeCollisionFrequency"], [87, 1, 1, "", "getRelativeTemperature"], [87, 1, 1, "", "getStepSize"], [87, 1, 1, "", "getTemperature"], [87, 1, 1, "", "getThermostat"], [87, 1, 1, "", "hasSubsystemThermostats"], [87, 1, 1, "", "setCollisionFrequency"], [87, 1, 1, "", "setConstraintTolerance"], [87, 1, 1, "", "setIntegrationForceGroups"], [87, 1, 1, "", "setMaximumPairDistance"], [87, 1, 1, "", "setRelativeCollisionFrequency"], [87, 1, 1, "", "setRelativeTemperature"], [87, 1, 1, "", "setStepSize"], [87, 1, 1, "", "setTemperature"], [87, 1, 1, "", "step"], [87, 2, 1, "", "thisown"]], "openmm.openmm.OutOfPlaneSite": [[88, 1, 1, "", "__init__"], [88, 1, 1, "", "getNumParticles"], [88, 1, 1, "", "getParticle"], [88, 1, 1, "", "getWeight12"], [88, 1, 1, "", "getWeight13"], [88, 1, 1, "", "getWeightCross"], [88, 2, 1, "", "thisown"]], "openmm.openmm.PeriodicTorsionForce": [[89, 1, 1, "", "__init__"], [89, 1, 1, "", "addTorsion"], [89, 1, 1, "", "getForceGroup"], [89, 1, 1, "", "getName"], [89, 1, 1, "", "getNumTorsions"], [89, 1, 1, "", "getTorsionParameters"], [89, 1, 1, "", "setForceGroup"], [89, 1, 1, "", "setName"], [89, 1, 1, "", "setTorsionParameters"], [89, 1, 1, "", "setUsesPeriodicBoundaryConditions"], [89, 2, 1, "", "thisown"], [89, 1, 1, "", "updateParametersInContext"], [89, 1, 1, "", "usesPeriodicBoundaryConditions"]], "openmm.openmm.Platform": [[90, 1, 1, "", "__init__"], [90, 1, 1, "", "findPlatform"], [90, 1, 1, "", "getDefaultPluginsDirectory"], [90, 1, 1, "", "getName"], [90, 1, 1, "", "getNumPlatforms"], [90, 1, 1, "", "getOpenMMVersion"], [90, 1, 1, "", "getPlatform"], [90, 1, 1, "", "getPlatformByName"], [90, 1, 1, "", "getPluginLoadFailures"], [90, 1, 1, "", "getPropertyDefaultValue"], [90, 1, 1, "", "getPropertyNames"], [90, 1, 1, "", "getPropertyValue"], [90, 1, 1, "", "getSpeed"], [90, 1, 1, "", "linkedContextCreated"], [90, 1, 1, "", "loadPluginLibrary"], [90, 1, 1, "", "loadPluginsFromDirectory"], [90, 1, 1, "", "registerPlatform"], [90, 1, 1, "", "setPropertyDefaultValue"], [90, 1, 1, "", "setPropertyValue"], [90, 1, 1, "", "supportsDoublePrecision"], [90, 1, 1, "", "supportsKernels"], [90, 2, 1, "", "thisown"]], "openmm.openmm.RBTorsionForce": [[91, 1, 1, "", "__init__"], [91, 1, 1, "", "addTorsion"], [91, 1, 1, "", "getForceGroup"], [91, 1, 1, "", "getName"], [91, 1, 1, "", "getNumTorsions"], [91, 1, 1, "", "getTorsionParameters"], [91, 1, 1, "", "setForceGroup"], [91, 1, 1, "", "setName"], [91, 1, 1, "", "setTorsionParameters"], [91, 1, 1, "", "setUsesPeriodicBoundaryConditions"], [91, 2, 1, "", "thisown"], [91, 1, 1, "", "updateParametersInContext"], [91, 1, 1, "", "usesPeriodicBoundaryConditions"]], "openmm.openmm.RMSDForce": [[92, 1, 1, "", "__init__"], [92, 1, 1, "", "getForceGroup"], [92, 1, 1, "", "getName"], [92, 1, 1, "", "getParticles"], [92, 1, 1, "", "getReferencePositions"], [92, 1, 1, "", "setForceGroup"], [92, 1, 1, "", "setName"], [92, 1, 1, "", "setParticles"], [92, 1, 1, "", "setReferencePositions"], [92, 2, 1, "", "thisown"], [92, 1, 1, "", "updateParametersInContext"], [92, 1, 1, "", "usesPeriodicBoundaryConditions"]], "openmm.openmm.RPMDIntegrator": [[93, 1, 1, "", "__init__"], [93, 1, 1, "", "getApplyThermostat"], [93, 1, 1, "", "getConstraintTolerance"], [93, 1, 1, "", "getContractions"], [93, 1, 1, "", "getFriction"], [93, 1, 1, "", "getIntegrationForceGroups"], [93, 1, 1, "", "getNumCopies"], [93, 1, 1, "", "getRandomNumberSeed"], [93, 1, 1, "", "getState"], [93, 1, 1, "", "getStepSize"], [93, 1, 1, "", "getTemperature"], [93, 1, 1, "", "getTotalEnergy"], [93, 1, 1, "", "setApplyThermostat"], [93, 1, 1, "", "setConstraintTolerance"], [93, 1, 1, "", "setFriction"], [93, 1, 1, "", "setIntegrationForceGroups"], [93, 1, 1, "", "setPositions"], [93, 1, 1, "", "setRandomNumberSeed"], [93, 1, 1, "", "setStepSize"], [93, 1, 1, "", "setTemperature"], [93, 1, 1, "", "setVelocities"], [93, 1, 1, "", "step"], [93, 2, 1, "", "thisown"]], "openmm.openmm.RPMDMonteCarloBarostat": [[94, 1, 1, "", "Pressure"], [94, 1, 1, "", "__init__"], [94, 1, 1, "", "getDefaultPressure"], [94, 1, 1, "", "getForceGroup"], [94, 1, 1, "", "getFrequency"], [94, 1, 1, "", "getName"], [94, 1, 1, "", "getRandomNumberSeed"], [94, 1, 1, "", "setDefaultPressure"], [94, 1, 1, "", "setForceGroup"], [94, 1, 1, "", "setFrequency"], [94, 1, 1, "", "setName"], [94, 1, 1, "", "setRandomNumberSeed"], [94, 2, 1, "", "thisown"], [94, 1, 1, "", "usesPeriodicBoundaryConditions"]], "openmm.openmm.SerializationNode": [[95, 1, 1, "", "__init__"], [95, 1, 1, "", "createChildNode"], [95, 1, 1, "", "getBoolProperty"], [95, 1, 1, "", "getChildNode"], [95, 1, 1, "", "getChildren"], [95, 1, 1, "", "getDoubleProperty"], [95, 1, 1, "", "getIntProperty"], [95, 1, 1, "", "getLongProperty"], [95, 1, 1, "", "getName"], [95, 1, 1, "", "getProperties"], [95, 1, 1, "", "getStringProperty"], [95, 1, 1, "", "hasProperty"], [95, 1, 1, "", "setBoolProperty"], [95, 1, 1, "", "setDoubleProperty"], [95, 1, 1, "", "setIntProperty"], [95, 1, 1, "", "setLongProperty"], [95, 1, 1, "", "setName"], [95, 1, 1, "", "setStringProperty"], [95, 2, 1, "", "thisown"]], "openmm.openmm.SerializationProxy": [[96, 1, 1, "", "__init__"], [96, 1, 1, "", "deserialize"], [96, 1, 1, "", "getProxy"], [96, 1, 1, "", "getTypeName"], [96, 1, 1, "", "registerProxy"], [96, 1, 1, "", "serialize"], [96, 2, 1, "", "thisown"]], "openmm.openmm.State": [[97, 1, 1, "", "__copy__"], [97, 1, 1, "", "__init__"], [97, 1, 1, "", "getDataTypes"], [97, 1, 1, "", "getEnergyParameterDerivatives"], [97, 1, 1, "", "getForces"], [97, 1, 1, "", "getKineticEnergy"], [97, 1, 1, "", "getParameters"], [97, 1, 1, "", "getPeriodicBoxVectors"], [97, 1, 1, "", "getPeriodicBoxVolume"], [97, 1, 1, "", "getPositions"], [97, 1, 1, "", "getPotentialEnergy"], [97, 1, 1, "", "getStepCount"], [97, 1, 1, "", "getTime"], [97, 1, 1, "", "getVelocities"], [97, 2, 1, "", "thisown"]], "openmm.openmm.System": [[98, 1, 1, "", "__copy__"], [98, 1, 1, "", "__init__"], [98, 1, 1, "", "addConstraint"], [98, 1, 1, "", "addForce"], [98, 1, 1, "", "addParticle"], [98, 1, 1, "", "getConstraintParameters"], [98, 1, 1, "", "getDefaultPeriodicBoxVectors"], [98, 1, 1, "", "getForce"], [98, 1, 1, "", "getForces"], [98, 1, 1, "", "getNumConstraints"], [98, 1, 1, "", "getNumForces"], [98, 1, 1, "", "getNumParticles"], [98, 1, 1, "", "getParticleMass"], [98, 1, 1, "", "getVirtualSite"], [98, 1, 1, "", "isVirtualSite"], [98, 1, 1, "", "removeConstraint"], [98, 1, 1, "", "removeForce"], [98, 1, 1, "", "setConstraintParameters"], [98, 1, 1, "", "setDefaultPeriodicBoxVectors"], [98, 1, 1, "", "setParticleMass"], [98, 1, 1, "", "setVirtualSite"], [98, 2, 1, "", "thisown"], [98, 1, 1, "", "usesPeriodicBoundaryConditions"]], "openmm.openmm.TabulatedFunction": [[99, 1, 1, "", "Copy"], [99, 1, 1, "", "__eq__"], [99, 1, 1, "", "__init__"], [99, 1, 1, "", "__ne__"], [99, 1, 1, "", "getPeriodic"], [99, 1, 1, "", "getUpdateCount"], [99, 2, 1, "", "thisown"]], "openmm.openmm.ThreeParticleAverageSite": [[100, 1, 1, "", "__init__"], [100, 1, 1, "", "getNumParticles"], [100, 1, 1, "", "getParticle"], [100, 1, 1, "", "getWeight"], [100, 2, 1, "", "thisown"]], "openmm.openmm.TwoParticleAverageSite": [[101, 1, 1, "", "__init__"], [101, 1, 1, "", "getNumParticles"], [101, 1, 1, "", "getParticle"], [101, 1, 1, "", "getWeight"], [101, 2, 1, "", "thisown"]], "openmm.openmm.VariableLangevinIntegrator": [[102, 1, 1, "", "__init__"], [102, 1, 1, "", "getConstraintTolerance"], [102, 1, 1, "", "getErrorTolerance"], [102, 1, 1, "", "getFriction"], [102, 1, 1, "", "getIntegrationForceGroups"], [102, 1, 1, "", "getMaximumStepSize"], [102, 1, 1, "", "getRandomNumberSeed"], [102, 1, 1, "", "getStepSize"], [102, 1, 1, "", "getTemperature"], [102, 1, 1, "", "setConstraintTolerance"], [102, 1, 1, "", "setErrorTolerance"], [102, 1, 1, "", "setFriction"], [102, 1, 1, "", "setIntegrationForceGroups"], [102, 1, 1, "", "setMaximumStepSize"], [102, 1, 1, "", "setRandomNumberSeed"], [102, 1, 1, "", "setStepSize"], [102, 1, 1, "", "setTemperature"], [102, 1, 1, "", "step"], [102, 1, 1, "", "stepTo"], [102, 2, 1, "", "thisown"]], "openmm.openmm.VariableVerletIntegrator": [[103, 1, 1, "", "__init__"], [103, 1, 1, "", "getConstraintTolerance"], [103, 1, 1, "", "getErrorTolerance"], [103, 1, 1, "", "getIntegrationForceGroups"], [103, 1, 1, "", "getMaximumStepSize"], [103, 1, 1, "", "getStepSize"], [103, 1, 1, "", "setConstraintTolerance"], [103, 1, 1, "", "setErrorTolerance"], [103, 1, 1, "", "setIntegrationForceGroups"], [103, 1, 1, "", "setMaximumStepSize"], [103, 1, 1, "", "setStepSize"], [103, 1, 1, "", "step"], [103, 1, 1, "", "stepTo"], [103, 2, 1, "", "thisown"]], "openmm.openmm.VerletIntegrator": [[104, 1, 1, "", "__init__"], [104, 1, 1, "", "getConstraintTolerance"], [104, 1, 1, "", "getIntegrationForceGroups"], [104, 1, 1, "", "getStepSize"], [104, 1, 1, "", "setConstraintTolerance"], [104, 1, 1, "", "setIntegrationForceGroups"], [104, 1, 1, "", "setStepSize"], [104, 1, 1, "", "step"], [104, 2, 1, "", "thisown"]], "openmm.openmm.VirtualSite": [[105, 1, 1, "", "__init__"], [105, 1, 1, "", "getNumParticles"], [105, 1, 1, "", "getParticle"], [105, 2, 1, "", "thisown"]], "openmm.openmm.XmlSerializer": [[106, 1, 1, "", "__init__"], [106, 1, 1, "", "clone"], [106, 1, 1, "", "deserialize"], [106, 1, 1, "", "deserializeSystem"], [106, 1, 1, "", "serialize"], [106, 1, 1, "", "serializeSystem"], [106, 2, 1, "", "thisown"]], "openmm.unit.basedimension": [[107, 0, 1, "", "BaseDimension"]], "openmm.unit.basedimension.BaseDimension": [[107, 1, 1, "", "__hash__"], [107, 1, 1, "", "__init__"], [107, 1, 1, "", "__lt__"]], "openmm.unit.baseunit": [[108, 0, 1, "", "BaseUnit"]], "openmm.unit.baseunit.BaseUnit": [[108, 1, 1, "", "__init__"], [108, 1, 1, "", "__lt__"], [108, 1, 1, "", "__str__"], [108, 1, 1, "", "conversion_factor_to"], [108, 1, 1, "", "define_conversion_factor_to"], [108, 1, 1, "", "get_dimension_tuple"], [108, 1, 1, "", "iter_base_dimensions"]], "openmm.unit.prefix": [[109, 0, 1, "", "SiPrefix"]], "openmm.unit.prefix.SiPrefix": [[109, 1, 1, "", "__init__"], [109, 1, 1, "", "__mul__"]], "openmm.unit.quantity": [[110, 0, 1, "", "Quantity"]], "openmm.unit.quantity.Quantity": [[110, 1, 1, "", "__abs__"], [110, 1, 1, "", "__add__"], [110, 1, 1, "", "__copy__"], [110, 1, 1, "", "__deepcopy__"], [110, 1, 1, "", "__div__"], [110, 1, 1, "", "__eq__"], [110, 1, 1, "", "__getattr__"], [110, 1, 1, "", "__getitem__"], [110, 1, 1, "", "__init__"], [110, 1, 1, "", "__len__"], [110, 1, 1, "", "__mul__"], [110, 1, 1, "", "__ne__"], [110, 1, 1, "", "__neg__"], [110, 1, 1, "", "__nonzero__"], [110, 1, 1, "", "__pos__"], [110, 1, 1, "", "__pow__"], [110, 1, 1, "", "__rdiv__"], [110, 1, 1, "", "__repr__"], [110, 1, 1, "", "__rmul__"], [110, 1, 1, "", "__rtruediv__"], [110, 1, 1, "", "__str__"], [110, 1, 1, "", "__sub__"], [110, 1, 1, "", "__truediv__"], [110, 1, 1, "", "in_unit_system"], [110, 1, 1, "", "in_units_of"], [110, 1, 1, "", "max"], [110, 1, 1, "", "mean"], [110, 1, 1, "", "min"], [110, 1, 1, "", "reduce_unit"], [110, 1, 1, "", "reshape"], [110, 1, 1, "", "sqrt"], [110, 1, 1, "", "std"], [110, 1, 1, "", "sum"], [110, 1, 1, "", "value_in_unit"], [110, 1, 1, "", "value_in_unit_system"]], "openmm.unit.unit": [[111, 0, 1, "", "ScaledUnit"], [112, 0, 1, "", "Unit"], [113, 0, 1, "", "UnitSystem"]], "openmm.unit.unit.ScaledUnit": [[111, 1, 1, "", "__init__"], [111, 1, 1, "", "__lt__"], [111, 1, 1, "", "__repr__"], [111, 1, 1, "", "__str__"], [111, 1, 1, "", "get_dimension_tuple"], [111, 1, 1, "", "iter_base_dimensions"]], "openmm.unit.unit.Unit": [[112, 1, 1, "", "__div__"], [112, 1, 1, "", "__hash__"], [112, 1, 1, "", "__init__"], [112, 1, 1, "", "__lt__"], [112, 1, 1, "", "__pow__"], [112, 1, 1, "", "__repr__"], [112, 1, 1, "", "__str__"], [112, 1, 1, "", "__truediv__"], [112, 1, 1, "", "conversion_factor_to"], [112, 1, 1, "", "create_unit"], [112, 1, 1, "", "get_conversion_factor_to_base_units"], [112, 1, 1, "", "get_name"], [112, 1, 1, "", "get_symbol"], [112, 1, 1, "", "in_unit_system"], [112, 1, 1, "", "is_compatible"], [112, 1, 1, "", "is_dimensionless"], [112, 1, 1, "", "iter_all_base_units"], [112, 1, 1, "", "iter_base_dimensions"], [112, 1, 1, "", "iter_top_base_units"], [112, 1, 1, "", "sqrt"]], "openmm.unit.unit.UnitSystem": [[113, 1, 1, "", "__init__"], [113, 1, 1, "", "__str__"], [113, 1, 1, "", "express_unit"]], "openmm.vec3": [[114, 0, 1, "", "Vec3"]], "openmm.vec3.Vec3": [[114, 1, 1, "", "__add__"], [114, 1, 1, "", "__div__"], [114, 1, 1, "", "__getnewargs__"], [114, 1, 1, "", "__init__"], [114, 1, 1, "", "__mul__"], [114, 1, 1, "", "__new__"], [114, 1, 1, "", "__radd__"], [114, 1, 1, "", "__rmul__"], [114, 1, 1, "", "__rsub__"], [114, 1, 1, "", "__sub__"], [114, 1, 1, "", "__truediv__"], [114, 1, 1, "", "count"], [114, 1, 1, "", "index"], [114, 3, 1, "", "x"], [114, 3, 1, "", "y"], [114, 3, 1, "", "z"]]}, "objtypes": {"0": "py:class", "1": "py:method", "2": "py:property", "3": "py:attribute"}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "method", "Python method"], "2": ["py", "property", "Python property"], "3": ["py", "attribute", "Python attribute"]}, "titleterms": {"applic": 0, "layer": [0, 116], "loader": 0, "setup": 0, "represent": 0, "manipul": 0, "simul": [0, 28], "report": 0, "output": 0, "extra": [0, 116], "unit": [0, 112], "openmmexcept": 1, "amdforcegroupintegr": 2, "amdintegr": 3, "dualamdintegr": 4, "amberinpcrdfil": 5, "amberprmtopfil": 6, "charmmcrdfil": 7, "charmmrstfil": 8, "charmmparameterset": 9, "charmmpsffil": 10, "checkpointreport": 11, "dcdfile": 12, "dcdreport": 13, "desmonddmsfil": 14, "element": 15, "forcefield": 16, "gromacsgrofil": 17, "gromacstopfil": 18, "charmmpsfwarn": 19, "biasvari": 20, "metadynam": 21, "model": 22, "deprec": [22, 37, 39, 47, 48, 49, 53, 54, 56, 57, 60, 62, 63, 64, 90, 99, 106], "pdbfile": 23, "pdbreport": 24, "pdbxreport": 25, "pdbxfile": 26, "simulatedtemp": 27, "statedatareport": 29, "atom": 30, "chain": 31, "residu": 32, "topologi": 33, "mtsintegr": 34, "mtslangevinintegr": 35, "amoebageneralizedkirkwoodforc": 36, "amoebamultipoleforc": 37, "amoebatorsiontorsionforc": 38, "amoebavdwforc": 39, "amoebawcadispersionforc": 40, "andersenthermostat": 41, "brownianintegr": 42, "cmaptorsionforc": 43, "cmmotionremov": 44, "compoundintegr": 45, "context": 46, "continuous1dfunct": 47, "continuous2dfunct": 48, "continuous3dfunct": 49, "customangleforc": 50, "custombondforc": 51, "customcvforc": 52, "customcentroidbondforc": 53, "customcompoundbondforc": 54, "customexternalforc": 55, "customgbforc": 56, "customhbondforc": 57, "customintegr": 58, "custommanyparticleforc": 59, "customnonbondedforc": 60, "customtorsionforc": 61, "discrete1dfunct": 62, "discrete2dfunct": 63, "discrete3dfunct": 64, "drudeforc": 65, "drudeintegr": 66, "drudelangevinintegr": 67, "drudenosehooverintegr": 68, "drudescfintegr": 69, "forc": [70, 116], "gbsaobcforc": 71, "gayberneforc": 72, "harmonicangleforc": 73, "harmonicbondforc": 74, "hippononbondedforc": 75, "integr": [76, 116], "langevinintegr": 77, "langevinmiddleintegr": 78, "localcoordinatessit": 79, "localenergyminim": 80, "montecarloanisotropicbarostat": 81, "montecarlobarostat": 82, "montecarloflexiblebarostat": 83, "montecarlomembranebarostat": 84, "nonbondedforc": 85, "nosehooverchain": 86, "nosehooverintegr": 87, "outofplanesit": 88, "periodictorsionforc": 89, "platform": 90, "rbtorsionforc": 91, "rmsdforc": 92, "rpmdintegr": 93, "rpmdmontecarlobarostat": 94, "serializationnod": 95, "serializationproxi": 96, "state": 97, "system": 98, "tabulatedfunct": 99, "threeparticleaveragesit": 100, "twoparticleaveragesit": 101, "variablelangevinintegr": 102, "variableverletintegr": 103, "verletintegr": 104, "virtualsit": 105, "xmlserial": 106, "basedimens": 107, "baseunit": 108, "siprefix": 109, "quantiti": 110, "scaledunit": 111, "unitsystem": 113, "vec3": 114, "openmm": 115, "python": 115, "api": 115, "librari": 116, "core": 116, "object": 116}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx": 57}, "alltitles": {"Application Layer": [[0, "application-layer"]], "Loaders and Setup": [[0, "loaders-and-setup"]], "Representation and Manipulation": [[0, "representation-and-manipulation"]], "Simulation": [[0, "simulation"], [28, "simulation"]], "Reporting Output": [[0, "reporting-output"]], "Extras": [[0, "extras"], [116, "extras"]], "Units": [[0, "units"]], "OpenMMException": [[1, "openmmexception"]], "AMDForceGroupIntegrator": [[2, "amdforcegroupintegrator"]], "AMDIntegrator": [[3, "amdintegrator"]], "DualAMDIntegrator": [[4, "dualamdintegrator"]], "AmberInpcrdFile": [[5, "amberinpcrdfile"]], "AmberPrmtopFile": [[6, "amberprmtopfile"]], "CharmmCrdFile": [[7, "charmmcrdfile"]], "CharmmRstFile": [[8, "charmmrstfile"]], "CharmmParameterSet": [[9, "charmmparameterset"]], "CharmmPsfFile": [[10, "charmmpsffile"]], "CheckpointReporter": [[11, "checkpointreporter"]], "DCDFile": [[12, "dcdfile"]], "DCDReporter": [[13, "dcdreporter"]], "DesmondDMSFile": [[14, "desmonddmsfile"]], "Element": [[15, "element"]], "ForceField": [[16, "forcefield"]], "GromacsGroFile": [[17, "gromacsgrofile"]], "GromacsTopFile": [[18, "gromacstopfile"]], "CharmmPSFWarning": [[19, "charmmpsfwarning"]], "BiasVariable": [[20, "biasvariable"]], "Metadynamics": [[21, "metadynamics"]], "Modeller": [[22, "modeller"]], "Deprecated": [[22, null], [37, null], [37, null], [37, null], [37, null], [39, null], [39, null], [47, null], [48, null], [49, null], [53, null], [54, null], [54, null], [54, null], [54, null], [56, null], [56, null], [56, null], [56, null], [57, null], [57, null], [57, null], [57, null], [60, null], [60, null], [60, null], [60, null], [62, null], [63, null], [64, null], [90, null], [99, null], [106, null], [106, null]], "PDBFile": [[23, "pdbfile"]], "PDBReporter": [[24, "pdbreporter"]], "PDBxReporter": [[25, "pdbxreporter"]], "PDBxFile": [[26, "pdbxfile"]], "SimulatedTempering": [[27, "simulatedtempering"]], "StateDataReporter": [[29, "statedatareporter"]], "Atom": [[30, "atom"]], "Chain": [[31, "chain"]], "Residue": [[32, "residue"]], "Topology": [[33, "topology"]], "MTSIntegrator": [[34, "mtsintegrator"]], "MTSLangevinIntegrator": [[35, "mtslangevinintegrator"]], "AmoebaGeneralizedKirkwoodForce": [[36, "amoebageneralizedkirkwoodforce"]], "AmoebaMultipoleForce": [[37, "amoebamultipoleforce"]], "AmoebaTorsionTorsionForce": [[38, "amoebatorsiontorsionforce"]], "AmoebaVdwForce": [[39, "amoebavdwforce"]], "AmoebaWcaDispersionForce": [[40, "amoebawcadispersionforce"]], "AndersenThermostat": [[41, "andersenthermostat"]], "BrownianIntegrator": [[42, "brownianintegrator"]], "CMAPTorsionForce": [[43, "cmaptorsionforce"]], "CMMotionRemover": [[44, "cmmotionremover"]], "CompoundIntegrator": [[45, "compoundintegrator"]], "Context": [[46, "context"]], "Continuous1DFunction": [[47, "continuous1dfunction"]], "Continuous2DFunction": [[48, "continuous2dfunction"]], "Continuous3DFunction": [[49, "continuous3dfunction"]], "CustomAngleForce": [[50, "customangleforce"]], "CustomBondForce": [[51, "custombondforce"]], "CustomCVForce": [[52, "customcvforce"]], "CustomCentroidBondForce": [[53, "customcentroidbondforce"]], "CustomCompoundBondForce": [[54, "customcompoundbondforce"]], "CustomExternalForce": [[55, "customexternalforce"]], "CustomGBForce": [[56, "customgbforce"]], "CustomHbondForce": [[57, "customhbondforce"]], "CustomIntegrator": [[58, "customintegrator"]], "CustomManyParticleForce": [[59, "custommanyparticleforce"]], "CustomNonbondedForce": [[60, "customnonbondedforce"]], "CustomTorsionForce": [[61, "customtorsionforce"]], "Discrete1DFunction": [[62, "discrete1dfunction"]], "Discrete2DFunction": [[63, "discrete2dfunction"]], "Discrete3DFunction": [[64, "discrete3dfunction"]], "DrudeForce": [[65, "drudeforce"]], "DrudeIntegrator": [[66, "drudeintegrator"]], "DrudeLangevinIntegrator": [[67, "drudelangevinintegrator"]], "DrudeNoseHooverIntegrator": [[68, "drudenosehooverintegrator"]], "DrudeSCFIntegrator": [[69, "drudescfintegrator"]], "Force": [[70, "force"]], "GBSAOBCForce": [[71, "gbsaobcforce"]], "GayBerneForce": [[72, "gayberneforce"]], "HarmonicAngleForce": [[73, "harmonicangleforce"]], "HarmonicBondForce": [[74, "harmonicbondforce"]], "HippoNonbondedForce": [[75, "hippononbondedforce"]], "Integrator": [[76, "integrator"]], "LangevinIntegrator": [[77, "langevinintegrator"]], "LangevinMiddleIntegrator": [[78, "langevinmiddleintegrator"]], "LocalCoordinatesSite": [[79, "localcoordinatessite"]], "LocalEnergyMinimizer": [[80, "localenergyminimizer"]], "MonteCarloAnisotropicBarostat": [[81, "montecarloanisotropicbarostat"]], "MonteCarloBarostat": [[82, "montecarlobarostat"]], "MonteCarloFlexibleBarostat": [[83, "montecarloflexiblebarostat"]], "MonteCarloMembraneBarostat": [[84, "montecarlomembranebarostat"]], "NonbondedForce": [[85, "nonbondedforce"]], "NoseHooverChain": [[86, "nosehooverchain"]], "NoseHooverIntegrator": [[87, "nosehooverintegrator"]], "OutOfPlaneSite": [[88, "outofplanesite"]], "PeriodicTorsionForce": [[89, "periodictorsionforce"]], "Platform": [[90, "platform"]], "RBTorsionForce": [[91, "rbtorsionforce"]], "RMSDForce": [[92, "rmsdforce"]], "RPMDIntegrator": [[93, "rpmdintegrator"]], "RPMDMonteCarloBarostat": [[94, "rpmdmontecarlobarostat"]], "SerializationNode": [[95, "serializationnode"]], "SerializationProxy": [[96, "serializationproxy"]], "State": [[97, "state"]], "System": [[98, "system"]], "TabulatedFunction": [[99, "tabulatedfunction"]], "ThreeParticleAverageSite": [[100, "threeparticleaveragesite"]], "TwoParticleAverageSite": [[101, "twoparticleaveragesite"]], "VariableLangevinIntegrator": [[102, "variablelangevinintegrator"]], "VariableVerletIntegrator": [[103, "variableverletintegrator"]], "VerletIntegrator": [[104, "verletintegrator"]], "VirtualSite": [[105, "virtualsite"]], "XmlSerializer": [[106, "xmlserializer"]], "BaseDimension": [[107, "basedimension"]], "BaseUnit": [[108, "baseunit"]], "SiPrefix": [[109, "siprefix"]], "Quantity": [[110, "quantity"]], "ScaledUnit": [[111, "scaledunit"]], "Unit": [[112, "unit"]], "UnitSystem": [[113, "unitsystem"]], "Vec3": [[114, "vec3"]], "OpenMM Python API": [[115, "openmm-python-api"]], "Library Layer": [[116, "library-layer"]], "Core Objects": [[116, "core-objects"]], "Forces": [[116, "forces"]], "Integrators": [[116, "integrators"]]}, "indexentries": {"openmmexception (class in openmm)": [[1, "openmm.OpenMMException"]], "__init__() (openmm.openmmexception method)": [[1, "openmm.OpenMMException.__init__"]], "add_note() (openmm.openmmexception method)": [[1, "openmm.OpenMMException.add_note"]], "with_traceback() (openmm.openmmexception method)": [[1, "openmm.OpenMMException.with_traceback"]], "amdforcegroupintegrator (class in openmm.amd)": [[2, "openmm.amd.AMDForceGroupIntegrator"]], "__init__() (openmm.amd.amdforcegroupintegrator method)": [[2, "openmm.amd.AMDForceGroupIntegrator.__init__"]], "addcomputeglobal() (openmm.amd.amdforcegroupintegrator method)": [[2, "openmm.amd.AMDForceGroupIntegrator.addComputeGlobal"]], "addcomputeperdof() (openmm.amd.amdforcegroupintegrator method)": [[2, "openmm.amd.AMDForceGroupIntegrator.addComputePerDof"]], "addcomputesum() (openmm.amd.amdforcegroupintegrator method)": [[2, "openmm.amd.AMDForceGroupIntegrator.addComputeSum"]], "addconstrainpositions() (openmm.amd.amdforcegroupintegrator method)": [[2, "openmm.amd.AMDForceGroupIntegrator.addConstrainPositions"]], "addconstrainvelocities() (openmm.amd.amdforcegroupintegrator method)": [[2, "openmm.amd.AMDForceGroupIntegrator.addConstrainVelocities"]], "addglobalvariable() (openmm.amd.amdforcegroupintegrator method)": [[2, "openmm.amd.AMDForceGroupIntegrator.addGlobalVariable"]], "addperdofvariable() (openmm.amd.amdforcegroupintegrator method)": [[2, "openmm.amd.AMDForceGroupIntegrator.addPerDofVariable"]], "addtabulatedfunction() (openmm.amd.amdforcegroupintegrator method)": [[2, "openmm.amd.AMDForceGroupIntegrator.addTabulatedFunction"]], "addupdatecontextstate() (openmm.amd.amdforcegroupintegrator method)": [[2, "openmm.amd.AMDForceGroupIntegrator.addUpdateContextState"]], "beginifblock() (openmm.amd.amdforcegroupintegrator method)": [[2, "openmm.amd.AMDForceGroupIntegrator.beginIfBlock"]], "beginwhileblock() (openmm.amd.amdforcegroupintegrator method)": [[2, "openmm.amd.AMDForceGroupIntegrator.beginWhileBlock"]], "endblock() (openmm.amd.amdforcegroupintegrator method)": [[2, "openmm.amd.AMDForceGroupIntegrator.endBlock"]], "getalphagroup() (openmm.amd.amdforcegroupintegrator method)": [[2, "openmm.amd.AMDForceGroupIntegrator.getAlphaGroup"]], "getcomputationstep() (openmm.amd.amdforcegroupintegrator method)": [[2, "openmm.amd.AMDForceGroupIntegrator.getComputationStep"]], "getconstrainttolerance() (openmm.amd.amdforcegroupintegrator method)": [[2, "openmm.amd.AMDForceGroupIntegrator.getConstraintTolerance"]], "getegroup() (openmm.amd.amdforcegroupintegrator method)": [[2, "openmm.amd.AMDForceGroupIntegrator.getEGroup"]], "geteffectiveenergy() (openmm.amd.amdforcegroupintegrator method)": [[2, "openmm.amd.AMDForceGroupIntegrator.getEffectiveEnergy"]], "getglobalvariable() (openmm.amd.amdforcegroupintegrator method)": [[2, "openmm.amd.AMDForceGroupIntegrator.getGlobalVariable"]], "getglobalvariablebyname() (openmm.amd.amdforcegroupintegrator method)": [[2, "openmm.amd.AMDForceGroupIntegrator.getGlobalVariableByName"]], "getglobalvariablename() (openmm.amd.amdforcegroupintegrator method)": [[2, "openmm.amd.AMDForceGroupIntegrator.getGlobalVariableName"]], "getintegrationforcegroups() (openmm.amd.amdforcegroupintegrator method)": [[2, "openmm.amd.AMDForceGroupIntegrator.getIntegrationForceGroups"]], "getkineticenergyexpression() (openmm.amd.amdforcegroupintegrator method)": [[2, "openmm.amd.AMDForceGroupIntegrator.getKineticEnergyExpression"]], "getnumcomputations() (openmm.amd.amdforcegroupintegrator method)": [[2, "openmm.amd.AMDForceGroupIntegrator.getNumComputations"]], "getnumglobalvariables() (openmm.amd.amdforcegroupintegrator method)": [[2, "openmm.amd.AMDForceGroupIntegrator.getNumGlobalVariables"]], "getnumperdofvariables() (openmm.amd.amdforcegroupintegrator method)": [[2, "openmm.amd.AMDForceGroupIntegrator.getNumPerDofVariables"]], "getnumtabulatedfunctions() (openmm.amd.amdforcegroupintegrator method)": [[2, "openmm.amd.AMDForceGroupIntegrator.getNumTabulatedFunctions"]], "getperdofvariable() (openmm.amd.amdforcegroupintegrator method)": [[2, "openmm.amd.AMDForceGroupIntegrator.getPerDofVariable"]], "getperdofvariablebyname() (openmm.amd.amdforcegroupintegrator method)": [[2, "openmm.amd.AMDForceGroupIntegrator.getPerDofVariableByName"]], "getperdofvariablename() (openmm.amd.amdforcegroupintegrator method)": [[2, "openmm.amd.AMDForceGroupIntegrator.getPerDofVariableName"]], "getrandomnumberseed() (openmm.amd.amdforcegroupintegrator method)": [[2, "openmm.amd.AMDForceGroupIntegrator.getRandomNumberSeed"]], "getstepsize() (openmm.amd.amdforcegroupintegrator method)": [[2, "openmm.amd.AMDForceGroupIntegrator.getStepSize"]], "gettabulatedfunction() (openmm.amd.amdforcegroupintegrator method)": [[2, "openmm.amd.AMDForceGroupIntegrator.getTabulatedFunction"]], "gettabulatedfunctionname() (openmm.amd.amdforcegroupintegrator method)": [[2, "openmm.amd.AMDForceGroupIntegrator.getTabulatedFunctionName"]], "setalphagroup() (openmm.amd.amdforcegroupintegrator method)": [[2, "openmm.amd.AMDForceGroupIntegrator.setAlphaGroup"]], "setconstrainttolerance() (openmm.amd.amdforcegroupintegrator method)": [[2, "openmm.amd.AMDForceGroupIntegrator.setConstraintTolerance"]], "setegroup() (openmm.amd.amdforcegroupintegrator method)": [[2, "openmm.amd.AMDForceGroupIntegrator.setEGroup"]], "setglobalvariable() (openmm.amd.amdforcegroupintegrator method)": [[2, "openmm.amd.AMDForceGroupIntegrator.setGlobalVariable"]], "setglobalvariablebyname() (openmm.amd.amdforcegroupintegrator method)": [[2, "openmm.amd.AMDForceGroupIntegrator.setGlobalVariableByName"]], "setintegrationforcegroups() (openmm.amd.amdforcegroupintegrator method)": [[2, "openmm.amd.AMDForceGroupIntegrator.setIntegrationForceGroups"]], "setkineticenergyexpression() (openmm.amd.amdforcegroupintegrator method)": [[2, "openmm.amd.AMDForceGroupIntegrator.setKineticEnergyExpression"]], "setperdofvariable() (openmm.amd.amdforcegroupintegrator method)": [[2, "openmm.amd.AMDForceGroupIntegrator.setPerDofVariable"]], "setperdofvariablebyname() (openmm.amd.amdforcegroupintegrator method)": [[2, "openmm.amd.AMDForceGroupIntegrator.setPerDofVariableByName"]], "setrandomnumberseed() (openmm.amd.amdforcegroupintegrator method)": [[2, "openmm.amd.AMDForceGroupIntegrator.setRandomNumberSeed"]], "setstepsize() (openmm.amd.amdforcegroupintegrator method)": [[2, "openmm.amd.AMDForceGroupIntegrator.setStepSize"]], "step() (openmm.amd.amdforcegroupintegrator method)": [[2, "openmm.amd.AMDForceGroupIntegrator.step"]], "thisown (openmm.amd.amdforcegroupintegrator property)": [[2, "openmm.amd.AMDForceGroupIntegrator.thisown"]], "amdintegrator (class in openmm.amd)": [[3, "openmm.amd.AMDIntegrator"]], "__init__() (openmm.amd.amdintegrator method)": [[3, "openmm.amd.AMDIntegrator.__init__"]], "addcomputeglobal() (openmm.amd.amdintegrator method)": [[3, "openmm.amd.AMDIntegrator.addComputeGlobal"]], "addcomputeperdof() (openmm.amd.amdintegrator method)": [[3, "openmm.amd.AMDIntegrator.addComputePerDof"]], "addcomputesum() (openmm.amd.amdintegrator method)": [[3, "openmm.amd.AMDIntegrator.addComputeSum"]], "addconstrainpositions() (openmm.amd.amdintegrator method)": [[3, "openmm.amd.AMDIntegrator.addConstrainPositions"]], "addconstrainvelocities() (openmm.amd.amdintegrator method)": [[3, "openmm.amd.AMDIntegrator.addConstrainVelocities"]], "addglobalvariable() (openmm.amd.amdintegrator method)": [[3, "openmm.amd.AMDIntegrator.addGlobalVariable"]], "addperdofvariable() (openmm.amd.amdintegrator method)": [[3, "openmm.amd.AMDIntegrator.addPerDofVariable"]], "addtabulatedfunction() (openmm.amd.amdintegrator method)": [[3, "openmm.amd.AMDIntegrator.addTabulatedFunction"]], "addupdatecontextstate() (openmm.amd.amdintegrator method)": [[3, "openmm.amd.AMDIntegrator.addUpdateContextState"]], "beginifblock() (openmm.amd.amdintegrator method)": [[3, "openmm.amd.AMDIntegrator.beginIfBlock"]], "beginwhileblock() (openmm.amd.amdintegrator method)": [[3, "openmm.amd.AMDIntegrator.beginWhileBlock"]], "endblock() (openmm.amd.amdintegrator method)": [[3, "openmm.amd.AMDIntegrator.endBlock"]], "getalpha() (openmm.amd.amdintegrator method)": [[3, "openmm.amd.AMDIntegrator.getAlpha"]], "getcomputationstep() (openmm.amd.amdintegrator method)": [[3, "openmm.amd.AMDIntegrator.getComputationStep"]], "getconstrainttolerance() (openmm.amd.amdintegrator method)": [[3, "openmm.amd.AMDIntegrator.getConstraintTolerance"]], "gete() (openmm.amd.amdintegrator method)": [[3, "openmm.amd.AMDIntegrator.getE"]], "geteffectiveenergy() (openmm.amd.amdintegrator method)": [[3, "openmm.amd.AMDIntegrator.getEffectiveEnergy"]], "getglobalvariable() (openmm.amd.amdintegrator method)": [[3, "openmm.amd.AMDIntegrator.getGlobalVariable"]], "getglobalvariablebyname() (openmm.amd.amdintegrator method)": [[3, "openmm.amd.AMDIntegrator.getGlobalVariableByName"]], "getglobalvariablename() (openmm.amd.amdintegrator method)": [[3, "openmm.amd.AMDIntegrator.getGlobalVariableName"]], "getintegrationforcegroups() (openmm.amd.amdintegrator method)": [[3, "openmm.amd.AMDIntegrator.getIntegrationForceGroups"]], "getkineticenergyexpression() (openmm.amd.amdintegrator method)": [[3, "openmm.amd.AMDIntegrator.getKineticEnergyExpression"]], "getnumcomputations() (openmm.amd.amdintegrator method)": [[3, "openmm.amd.AMDIntegrator.getNumComputations"]], "getnumglobalvariables() (openmm.amd.amdintegrator method)": [[3, "openmm.amd.AMDIntegrator.getNumGlobalVariables"]], "getnumperdofvariables() (openmm.amd.amdintegrator method)": [[3, "openmm.amd.AMDIntegrator.getNumPerDofVariables"]], "getnumtabulatedfunctions() (openmm.amd.amdintegrator method)": [[3, "openmm.amd.AMDIntegrator.getNumTabulatedFunctions"]], "getperdofvariable() (openmm.amd.amdintegrator method)": [[3, "openmm.amd.AMDIntegrator.getPerDofVariable"]], "getperdofvariablebyname() (openmm.amd.amdintegrator method)": [[3, "openmm.amd.AMDIntegrator.getPerDofVariableByName"]], "getperdofvariablename() (openmm.amd.amdintegrator method)": [[3, "openmm.amd.AMDIntegrator.getPerDofVariableName"]], "getrandomnumberseed() (openmm.amd.amdintegrator method)": [[3, "openmm.amd.AMDIntegrator.getRandomNumberSeed"]], "getstepsize() (openmm.amd.amdintegrator method)": [[3, "openmm.amd.AMDIntegrator.getStepSize"]], "gettabulatedfunction() (openmm.amd.amdintegrator method)": [[3, "openmm.amd.AMDIntegrator.getTabulatedFunction"]], "gettabulatedfunctionname() (openmm.amd.amdintegrator method)": [[3, "openmm.amd.AMDIntegrator.getTabulatedFunctionName"]], "setalpha() (openmm.amd.amdintegrator method)": [[3, "openmm.amd.AMDIntegrator.setAlpha"]], "setconstrainttolerance() (openmm.amd.amdintegrator method)": [[3, "openmm.amd.AMDIntegrator.setConstraintTolerance"]], "sete() (openmm.amd.amdintegrator method)": [[3, "openmm.amd.AMDIntegrator.setE"]], "setglobalvariable() (openmm.amd.amdintegrator method)": [[3, "openmm.amd.AMDIntegrator.setGlobalVariable"]], "setglobalvariablebyname() (openmm.amd.amdintegrator method)": [[3, "openmm.amd.AMDIntegrator.setGlobalVariableByName"]], "setintegrationforcegroups() (openmm.amd.amdintegrator method)": [[3, "openmm.amd.AMDIntegrator.setIntegrationForceGroups"]], "setkineticenergyexpression() (openmm.amd.amdintegrator method)": [[3, "openmm.amd.AMDIntegrator.setKineticEnergyExpression"]], "setperdofvariable() (openmm.amd.amdintegrator method)": [[3, "openmm.amd.AMDIntegrator.setPerDofVariable"]], "setperdofvariablebyname() (openmm.amd.amdintegrator method)": [[3, "openmm.amd.AMDIntegrator.setPerDofVariableByName"]], "setrandomnumberseed() (openmm.amd.amdintegrator method)": [[3, "openmm.amd.AMDIntegrator.setRandomNumberSeed"]], "setstepsize() (openmm.amd.amdintegrator method)": [[3, "openmm.amd.AMDIntegrator.setStepSize"]], "step() (openmm.amd.amdintegrator method)": [[3, "openmm.amd.AMDIntegrator.step"]], "thisown (openmm.amd.amdintegrator property)": [[3, "openmm.amd.AMDIntegrator.thisown"]], "dualamdintegrator (class in openmm.amd)": [[4, "openmm.amd.DualAMDIntegrator"]], "__init__() (openmm.amd.dualamdintegrator method)": [[4, "openmm.amd.DualAMDIntegrator.__init__"]], "addcomputeglobal() (openmm.amd.dualamdintegrator method)": [[4, "openmm.amd.DualAMDIntegrator.addComputeGlobal"]], "addcomputeperdof() (openmm.amd.dualamdintegrator method)": [[4, "openmm.amd.DualAMDIntegrator.addComputePerDof"]], "addcomputesum() (openmm.amd.dualamdintegrator method)": [[4, "openmm.amd.DualAMDIntegrator.addComputeSum"]], "addconstrainpositions() (openmm.amd.dualamdintegrator method)": [[4, "openmm.amd.DualAMDIntegrator.addConstrainPositions"]], "addconstrainvelocities() (openmm.amd.dualamdintegrator method)": [[4, "openmm.amd.DualAMDIntegrator.addConstrainVelocities"]], "addglobalvariable() (openmm.amd.dualamdintegrator method)": [[4, "openmm.amd.DualAMDIntegrator.addGlobalVariable"]], "addperdofvariable() (openmm.amd.dualamdintegrator method)": [[4, "openmm.amd.DualAMDIntegrator.addPerDofVariable"]], "addtabulatedfunction() (openmm.amd.dualamdintegrator method)": [[4, "openmm.amd.DualAMDIntegrator.addTabulatedFunction"]], "addupdatecontextstate() (openmm.amd.dualamdintegrator method)": [[4, "openmm.amd.DualAMDIntegrator.addUpdateContextState"]], "beginifblock() (openmm.amd.dualamdintegrator method)": [[4, "openmm.amd.DualAMDIntegrator.beginIfBlock"]], "beginwhileblock() (openmm.amd.dualamdintegrator method)": [[4, "openmm.amd.DualAMDIntegrator.beginWhileBlock"]], "endblock() (openmm.amd.dualamdintegrator method)": [[4, "openmm.amd.DualAMDIntegrator.endBlock"]], "getalphagroup() (openmm.amd.dualamdintegrator method)": [[4, "openmm.amd.DualAMDIntegrator.getAlphaGroup"]], "getalphatotal() (openmm.amd.dualamdintegrator method)": [[4, "openmm.amd.DualAMDIntegrator.getAlphaTotal"]], "getcomputationstep() (openmm.amd.dualamdintegrator method)": [[4, "openmm.amd.DualAMDIntegrator.getComputationStep"]], "getconstrainttolerance() (openmm.amd.dualamdintegrator method)": [[4, "openmm.amd.DualAMDIntegrator.getConstraintTolerance"]], "getegroup() (openmm.amd.dualamdintegrator method)": [[4, "openmm.amd.DualAMDIntegrator.getEGroup"]], "getetotal() (openmm.amd.dualamdintegrator method)": [[4, "openmm.amd.DualAMDIntegrator.getETotal"]], "geteffectiveenergy() (openmm.amd.dualamdintegrator method)": [[4, "openmm.amd.DualAMDIntegrator.getEffectiveEnergy"]], "getglobalvariable() (openmm.amd.dualamdintegrator method)": [[4, "openmm.amd.DualAMDIntegrator.getGlobalVariable"]], "getglobalvariablebyname() (openmm.amd.dualamdintegrator method)": [[4, "openmm.amd.DualAMDIntegrator.getGlobalVariableByName"]], "getglobalvariablename() (openmm.amd.dualamdintegrator method)": [[4, "openmm.amd.DualAMDIntegrator.getGlobalVariableName"]], "getintegrationforcegroups() (openmm.amd.dualamdintegrator method)": [[4, "openmm.amd.DualAMDIntegrator.getIntegrationForceGroups"]], "getkineticenergyexpression() (openmm.amd.dualamdintegrator method)": [[4, "openmm.amd.DualAMDIntegrator.getKineticEnergyExpression"]], "getnumcomputations() (openmm.amd.dualamdintegrator method)": [[4, "openmm.amd.DualAMDIntegrator.getNumComputations"]], "getnumglobalvariables() (openmm.amd.dualamdintegrator method)": [[4, "openmm.amd.DualAMDIntegrator.getNumGlobalVariables"]], "getnumperdofvariables() (openmm.amd.dualamdintegrator method)": [[4, "openmm.amd.DualAMDIntegrator.getNumPerDofVariables"]], "getnumtabulatedfunctions() (openmm.amd.dualamdintegrator method)": [[4, "openmm.amd.DualAMDIntegrator.getNumTabulatedFunctions"]], "getperdofvariable() (openmm.amd.dualamdintegrator method)": [[4, "openmm.amd.DualAMDIntegrator.getPerDofVariable"]], "getperdofvariablebyname() (openmm.amd.dualamdintegrator method)": [[4, "openmm.amd.DualAMDIntegrator.getPerDofVariableByName"]], "getperdofvariablename() (openmm.amd.dualamdintegrator method)": [[4, "openmm.amd.DualAMDIntegrator.getPerDofVariableName"]], "getrandomnumberseed() (openmm.amd.dualamdintegrator method)": [[4, "openmm.amd.DualAMDIntegrator.getRandomNumberSeed"]], "getstepsize() (openmm.amd.dualamdintegrator method)": [[4, "openmm.amd.DualAMDIntegrator.getStepSize"]], "gettabulatedfunction() (openmm.amd.dualamdintegrator method)": [[4, "openmm.amd.DualAMDIntegrator.getTabulatedFunction"]], "gettabulatedfunctionname() (openmm.amd.dualamdintegrator method)": [[4, "openmm.amd.DualAMDIntegrator.getTabulatedFunctionName"]], "setalphagroup() (openmm.amd.dualamdintegrator method)": [[4, "openmm.amd.DualAMDIntegrator.setAlphaGroup"]], "setalphatotal() (openmm.amd.dualamdintegrator method)": [[4, "openmm.amd.DualAMDIntegrator.setAlphaTotal"]], "setconstrainttolerance() (openmm.amd.dualamdintegrator method)": [[4, "openmm.amd.DualAMDIntegrator.setConstraintTolerance"]], "setegroup() (openmm.amd.dualamdintegrator method)": [[4, "openmm.amd.DualAMDIntegrator.setEGroup"]], "setetotal() (openmm.amd.dualamdintegrator method)": [[4, "openmm.amd.DualAMDIntegrator.setETotal"]], "setglobalvariable() (openmm.amd.dualamdintegrator method)": [[4, "openmm.amd.DualAMDIntegrator.setGlobalVariable"]], "setglobalvariablebyname() (openmm.amd.dualamdintegrator method)": [[4, "openmm.amd.DualAMDIntegrator.setGlobalVariableByName"]], "setintegrationforcegroups() (openmm.amd.dualamdintegrator method)": [[4, "openmm.amd.DualAMDIntegrator.setIntegrationForceGroups"]], "setkineticenergyexpression() (openmm.amd.dualamdintegrator method)": [[4, "openmm.amd.DualAMDIntegrator.setKineticEnergyExpression"]], "setperdofvariable() (openmm.amd.dualamdintegrator method)": [[4, "openmm.amd.DualAMDIntegrator.setPerDofVariable"]], "setperdofvariablebyname() (openmm.amd.dualamdintegrator method)": [[4, "openmm.amd.DualAMDIntegrator.setPerDofVariableByName"]], "setrandomnumberseed() (openmm.amd.dualamdintegrator method)": [[4, "openmm.amd.DualAMDIntegrator.setRandomNumberSeed"]], "setstepsize() (openmm.amd.dualamdintegrator method)": [[4, "openmm.amd.DualAMDIntegrator.setStepSize"]], "step() (openmm.amd.dualamdintegrator method)": [[4, "openmm.amd.DualAMDIntegrator.step"]], "thisown (openmm.amd.dualamdintegrator property)": [[4, "openmm.amd.DualAMDIntegrator.thisown"]], "amberinpcrdfile (class in openmm.app.amberinpcrdfile)": [[5, "openmm.app.amberinpcrdfile.AmberInpcrdFile"]], "__init__() (openmm.app.amberinpcrdfile.amberinpcrdfile method)": [[5, "openmm.app.amberinpcrdfile.AmberInpcrdFile.__init__"]], "getboxvectors() (openmm.app.amberinpcrdfile.amberinpcrdfile method)": [[5, "openmm.app.amberinpcrdfile.AmberInpcrdFile.getBoxVectors"]], "getpositions() (openmm.app.amberinpcrdfile.amberinpcrdfile method)": [[5, "openmm.app.amberinpcrdfile.AmberInpcrdFile.getPositions"]], "getvelocities() (openmm.app.amberinpcrdfile.amberinpcrdfile method)": [[5, "openmm.app.amberinpcrdfile.AmberInpcrdFile.getVelocities"]], "amberprmtopfile (class in openmm.app.amberprmtopfile)": [[6, "openmm.app.amberprmtopfile.AmberPrmtopFile"]], "__init__() (openmm.app.amberprmtopfile.amberprmtopfile method)": [[6, "openmm.app.amberprmtopfile.AmberPrmtopFile.__init__"]], "createsystem() (openmm.app.amberprmtopfile.amberprmtopfile method)": [[6, "openmm.app.amberprmtopfile.AmberPrmtopFile.createSystem"]], "charmmcrdfile (class in openmm.app.charmmcrdfiles)": [[7, "openmm.app.charmmcrdfiles.CharmmCrdFile"]], "__init__() (openmm.app.charmmcrdfiles.charmmcrdfile method)": [[7, "openmm.app.charmmcrdfiles.CharmmCrdFile.__init__"]], "natom (openmm.app.charmmcrdfiles.charmmcrdfile attribute)": [[7, "openmm.app.charmmcrdfiles.CharmmCrdFile.natom"]], "positions (openmm.app.charmmcrdfiles.charmmcrdfile attribute)": [[7, "openmm.app.charmmcrdfiles.CharmmCrdFile.positions"]], "resname (openmm.app.charmmcrdfiles.charmmcrdfile attribute)": [[7, "openmm.app.charmmcrdfiles.CharmmCrdFile.resname"]], "charmmrstfile (class in openmm.app.charmmcrdfiles)": [[8, "openmm.app.charmmcrdfiles.CharmmRstFile"]], "__init__() (openmm.app.charmmcrdfiles.charmmrstfile method)": [[8, "openmm.app.charmmcrdfiles.CharmmRstFile.__init__"]], "natom (openmm.app.charmmcrdfiles.charmmrstfile attribute)": [[8, "openmm.app.charmmcrdfiles.CharmmRstFile.natom"]], "positions (openmm.app.charmmcrdfiles.charmmrstfile attribute)": [[8, "openmm.app.charmmcrdfiles.CharmmRstFile.positions"]], "positionsold (openmm.app.charmmcrdfiles.charmmrstfile attribute)": [[8, "openmm.app.charmmcrdfiles.CharmmRstFile.positionsold"]], "resname (openmm.app.charmmcrdfiles.charmmrstfile attribute)": [[8, "openmm.app.charmmcrdfiles.CharmmRstFile.resname"]], "velocities (openmm.app.charmmcrdfiles.charmmrstfile attribute)": [[8, "openmm.app.charmmcrdfiles.CharmmRstFile.velocities"]], "charmmparameterset (class in openmm.app.charmmparameterset)": [[9, "openmm.app.charmmparameterset.CharmmParameterSet"]], "__init__() (openmm.app.charmmparameterset.charmmparameterset method)": [[9, "openmm.app.charmmparameterset.CharmmParameterSet.__init__"]], "condense() (openmm.app.charmmparameterset.charmmparameterset method)": [[9, "openmm.app.charmmparameterset.CharmmParameterSet.condense"]], "helpful (openmm.app.charmmparameterset.charmmparameterset attribute)": [[9, "openmm.app.charmmparameterset.CharmmParameterSet.helpful"]], "loadset() (openmm.app.charmmparameterset.charmmparameterset class method)": [[9, "openmm.app.charmmparameterset.CharmmParameterSet.loadSet"]], "readparameterfile() (openmm.app.charmmparameterset.charmmparameterset method)": [[9, "openmm.app.charmmparameterset.CharmmParameterSet.readParameterFile"]], "readstreamfile() (openmm.app.charmmparameterset.charmmparameterset method)": [[9, "openmm.app.charmmparameterset.CharmmParameterSet.readStreamFile"]], "readtopologyfile() (openmm.app.charmmparameterset.charmmparameterset method)": [[9, "openmm.app.charmmparameterset.CharmmParameterSet.readTopologyFile"]], "charmmpsffile (class in openmm.app.charmmpsffile)": [[10, "openmm.app.charmmpsffile.CharmmPsfFile"]], "__init__() (openmm.app.charmmpsffile.charmmpsffile method)": [[10, "openmm.app.charmmpsffile.CharmmPsfFile.__init__"]], "boxlengths (openmm.app.charmmpsffile.charmmpsffile property)": [[10, "openmm.app.charmmpsffile.CharmmPsfFile.boxLengths"]], "boxvectors (openmm.app.charmmpsffile.charmmpsffile property)": [[10, "openmm.app.charmmpsffile.CharmmPsfFile.boxVectors"]], "createsystem() (openmm.app.charmmpsffile.charmmpsffile method)": [[10, "openmm.app.charmmpsffile.CharmmPsfFile.createSystem"]], "deletecmap() (openmm.app.charmmpsffile.charmmpsffile method)": [[10, "openmm.app.charmmpsffile.CharmmPsfFile.deleteCmap"]], "loadparameters() (openmm.app.charmmpsffile.charmmpsffile method)": [[10, "openmm.app.charmmpsffile.CharmmPsfFile.loadParameters"]], "setbox() (openmm.app.charmmpsffile.charmmpsffile method)": [[10, "openmm.app.charmmpsffile.CharmmPsfFile.setBox"]], "system (openmm.app.charmmpsffile.charmmpsffile property)": [[10, "openmm.app.charmmpsffile.CharmmPsfFile.system"]], "topology (openmm.app.charmmpsffile.charmmpsffile property)": [[10, "openmm.app.charmmpsffile.CharmmPsfFile.topology"]], "checkpointreporter (class in openmm.app.checkpointreporter)": [[11, "openmm.app.checkpointreporter.CheckpointReporter"]], "__init__() (openmm.app.checkpointreporter.checkpointreporter method)": [[11, "openmm.app.checkpointreporter.CheckpointReporter.__init__"]], "describenextreport() (openmm.app.checkpointreporter.checkpointreporter method)": [[11, "openmm.app.checkpointreporter.CheckpointReporter.describeNextReport"]], "report() (openmm.app.checkpointreporter.checkpointreporter method)": [[11, "openmm.app.checkpointreporter.CheckpointReporter.report"]], "dcdfile (class in openmm.app.dcdfile)": [[12, "openmm.app.dcdfile.DCDFile"]], "__init__() (openmm.app.dcdfile.dcdfile method)": [[12, "openmm.app.dcdfile.DCDFile.__init__"]], "writemodel() (openmm.app.dcdfile.dcdfile method)": [[12, "openmm.app.dcdfile.DCDFile.writeModel"]], "dcdreporter (class in openmm.app.dcdreporter)": [[13, "openmm.app.dcdreporter.DCDReporter"]], "__init__() (openmm.app.dcdreporter.dcdreporter method)": [[13, "openmm.app.dcdreporter.DCDReporter.__init__"]], "describenextreport() (openmm.app.dcdreporter.dcdreporter method)": [[13, "openmm.app.dcdreporter.DCDReporter.describeNextReport"]], "report() (openmm.app.dcdreporter.dcdreporter method)": [[13, "openmm.app.dcdreporter.DCDReporter.report"]], "desmonddmsfile (class in openmm.app.desmonddmsfile)": [[14, "openmm.app.desmonddmsfile.DesmondDMSFile"]], "__init__() (openmm.app.desmonddmsfile.desmonddmsfile method)": [[14, "openmm.app.desmonddmsfile.DesmondDMSFile.__init__"]], "close() (openmm.app.desmonddmsfile.desmonddmsfile method)": [[14, "openmm.app.desmonddmsfile.DesmondDMSFile.close"]], "createsystem() (openmm.app.desmonddmsfile.desmonddmsfile method)": [[14, "openmm.app.desmonddmsfile.DesmondDMSFile.createSystem"]], "getpositions() (openmm.app.desmonddmsfile.desmonddmsfile method)": [[14, "openmm.app.desmonddmsfile.DesmondDMSFile.getPositions"]], "getprovenance() (openmm.app.desmonddmsfile.desmonddmsfile method)": [[14, "openmm.app.desmonddmsfile.DesmondDMSFile.getProvenance"]], "gettopology() (openmm.app.desmonddmsfile.desmonddmsfile method)": [[14, "openmm.app.desmonddmsfile.DesmondDMSFile.getTopology"]], "getvelocities() (openmm.app.desmonddmsfile.desmonddmsfile method)": [[14, "openmm.app.desmonddmsfile.DesmondDMSFile.getVelocities"]], "setpositions() (openmm.app.desmonddmsfile.desmonddmsfile method)": [[14, "openmm.app.desmonddmsfile.DesmondDMSFile.setPositions"]], "setvelocities() (openmm.app.desmonddmsfile.desmonddmsfile method)": [[14, "openmm.app.desmonddmsfile.DesmondDMSFile.setVelocities"]], "element (class in openmm.app.element)": [[15, "openmm.app.element.Element"]], "__init__() (openmm.app.element.element method)": [[15, "openmm.app.element.Element.__init__"]], "getbymass() (openmm.app.element.element static method)": [[15, "openmm.app.element.Element.getByMass"]], "getbysymbol() (openmm.app.element.element static method)": [[15, "openmm.app.element.Element.getBySymbol"]], "forcefield (class in openmm.app.forcefield)": [[16, "openmm.app.forcefield.ForceField"]], "__init__() (openmm.app.forcefield.forcefield method)": [[16, "openmm.app.forcefield.ForceField.__init__"]], "createsystem() (openmm.app.forcefield.forcefield method)": [[16, "openmm.app.forcefield.ForceField.createSystem"]], "generatetemplatesforunmatchedresidues() (openmm.app.forcefield.forcefield method)": [[16, "openmm.app.forcefield.ForceField.generateTemplatesForUnmatchedResidues"]], "getgenerators() (openmm.app.forcefield.forcefield method)": [[16, "openmm.app.forcefield.ForceField.getGenerators"]], "getmatchingtemplates() (openmm.app.forcefield.forcefield method)": [[16, "openmm.app.forcefield.ForceField.getMatchingTemplates"]], "getunmatchedresidues() (openmm.app.forcefield.forcefield method)": [[16, "openmm.app.forcefield.ForceField.getUnmatchedResidues"]], "loadfile() (openmm.app.forcefield.forcefield method)": [[16, "openmm.app.forcefield.ForceField.loadFile"]], "registeratomtype() (openmm.app.forcefield.forcefield method)": [[16, "openmm.app.forcefield.ForceField.registerAtomType"]], "registergenerator() (openmm.app.forcefield.forcefield method)": [[16, "openmm.app.forcefield.ForceField.registerGenerator"]], "registerpatch() (openmm.app.forcefield.forcefield method)": [[16, "openmm.app.forcefield.ForceField.registerPatch"]], "registerresiduetemplate() (openmm.app.forcefield.forcefield method)": [[16, "openmm.app.forcefield.ForceField.registerResidueTemplate"]], "registerscript() (openmm.app.forcefield.forcefield method)": [[16, "openmm.app.forcefield.ForceField.registerScript"]], "registertemplategenerator() (openmm.app.forcefield.forcefield method)": [[16, "openmm.app.forcefield.ForceField.registerTemplateGenerator"]], "registertemplatematcher() (openmm.app.forcefield.forcefield method)": [[16, "openmm.app.forcefield.ForceField.registerTemplateMatcher"]], "registertemplatepatch() (openmm.app.forcefield.forcefield method)": [[16, "openmm.app.forcefield.ForceField.registerTemplatePatch"]], "gromacsgrofile (class in openmm.app.gromacsgrofile)": [[17, "openmm.app.gromacsgrofile.GromacsGroFile"]], "__init__() (openmm.app.gromacsgrofile.gromacsgrofile method)": [[17, "openmm.app.gromacsgrofile.GromacsGroFile.__init__"]], "getnumframes() (openmm.app.gromacsgrofile.gromacsgrofile method)": [[17, "openmm.app.gromacsgrofile.GromacsGroFile.getNumFrames"]], "getperiodicboxvectors() (openmm.app.gromacsgrofile.gromacsgrofile method)": [[17, "openmm.app.gromacsgrofile.GromacsGroFile.getPeriodicBoxVectors"]], "getpositions() (openmm.app.gromacsgrofile.gromacsgrofile method)": [[17, "openmm.app.gromacsgrofile.GromacsGroFile.getPositions"]], "getunitcelldimensions() (openmm.app.gromacsgrofile.gromacsgrofile method)": [[17, "openmm.app.gromacsgrofile.GromacsGroFile.getUnitCellDimensions"]], "gromacstopfile (class in openmm.app.gromacstopfile)": [[18, "openmm.app.gromacstopfile.GromacsTopFile"]], "__init__() (openmm.app.gromacstopfile.gromacstopfile method)": [[18, "openmm.app.gromacstopfile.GromacsTopFile.__init__"]], "createsystem() (openmm.app.gromacstopfile.gromacstopfile method)": [[18, "openmm.app.gromacstopfile.GromacsTopFile.createSystem"]], "charmmpsfwarning (class in openmm.app.internal.charmm.exceptions)": [[19, "openmm.app.internal.charmm.exceptions.CharmmPSFWarning"]], "__init__() (openmm.app.internal.charmm.exceptions.charmmpsfwarning method)": [[19, "openmm.app.internal.charmm.exceptions.CharmmPSFWarning.__init__"]], "add_note() (openmm.app.internal.charmm.exceptions.charmmpsfwarning method)": [[19, "openmm.app.internal.charmm.exceptions.CharmmPSFWarning.add_note"]], "with_traceback() (openmm.app.internal.charmm.exceptions.charmmpsfwarning method)": [[19, "openmm.app.internal.charmm.exceptions.CharmmPSFWarning.with_traceback"]], "biasvariable (class in openmm.app.metadynamics)": [[20, "openmm.app.metadynamics.BiasVariable"]], "__init__() (openmm.app.metadynamics.biasvariable method)": [[20, "openmm.app.metadynamics.BiasVariable.__init__"]], "metadynamics (class in openmm.app.metadynamics)": [[21, "openmm.app.metadynamics.Metadynamics"]], "__init__() (openmm.app.metadynamics.metadynamics method)": [[21, "openmm.app.metadynamics.Metadynamics.__init__"]], "getcollectivevariables() (openmm.app.metadynamics.metadynamics method)": [[21, "openmm.app.metadynamics.Metadynamics.getCollectiveVariables"]], "getfreeenergy() (openmm.app.metadynamics.metadynamics method)": [[21, "openmm.app.metadynamics.Metadynamics.getFreeEnergy"]], "step() (openmm.app.metadynamics.metadynamics method)": [[21, "openmm.app.metadynamics.Metadynamics.step"]], "modeller (class in openmm.app.modeller)": [[22, "openmm.app.modeller.Modeller"]], "__init__() (openmm.app.modeller.modeller method)": [[22, "openmm.app.modeller.Modeller.__init__"]], "add() (openmm.app.modeller.modeller method)": [[22, "openmm.app.modeller.Modeller.add"]], "addextraparticles() (openmm.app.modeller.modeller method)": [[22, "openmm.app.modeller.Modeller.addExtraParticles"]], "addhydrogens() (openmm.app.modeller.modeller method)": [[22, "openmm.app.modeller.Modeller.addHydrogens"]], "addmembrane() (openmm.app.modeller.modeller method)": [[22, "openmm.app.modeller.Modeller.addMembrane"]], "addsolvent() (openmm.app.modeller.modeller method)": [[22, "openmm.app.modeller.Modeller.addSolvent"]], "convertwater() (openmm.app.modeller.modeller method)": [[22, "openmm.app.modeller.Modeller.convertWater"]], "delete() (openmm.app.modeller.modeller method)": [[22, "openmm.app.modeller.Modeller.delete"]], "deletewater() (openmm.app.modeller.modeller method)": [[22, "openmm.app.modeller.Modeller.deleteWater"]], "getpositions() (openmm.app.modeller.modeller method)": [[22, "openmm.app.modeller.Modeller.getPositions"]], "gettopology() (openmm.app.modeller.modeller method)": [[22, "openmm.app.modeller.Modeller.getTopology"]], "loadhydrogendefinitions() (openmm.app.modeller.modeller static method)": [[22, "openmm.app.modeller.Modeller.loadHydrogenDefinitions"]], "pdbfile (class in openmm.app.pdbfile)": [[23, "openmm.app.pdbfile.PDBFile"]], "__init__() (openmm.app.pdbfile.pdbfile method)": [[23, "openmm.app.pdbfile.PDBFile.__init__"]], "getnumframes() (openmm.app.pdbfile.pdbfile method)": [[23, "openmm.app.pdbfile.PDBFile.getNumFrames"]], "getpositions() (openmm.app.pdbfile.pdbfile method)": [[23, "openmm.app.pdbfile.PDBFile.getPositions"]], "gettopology() (openmm.app.pdbfile.pdbfile method)": [[23, "openmm.app.pdbfile.PDBFile.getTopology"]], "writefile() (openmm.app.pdbfile.pdbfile static method)": [[23, "openmm.app.pdbfile.PDBFile.writeFile"]], "writefooter() (openmm.app.pdbfile.pdbfile static method)": [[23, "openmm.app.pdbfile.PDBFile.writeFooter"]], "writeheader() (openmm.app.pdbfile.pdbfile static method)": [[23, "openmm.app.pdbfile.PDBFile.writeHeader"]], "writemodel() (openmm.app.pdbfile.pdbfile static method)": [[23, "openmm.app.pdbfile.PDBFile.writeModel"]], "pdbreporter (class in openmm.app.pdbreporter)": [[24, "openmm.app.pdbreporter.PDBReporter"]], "__init__() (openmm.app.pdbreporter.pdbreporter method)": [[24, "openmm.app.pdbreporter.PDBReporter.__init__"]], "describenextreport() (openmm.app.pdbreporter.pdbreporter method)": [[24, "openmm.app.pdbreporter.PDBReporter.describeNextReport"]], "report() (openmm.app.pdbreporter.pdbreporter method)": [[24, "openmm.app.pdbreporter.PDBReporter.report"]], "pdbxreporter (class in openmm.app.pdbreporter)": [[25, "openmm.app.pdbreporter.PDBxReporter"]], "__init__() (openmm.app.pdbreporter.pdbxreporter method)": [[25, "openmm.app.pdbreporter.PDBxReporter.__init__"]], "describenextreport() (openmm.app.pdbreporter.pdbxreporter method)": [[25, "openmm.app.pdbreporter.PDBxReporter.describeNextReport"]], "report() (openmm.app.pdbreporter.pdbxreporter method)": [[25, "openmm.app.pdbreporter.PDBxReporter.report"]], "pdbxfile (class in openmm.app.pdbxfile)": [[26, "openmm.app.pdbxfile.PDBxFile"]], "__init__() (openmm.app.pdbxfile.pdbxfile method)": [[26, "openmm.app.pdbxfile.PDBxFile.__init__"]], "getnumframes() (openmm.app.pdbxfile.pdbxfile method)": [[26, "openmm.app.pdbxfile.PDBxFile.getNumFrames"]], "getpositions() (openmm.app.pdbxfile.pdbxfile method)": [[26, "openmm.app.pdbxfile.PDBxFile.getPositions"]], "gettopology() (openmm.app.pdbxfile.pdbxfile method)": [[26, "openmm.app.pdbxfile.PDBxFile.getTopology"]], "writefile() (openmm.app.pdbxfile.pdbxfile static method)": [[26, "openmm.app.pdbxfile.PDBxFile.writeFile"]], "writeheader() (openmm.app.pdbxfile.pdbxfile static method)": [[26, "openmm.app.pdbxfile.PDBxFile.writeHeader"]], "writemodel() (openmm.app.pdbxfile.pdbxfile static method)": [[26, "openmm.app.pdbxfile.PDBxFile.writeModel"]], "simulatedtempering (class in openmm.app.simulatedtempering)": [[27, "openmm.app.simulatedtempering.SimulatedTempering"]], "__init__() (openmm.app.simulatedtempering.simulatedtempering method)": [[27, "openmm.app.simulatedtempering.SimulatedTempering.__init__"]], "step() (openmm.app.simulatedtempering.simulatedtempering method)": [[27, "openmm.app.simulatedtempering.SimulatedTempering.step"]], "simulation (class in openmm.app.simulation)": [[28, "openmm.app.simulation.Simulation"]], "__init__() (openmm.app.simulation.simulation method)": [[28, "openmm.app.simulation.Simulation.__init__"]], "currentstep (openmm.app.simulation.simulation property)": [[28, "openmm.app.simulation.Simulation.currentStep"]], "loadcheckpoint() (openmm.app.simulation.simulation method)": [[28, "openmm.app.simulation.Simulation.loadCheckpoint"]], "loadstate() (openmm.app.simulation.simulation method)": [[28, "openmm.app.simulation.Simulation.loadState"]], "minimizeenergy() (openmm.app.simulation.simulation method)": [[28, "openmm.app.simulation.Simulation.minimizeEnergy"]], "runforclocktime() (openmm.app.simulation.simulation method)": [[28, "openmm.app.simulation.Simulation.runForClockTime"]], "savecheckpoint() (openmm.app.simulation.simulation method)": [[28, "openmm.app.simulation.Simulation.saveCheckpoint"]], "savestate() (openmm.app.simulation.simulation method)": [[28, "openmm.app.simulation.Simulation.saveState"]], "step() (openmm.app.simulation.simulation method)": [[28, "openmm.app.simulation.Simulation.step"]], "statedatareporter (class in openmm.app.statedatareporter)": [[29, "openmm.app.statedatareporter.StateDataReporter"]], "__init__() (openmm.app.statedatareporter.statedatareporter method)": [[29, "openmm.app.statedatareporter.StateDataReporter.__init__"]], "describenextreport() (openmm.app.statedatareporter.statedatareporter method)": [[29, "openmm.app.statedatareporter.StateDataReporter.describeNextReport"]], "report() (openmm.app.statedatareporter.statedatareporter method)": [[29, "openmm.app.statedatareporter.StateDataReporter.report"]], "atom (class in openmm.app.topology)": [[30, "openmm.app.topology.Atom"]], "__init__() (openmm.app.topology.atom method)": [[30, "openmm.app.topology.Atom.__init__"]], "chain (class in openmm.app.topology)": [[31, "openmm.app.topology.Chain"]], "__init__() (openmm.app.topology.chain method)": [[31, "openmm.app.topology.Chain.__init__"]], "atoms() (openmm.app.topology.chain method)": [[31, "openmm.app.topology.Chain.atoms"]], "residues() (openmm.app.topology.chain method)": [[31, "openmm.app.topology.Chain.residues"]], "residue (class in openmm.app.topology)": [[32, "openmm.app.topology.Residue"]], "__init__() (openmm.app.topology.residue method)": [[32, "openmm.app.topology.Residue.__init__"]], "atoms() (openmm.app.topology.residue method)": [[32, "openmm.app.topology.Residue.atoms"]], "bonds() (openmm.app.topology.residue method)": [[32, "openmm.app.topology.Residue.bonds"]], "external_bonds() (openmm.app.topology.residue method)": [[32, "openmm.app.topology.Residue.external_bonds"]], "internal_bonds() (openmm.app.topology.residue method)": [[32, "openmm.app.topology.Residue.internal_bonds"]], "topology (class in openmm.app.topology)": [[33, "openmm.app.topology.Topology"]], "__init__() (openmm.app.topology.topology method)": [[33, "openmm.app.topology.Topology.__init__"]], "addatom() (openmm.app.topology.topology method)": [[33, "openmm.app.topology.Topology.addAtom"]], "addbond() (openmm.app.topology.topology method)": [[33, "openmm.app.topology.Topology.addBond"]], "addchain() (openmm.app.topology.topology method)": [[33, "openmm.app.topology.Topology.addChain"]], "addresidue() (openmm.app.topology.topology method)": [[33, "openmm.app.topology.Topology.addResidue"]], "atoms() (openmm.app.topology.topology method)": [[33, "openmm.app.topology.Topology.atoms"]], "bonds() (openmm.app.topology.topology method)": [[33, "openmm.app.topology.Topology.bonds"]], "chains() (openmm.app.topology.topology method)": [[33, "openmm.app.topology.Topology.chains"]], "createdisulfidebonds() (openmm.app.topology.topology method)": [[33, "openmm.app.topology.Topology.createDisulfideBonds"]], "createstandardbonds() (openmm.app.topology.topology method)": [[33, "openmm.app.topology.Topology.createStandardBonds"]], "getnumatoms() (openmm.app.topology.topology method)": [[33, "openmm.app.topology.Topology.getNumAtoms"]], "getnumbonds() (openmm.app.topology.topology method)": [[33, "openmm.app.topology.Topology.getNumBonds"]], "getnumchains() (openmm.app.topology.topology method)": [[33, "openmm.app.topology.Topology.getNumChains"]], "getnumresidues() (openmm.app.topology.topology method)": [[33, "openmm.app.topology.Topology.getNumResidues"]], "getperiodicboxvectors() (openmm.app.topology.topology method)": [[33, "openmm.app.topology.Topology.getPeriodicBoxVectors"]], "getunitcelldimensions() (openmm.app.topology.topology method)": [[33, "openmm.app.topology.Topology.getUnitCellDimensions"]], "loadbonddefinitions() (openmm.app.topology.topology static method)": [[33, "openmm.app.topology.Topology.loadBondDefinitions"]], "residues() (openmm.app.topology.topology method)": [[33, "openmm.app.topology.Topology.residues"]], "setperiodicboxvectors() (openmm.app.topology.topology method)": [[33, "openmm.app.topology.Topology.setPeriodicBoxVectors"]], "setunitcelldimensions() (openmm.app.topology.topology method)": [[33, "openmm.app.topology.Topology.setUnitCellDimensions"]], "mtsintegrator (class in openmm.mtsintegrator)": [[34, "openmm.mtsintegrator.MTSIntegrator"]], "__init__() (openmm.mtsintegrator.mtsintegrator method)": [[34, "openmm.mtsintegrator.MTSIntegrator.__init__"]], "addcomputeglobal() (openmm.mtsintegrator.mtsintegrator method)": [[34, "openmm.mtsintegrator.MTSIntegrator.addComputeGlobal"]], "addcomputeperdof() (openmm.mtsintegrator.mtsintegrator method)": [[34, "openmm.mtsintegrator.MTSIntegrator.addComputePerDof"]], "addcomputesum() (openmm.mtsintegrator.mtsintegrator method)": [[34, "openmm.mtsintegrator.MTSIntegrator.addComputeSum"]], "addconstrainpositions() (openmm.mtsintegrator.mtsintegrator method)": [[34, "openmm.mtsintegrator.MTSIntegrator.addConstrainPositions"]], "addconstrainvelocities() (openmm.mtsintegrator.mtsintegrator method)": [[34, "openmm.mtsintegrator.MTSIntegrator.addConstrainVelocities"]], "addglobalvariable() (openmm.mtsintegrator.mtsintegrator method)": [[34, "openmm.mtsintegrator.MTSIntegrator.addGlobalVariable"]], "addperdofvariable() (openmm.mtsintegrator.mtsintegrator method)": [[34, "openmm.mtsintegrator.MTSIntegrator.addPerDofVariable"]], "addtabulatedfunction() (openmm.mtsintegrator.mtsintegrator method)": [[34, "openmm.mtsintegrator.MTSIntegrator.addTabulatedFunction"]], "addupdatecontextstate() (openmm.mtsintegrator.mtsintegrator method)": [[34, "openmm.mtsintegrator.MTSIntegrator.addUpdateContextState"]], "beginifblock() (openmm.mtsintegrator.mtsintegrator method)": [[34, "openmm.mtsintegrator.MTSIntegrator.beginIfBlock"]], "beginwhileblock() (openmm.mtsintegrator.mtsintegrator method)": [[34, "openmm.mtsintegrator.MTSIntegrator.beginWhileBlock"]], "endblock() (openmm.mtsintegrator.mtsintegrator method)": [[34, "openmm.mtsintegrator.MTSIntegrator.endBlock"]], "getcomputationstep() (openmm.mtsintegrator.mtsintegrator method)": [[34, "openmm.mtsintegrator.MTSIntegrator.getComputationStep"]], "getconstrainttolerance() (openmm.mtsintegrator.mtsintegrator method)": [[34, "openmm.mtsintegrator.MTSIntegrator.getConstraintTolerance"]], "getglobalvariable() (openmm.mtsintegrator.mtsintegrator method)": [[34, "openmm.mtsintegrator.MTSIntegrator.getGlobalVariable"]], "getglobalvariablebyname() (openmm.mtsintegrator.mtsintegrator method)": [[34, "openmm.mtsintegrator.MTSIntegrator.getGlobalVariableByName"]], "getglobalvariablename() (openmm.mtsintegrator.mtsintegrator method)": [[34, "openmm.mtsintegrator.MTSIntegrator.getGlobalVariableName"]], "getintegrationforcegroups() (openmm.mtsintegrator.mtsintegrator method)": [[34, "openmm.mtsintegrator.MTSIntegrator.getIntegrationForceGroups"]], "getkineticenergyexpression() (openmm.mtsintegrator.mtsintegrator method)": [[34, "openmm.mtsintegrator.MTSIntegrator.getKineticEnergyExpression"]], "getnumcomputations() (openmm.mtsintegrator.mtsintegrator method)": [[34, "openmm.mtsintegrator.MTSIntegrator.getNumComputations"]], "getnumglobalvariables() (openmm.mtsintegrator.mtsintegrator method)": [[34, "openmm.mtsintegrator.MTSIntegrator.getNumGlobalVariables"]], "getnumperdofvariables() (openmm.mtsintegrator.mtsintegrator method)": [[34, "openmm.mtsintegrator.MTSIntegrator.getNumPerDofVariables"]], "getnumtabulatedfunctions() (openmm.mtsintegrator.mtsintegrator method)": [[34, "openmm.mtsintegrator.MTSIntegrator.getNumTabulatedFunctions"]], "getperdofvariable() (openmm.mtsintegrator.mtsintegrator method)": [[34, "openmm.mtsintegrator.MTSIntegrator.getPerDofVariable"]], "getperdofvariablebyname() (openmm.mtsintegrator.mtsintegrator method)": [[34, "openmm.mtsintegrator.MTSIntegrator.getPerDofVariableByName"]], "getperdofvariablename() (openmm.mtsintegrator.mtsintegrator method)": [[34, "openmm.mtsintegrator.MTSIntegrator.getPerDofVariableName"]], "getrandomnumberseed() (openmm.mtsintegrator.mtsintegrator method)": [[34, "openmm.mtsintegrator.MTSIntegrator.getRandomNumberSeed"]], "getstepsize() (openmm.mtsintegrator.mtsintegrator method)": [[34, "openmm.mtsintegrator.MTSIntegrator.getStepSize"]], "gettabulatedfunction() (openmm.mtsintegrator.mtsintegrator method)": [[34, "openmm.mtsintegrator.MTSIntegrator.getTabulatedFunction"]], "gettabulatedfunctionname() (openmm.mtsintegrator.mtsintegrator method)": [[34, "openmm.mtsintegrator.MTSIntegrator.getTabulatedFunctionName"]], "setconstrainttolerance() (openmm.mtsintegrator.mtsintegrator method)": [[34, "openmm.mtsintegrator.MTSIntegrator.setConstraintTolerance"]], "setglobalvariable() (openmm.mtsintegrator.mtsintegrator method)": [[34, "openmm.mtsintegrator.MTSIntegrator.setGlobalVariable"]], "setglobalvariablebyname() (openmm.mtsintegrator.mtsintegrator method)": [[34, "openmm.mtsintegrator.MTSIntegrator.setGlobalVariableByName"]], "setintegrationforcegroups() (openmm.mtsintegrator.mtsintegrator method)": [[34, "openmm.mtsintegrator.MTSIntegrator.setIntegrationForceGroups"]], "setkineticenergyexpression() (openmm.mtsintegrator.mtsintegrator method)": [[34, "openmm.mtsintegrator.MTSIntegrator.setKineticEnergyExpression"]], "setperdofvariable() (openmm.mtsintegrator.mtsintegrator method)": [[34, "openmm.mtsintegrator.MTSIntegrator.setPerDofVariable"]], "setperdofvariablebyname() (openmm.mtsintegrator.mtsintegrator method)": [[34, "openmm.mtsintegrator.MTSIntegrator.setPerDofVariableByName"]], "setrandomnumberseed() (openmm.mtsintegrator.mtsintegrator method)": [[34, "openmm.mtsintegrator.MTSIntegrator.setRandomNumberSeed"]], "setstepsize() (openmm.mtsintegrator.mtsintegrator method)": [[34, "openmm.mtsintegrator.MTSIntegrator.setStepSize"]], "step() (openmm.mtsintegrator.mtsintegrator method)": [[34, "openmm.mtsintegrator.MTSIntegrator.step"]], "thisown (openmm.mtsintegrator.mtsintegrator property)": [[34, "openmm.mtsintegrator.MTSIntegrator.thisown"]], "mtslangevinintegrator (class in openmm.mtsintegrator)": [[35, "openmm.mtsintegrator.MTSLangevinIntegrator"]], "__init__() (openmm.mtsintegrator.mtslangevinintegrator method)": [[35, "openmm.mtsintegrator.MTSLangevinIntegrator.__init__"]], "addcomputeglobal() (openmm.mtsintegrator.mtslangevinintegrator method)": [[35, "openmm.mtsintegrator.MTSLangevinIntegrator.addComputeGlobal"]], "addcomputeperdof() (openmm.mtsintegrator.mtslangevinintegrator method)": [[35, "openmm.mtsintegrator.MTSLangevinIntegrator.addComputePerDof"]], "addcomputesum() (openmm.mtsintegrator.mtslangevinintegrator method)": [[35, "openmm.mtsintegrator.MTSLangevinIntegrator.addComputeSum"]], "addconstrainpositions() (openmm.mtsintegrator.mtslangevinintegrator method)": [[35, "openmm.mtsintegrator.MTSLangevinIntegrator.addConstrainPositions"]], "addconstrainvelocities() (openmm.mtsintegrator.mtslangevinintegrator method)": [[35, "openmm.mtsintegrator.MTSLangevinIntegrator.addConstrainVelocities"]], "addglobalvariable() (openmm.mtsintegrator.mtslangevinintegrator method)": [[35, "openmm.mtsintegrator.MTSLangevinIntegrator.addGlobalVariable"]], "addperdofvariable() (openmm.mtsintegrator.mtslangevinintegrator method)": [[35, "openmm.mtsintegrator.MTSLangevinIntegrator.addPerDofVariable"]], "addtabulatedfunction() (openmm.mtsintegrator.mtslangevinintegrator method)": [[35, "openmm.mtsintegrator.MTSLangevinIntegrator.addTabulatedFunction"]], "addupdatecontextstate() (openmm.mtsintegrator.mtslangevinintegrator method)": [[35, "openmm.mtsintegrator.MTSLangevinIntegrator.addUpdateContextState"]], "beginifblock() (openmm.mtsintegrator.mtslangevinintegrator method)": [[35, "openmm.mtsintegrator.MTSLangevinIntegrator.beginIfBlock"]], "beginwhileblock() (openmm.mtsintegrator.mtslangevinintegrator method)": [[35, "openmm.mtsintegrator.MTSLangevinIntegrator.beginWhileBlock"]], "endblock() (openmm.mtsintegrator.mtslangevinintegrator method)": [[35, "openmm.mtsintegrator.MTSLangevinIntegrator.endBlock"]], "getcomputationstep() (openmm.mtsintegrator.mtslangevinintegrator method)": [[35, "openmm.mtsintegrator.MTSLangevinIntegrator.getComputationStep"]], "getconstrainttolerance() (openmm.mtsintegrator.mtslangevinintegrator method)": [[35, "openmm.mtsintegrator.MTSLangevinIntegrator.getConstraintTolerance"]], "getglobalvariable() (openmm.mtsintegrator.mtslangevinintegrator method)": [[35, "openmm.mtsintegrator.MTSLangevinIntegrator.getGlobalVariable"]], "getglobalvariablebyname() (openmm.mtsintegrator.mtslangevinintegrator method)": [[35, "openmm.mtsintegrator.MTSLangevinIntegrator.getGlobalVariableByName"]], "getglobalvariablename() (openmm.mtsintegrator.mtslangevinintegrator method)": [[35, "openmm.mtsintegrator.MTSLangevinIntegrator.getGlobalVariableName"]], "getintegrationforcegroups() (openmm.mtsintegrator.mtslangevinintegrator method)": [[35, "openmm.mtsintegrator.MTSLangevinIntegrator.getIntegrationForceGroups"]], "getkineticenergyexpression() (openmm.mtsintegrator.mtslangevinintegrator method)": [[35, "openmm.mtsintegrator.MTSLangevinIntegrator.getKineticEnergyExpression"]], "getnumcomputations() (openmm.mtsintegrator.mtslangevinintegrator method)": [[35, "openmm.mtsintegrator.MTSLangevinIntegrator.getNumComputations"]], "getnumglobalvariables() (openmm.mtsintegrator.mtslangevinintegrator method)": [[35, "openmm.mtsintegrator.MTSLangevinIntegrator.getNumGlobalVariables"]], "getnumperdofvariables() (openmm.mtsintegrator.mtslangevinintegrator method)": [[35, "openmm.mtsintegrator.MTSLangevinIntegrator.getNumPerDofVariables"]], "getnumtabulatedfunctions() (openmm.mtsintegrator.mtslangevinintegrator method)": [[35, "openmm.mtsintegrator.MTSLangevinIntegrator.getNumTabulatedFunctions"]], "getperdofvariable() (openmm.mtsintegrator.mtslangevinintegrator method)": [[35, "openmm.mtsintegrator.MTSLangevinIntegrator.getPerDofVariable"]], "getperdofvariablebyname() (openmm.mtsintegrator.mtslangevinintegrator method)": [[35, "openmm.mtsintegrator.MTSLangevinIntegrator.getPerDofVariableByName"]], "getperdofvariablename() (openmm.mtsintegrator.mtslangevinintegrator method)": [[35, "openmm.mtsintegrator.MTSLangevinIntegrator.getPerDofVariableName"]], "getrandomnumberseed() (openmm.mtsintegrator.mtslangevinintegrator method)": [[35, "openmm.mtsintegrator.MTSLangevinIntegrator.getRandomNumberSeed"]], "getstepsize() (openmm.mtsintegrator.mtslangevinintegrator method)": [[35, "openmm.mtsintegrator.MTSLangevinIntegrator.getStepSize"]], "gettabulatedfunction() (openmm.mtsintegrator.mtslangevinintegrator method)": [[35, "openmm.mtsintegrator.MTSLangevinIntegrator.getTabulatedFunction"]], "gettabulatedfunctionname() (openmm.mtsintegrator.mtslangevinintegrator method)": [[35, "openmm.mtsintegrator.MTSLangevinIntegrator.getTabulatedFunctionName"]], "setconstrainttolerance() (openmm.mtsintegrator.mtslangevinintegrator method)": [[35, "openmm.mtsintegrator.MTSLangevinIntegrator.setConstraintTolerance"]], "setglobalvariable() (openmm.mtsintegrator.mtslangevinintegrator method)": [[35, "openmm.mtsintegrator.MTSLangevinIntegrator.setGlobalVariable"]], "setglobalvariablebyname() (openmm.mtsintegrator.mtslangevinintegrator method)": [[35, "openmm.mtsintegrator.MTSLangevinIntegrator.setGlobalVariableByName"]], "setintegrationforcegroups() (openmm.mtsintegrator.mtslangevinintegrator method)": [[35, "openmm.mtsintegrator.MTSLangevinIntegrator.setIntegrationForceGroups"]], "setkineticenergyexpression() (openmm.mtsintegrator.mtslangevinintegrator method)": [[35, "openmm.mtsintegrator.MTSLangevinIntegrator.setKineticEnergyExpression"]], "setperdofvariable() (openmm.mtsintegrator.mtslangevinintegrator method)": [[35, "openmm.mtsintegrator.MTSLangevinIntegrator.setPerDofVariable"]], "setperdofvariablebyname() (openmm.mtsintegrator.mtslangevinintegrator method)": [[35, "openmm.mtsintegrator.MTSLangevinIntegrator.setPerDofVariableByName"]], "setrandomnumberseed() (openmm.mtsintegrator.mtslangevinintegrator method)": [[35, "openmm.mtsintegrator.MTSLangevinIntegrator.setRandomNumberSeed"]], "setstepsize() (openmm.mtsintegrator.mtslangevinintegrator method)": [[35, "openmm.mtsintegrator.MTSLangevinIntegrator.setStepSize"]], "step() (openmm.mtsintegrator.mtslangevinintegrator method)": [[35, "openmm.mtsintegrator.MTSLangevinIntegrator.step"]], "thisown (openmm.mtsintegrator.mtslangevinintegrator property)": [[35, "openmm.mtsintegrator.MTSLangevinIntegrator.thisown"]], "amoebageneralizedkirkwoodforce (class in openmm.openmm)": [[36, "openmm.openmm.AmoebaGeneralizedKirkwoodForce"]], "__init__() (openmm.openmm.amoebageneralizedkirkwoodforce method)": [[36, "openmm.openmm.AmoebaGeneralizedKirkwoodForce.__init__"]], "addparticle() (openmm.openmm.amoebageneralizedkirkwoodforce method)": [[36, "openmm.openmm.AmoebaGeneralizedKirkwoodForce.addParticle"]], "getforcegroup() (openmm.openmm.amoebageneralizedkirkwoodforce method)": [[36, "openmm.openmm.AmoebaGeneralizedKirkwoodForce.getForceGroup"]], "getincludecavityterm() (openmm.openmm.amoebageneralizedkirkwoodforce method)": [[36, "openmm.openmm.AmoebaGeneralizedKirkwoodForce.getIncludeCavityTerm"]], "getname() (openmm.openmm.amoebageneralizedkirkwoodforce method)": [[36, "openmm.openmm.AmoebaGeneralizedKirkwoodForce.getName"]], "getnumparticles() (openmm.openmm.amoebageneralizedkirkwoodforce method)": [[36, "openmm.openmm.AmoebaGeneralizedKirkwoodForce.getNumParticles"]], "getparticleparameters() (openmm.openmm.amoebageneralizedkirkwoodforce method)": [[36, "openmm.openmm.AmoebaGeneralizedKirkwoodForce.getParticleParameters"]], "getproberadius() (openmm.openmm.amoebageneralizedkirkwoodforce method)": [[36, "openmm.openmm.AmoebaGeneralizedKirkwoodForce.getProbeRadius"]], "getsolutedielectric() (openmm.openmm.amoebageneralizedkirkwoodforce method)": [[36, "openmm.openmm.AmoebaGeneralizedKirkwoodForce.getSoluteDielectric"]], "getsolventdielectric() (openmm.openmm.amoebageneralizedkirkwoodforce method)": [[36, "openmm.openmm.AmoebaGeneralizedKirkwoodForce.getSolventDielectric"]], "getsurfaceareafactor() (openmm.openmm.amoebageneralizedkirkwoodforce method)": [[36, "openmm.openmm.AmoebaGeneralizedKirkwoodForce.getSurfaceAreaFactor"]], "setforcegroup() (openmm.openmm.amoebageneralizedkirkwoodforce method)": [[36, "openmm.openmm.AmoebaGeneralizedKirkwoodForce.setForceGroup"]], "setincludecavityterm() (openmm.openmm.amoebageneralizedkirkwoodforce method)": [[36, "openmm.openmm.AmoebaGeneralizedKirkwoodForce.setIncludeCavityTerm"]], "setname() (openmm.openmm.amoebageneralizedkirkwoodforce method)": [[36, "openmm.openmm.AmoebaGeneralizedKirkwoodForce.setName"]], "setparticleparameters() (openmm.openmm.amoebageneralizedkirkwoodforce method)": [[36, "openmm.openmm.AmoebaGeneralizedKirkwoodForce.setParticleParameters"]], "setproberadius() (openmm.openmm.amoebageneralizedkirkwoodforce method)": [[36, "openmm.openmm.AmoebaGeneralizedKirkwoodForce.setProbeRadius"]], "setsolutedielectric() (openmm.openmm.amoebageneralizedkirkwoodforce method)": [[36, "openmm.openmm.AmoebaGeneralizedKirkwoodForce.setSoluteDielectric"]], "setsolventdielectric() (openmm.openmm.amoebageneralizedkirkwoodforce method)": [[36, "openmm.openmm.AmoebaGeneralizedKirkwoodForce.setSolventDielectric"]], "setsurfaceareafactor() (openmm.openmm.amoebageneralizedkirkwoodforce method)": [[36, "openmm.openmm.AmoebaGeneralizedKirkwoodForce.setSurfaceAreaFactor"]], "thisown (openmm.openmm.amoebageneralizedkirkwoodforce property)": [[36, "openmm.openmm.AmoebaGeneralizedKirkwoodForce.thisown"]], "updateparametersincontext() (openmm.openmm.amoebageneralizedkirkwoodforce method)": [[36, "openmm.openmm.AmoebaGeneralizedKirkwoodForce.updateParametersInContext"]], "usesperiodicboundaryconditions() (openmm.openmm.amoebageneralizedkirkwoodforce method)": [[36, "openmm.openmm.AmoebaGeneralizedKirkwoodForce.usesPeriodicBoundaryConditions"]], "amoebamultipoleforce (class in openmm.openmm)": [[37, "openmm.openmm.AmoebaMultipoleForce"]], "__init__() (openmm.openmm.amoebamultipoleforce method)": [[37, "openmm.openmm.AmoebaMultipoleForce.__init__"]], "addmultipole() (openmm.openmm.amoebamultipoleforce method)": [[37, "openmm.openmm.AmoebaMultipoleForce.addMultipole"]], "getaewald() (openmm.openmm.amoebamultipoleforce method)": [[37, "openmm.openmm.AmoebaMultipoleForce.getAEwald"]], "getcovalentmap() (openmm.openmm.amoebamultipoleforce method)": [[37, "openmm.openmm.AmoebaMultipoleForce.getCovalentMap"]], "getcovalentmaps() (openmm.openmm.amoebamultipoleforce method)": [[37, "openmm.openmm.AmoebaMultipoleForce.getCovalentMaps"]], "getcutoffdistance() (openmm.openmm.amoebamultipoleforce method)": [[37, "openmm.openmm.AmoebaMultipoleForce.getCutoffDistance"]], "getelectrostaticpotential() (openmm.openmm.amoebamultipoleforce method)": [[37, "openmm.openmm.AmoebaMultipoleForce.getElectrostaticPotential"]], "getewalderrortolerance() (openmm.openmm.amoebamultipoleforce method)": [[37, "openmm.openmm.AmoebaMultipoleForce.getEwaldErrorTolerance"]], "getextrapolationcoefficients() (openmm.openmm.amoebamultipoleforce method)": [[37, "openmm.openmm.AmoebaMultipoleForce.getExtrapolationCoefficients"]], "getforcegroup() (openmm.openmm.amoebamultipoleforce method)": [[37, "openmm.openmm.AmoebaMultipoleForce.getForceGroup"]], "getinduceddipoles() (openmm.openmm.amoebamultipoleforce method)": [[37, "openmm.openmm.AmoebaMultipoleForce.getInducedDipoles"]], "getlabframepermanentdipoles() (openmm.openmm.amoebamultipoleforce method)": [[37, "openmm.openmm.AmoebaMultipoleForce.getLabFramePermanentDipoles"]], "getmultipoleparameters() (openmm.openmm.amoebamultipoleforce method)": [[37, "openmm.openmm.AmoebaMultipoleForce.getMultipoleParameters"]], "getmutualinducedmaxiterations() (openmm.openmm.amoebamultipoleforce method)": [[37, "openmm.openmm.AmoebaMultipoleForce.getMutualInducedMaxIterations"]], "getmutualinducedtargetepsilon() (openmm.openmm.amoebamultipoleforce method)": [[37, "openmm.openmm.AmoebaMultipoleForce.getMutualInducedTargetEpsilon"]], "getname() (openmm.openmm.amoebamultipoleforce method)": [[37, "openmm.openmm.AmoebaMultipoleForce.getName"]], "getnonbondedmethod() (openmm.openmm.amoebamultipoleforce method)": [[37, "openmm.openmm.AmoebaMultipoleForce.getNonbondedMethod"]], "getnummultipoles() (openmm.openmm.amoebamultipoleforce method)": [[37, "openmm.openmm.AmoebaMultipoleForce.getNumMultipoles"]], "getpmeparameters() (openmm.openmm.amoebamultipoleforce method)": [[37, "openmm.openmm.AmoebaMultipoleForce.getPMEParameters"]], "getpmeparametersincontext() (openmm.openmm.amoebamultipoleforce method)": [[37, "openmm.openmm.AmoebaMultipoleForce.getPMEParametersInContext"]], "getpmebsplineorder() (openmm.openmm.amoebamultipoleforce method)": [[37, "openmm.openmm.AmoebaMultipoleForce.getPmeBSplineOrder"]], "getpmegriddimensions() (openmm.openmm.amoebamultipoleforce method)": [[37, "openmm.openmm.AmoebaMultipoleForce.getPmeGridDimensions"]], "getpolarizationtype() (openmm.openmm.amoebamultipoleforce method)": [[37, "openmm.openmm.AmoebaMultipoleForce.getPolarizationType"]], "getsystemmultipolemoments() (openmm.openmm.amoebamultipoleforce method)": [[37, "openmm.openmm.AmoebaMultipoleForce.getSystemMultipoleMoments"]], "gettotaldipoles() (openmm.openmm.amoebamultipoleforce method)": [[37, "openmm.openmm.AmoebaMultipoleForce.getTotalDipoles"]], "setaewald() (openmm.openmm.amoebamultipoleforce method)": [[37, "openmm.openmm.AmoebaMultipoleForce.setAEwald"]], "setcovalentmap() (openmm.openmm.amoebamultipoleforce method)": [[37, "openmm.openmm.AmoebaMultipoleForce.setCovalentMap"]], "setcutoffdistance() (openmm.openmm.amoebamultipoleforce method)": [[37, "openmm.openmm.AmoebaMultipoleForce.setCutoffDistance"]], "setewalderrortolerance() (openmm.openmm.amoebamultipoleforce method)": [[37, "openmm.openmm.AmoebaMultipoleForce.setEwaldErrorTolerance"]], "setextrapolationcoefficients() (openmm.openmm.amoebamultipoleforce method)": [[37, "openmm.openmm.AmoebaMultipoleForce.setExtrapolationCoefficients"]], "setforcegroup() (openmm.openmm.amoebamultipoleforce method)": [[37, "openmm.openmm.AmoebaMultipoleForce.setForceGroup"]], "setmultipoleparameters() (openmm.openmm.amoebamultipoleforce method)": [[37, "openmm.openmm.AmoebaMultipoleForce.setMultipoleParameters"]], "setmutualinducedmaxiterations() (openmm.openmm.amoebamultipoleforce method)": [[37, "openmm.openmm.AmoebaMultipoleForce.setMutualInducedMaxIterations"]], "setmutualinducedtargetepsilon() (openmm.openmm.amoebamultipoleforce method)": [[37, "openmm.openmm.AmoebaMultipoleForce.setMutualInducedTargetEpsilon"]], "setname() (openmm.openmm.amoebamultipoleforce method)": [[37, "openmm.openmm.AmoebaMultipoleForce.setName"]], "setnonbondedmethod() (openmm.openmm.amoebamultipoleforce method)": [[37, "openmm.openmm.AmoebaMultipoleForce.setNonbondedMethod"]], "setpmeparameters() (openmm.openmm.amoebamultipoleforce method)": [[37, "openmm.openmm.AmoebaMultipoleForce.setPMEParameters"]], "setpmegriddimensions() (openmm.openmm.amoebamultipoleforce method)": [[37, "openmm.openmm.AmoebaMultipoleForce.setPmeGridDimensions"]], "setpolarizationtype() (openmm.openmm.amoebamultipoleforce method)": [[37, "openmm.openmm.AmoebaMultipoleForce.setPolarizationType"]], "thisown (openmm.openmm.amoebamultipoleforce property)": [[37, "openmm.openmm.AmoebaMultipoleForce.thisown"]], "updateparametersincontext() (openmm.openmm.amoebamultipoleforce method)": [[37, "openmm.openmm.AmoebaMultipoleForce.updateParametersInContext"]], "usesperiodicboundaryconditions() (openmm.openmm.amoebamultipoleforce method)": [[37, "openmm.openmm.AmoebaMultipoleForce.usesPeriodicBoundaryConditions"]], "amoebatorsiontorsionforce (class in openmm.openmm)": [[38, "openmm.openmm.AmoebaTorsionTorsionForce"]], "__init__() (openmm.openmm.amoebatorsiontorsionforce method)": [[38, "openmm.openmm.AmoebaTorsionTorsionForce.__init__"]], "addtorsiontorsion() (openmm.openmm.amoebatorsiontorsionforce method)": [[38, "openmm.openmm.AmoebaTorsionTorsionForce.addTorsionTorsion"]], "getforcegroup() (openmm.openmm.amoebatorsiontorsionforce method)": [[38, "openmm.openmm.AmoebaTorsionTorsionForce.getForceGroup"]], "getname() (openmm.openmm.amoebatorsiontorsionforce method)": [[38, "openmm.openmm.AmoebaTorsionTorsionForce.getName"]], "getnumtorsiontorsiongrids() (openmm.openmm.amoebatorsiontorsionforce method)": [[38, "openmm.openmm.AmoebaTorsionTorsionForce.getNumTorsionTorsionGrids"]], "getnumtorsiontorsions() (openmm.openmm.amoebatorsiontorsionforce method)": [[38, "openmm.openmm.AmoebaTorsionTorsionForce.getNumTorsionTorsions"]], "gettorsiontorsiongrid() (openmm.openmm.amoebatorsiontorsionforce method)": [[38, "openmm.openmm.AmoebaTorsionTorsionForce.getTorsionTorsionGrid"]], "gettorsiontorsionparameters() (openmm.openmm.amoebatorsiontorsionforce method)": [[38, "openmm.openmm.AmoebaTorsionTorsionForce.getTorsionTorsionParameters"]], "setforcegroup() (openmm.openmm.amoebatorsiontorsionforce method)": [[38, "openmm.openmm.AmoebaTorsionTorsionForce.setForceGroup"]], "setname() (openmm.openmm.amoebatorsiontorsionforce method)": [[38, "openmm.openmm.AmoebaTorsionTorsionForce.setName"]], "settorsiontorsiongrid() (openmm.openmm.amoebatorsiontorsionforce method)": [[38, "openmm.openmm.AmoebaTorsionTorsionForce.setTorsionTorsionGrid"]], "settorsiontorsionparameters() (openmm.openmm.amoebatorsiontorsionforce method)": [[38, "openmm.openmm.AmoebaTorsionTorsionForce.setTorsionTorsionParameters"]], "setusesperiodicboundaryconditions() (openmm.openmm.amoebatorsiontorsionforce method)": [[38, "openmm.openmm.AmoebaTorsionTorsionForce.setUsesPeriodicBoundaryConditions"]], "thisown (openmm.openmm.amoebatorsiontorsionforce property)": [[38, "openmm.openmm.AmoebaTorsionTorsionForce.thisown"]], "usesperiodicboundaryconditions() (openmm.openmm.amoebatorsiontorsionforce method)": [[38, "openmm.openmm.AmoebaTorsionTorsionForce.usesPeriodicBoundaryConditions"]], "amoebavdwforce (class in openmm.openmm)": [[39, "openmm.openmm.AmoebaVdwForce"]], "lambda() (openmm.openmm.amoebavdwforce static method)": [[39, "openmm.openmm.AmoebaVdwForce.Lambda"]], "__init__() (openmm.openmm.amoebavdwforce method)": [[39, "openmm.openmm.AmoebaVdwForce.__init__"]], "addparticle() (openmm.openmm.amoebavdwforce method)": [[39, "openmm.openmm.AmoebaVdwForce.addParticle"]], "addparticletype() (openmm.openmm.amoebavdwforce method)": [[39, "openmm.openmm.AmoebaVdwForce.addParticleType"]], "addtypepair() (openmm.openmm.amoebavdwforce method)": [[39, "openmm.openmm.AmoebaVdwForce.addTypePair"]], "getalchemicalmethod() (openmm.openmm.amoebavdwforce method)": [[39, "openmm.openmm.AmoebaVdwForce.getAlchemicalMethod"]], "getcutoff() (openmm.openmm.amoebavdwforce method)": [[39, "openmm.openmm.AmoebaVdwForce.getCutoff"]], "getcutoffdistance() (openmm.openmm.amoebavdwforce method)": [[39, "openmm.openmm.AmoebaVdwForce.getCutoffDistance"]], "getepsiloncombiningrule() (openmm.openmm.amoebavdwforce method)": [[39, "openmm.openmm.AmoebaVdwForce.getEpsilonCombiningRule"]], "getforcegroup() (openmm.openmm.amoebavdwforce method)": [[39, "openmm.openmm.AmoebaVdwForce.getForceGroup"]], "getname() (openmm.openmm.amoebavdwforce method)": [[39, "openmm.openmm.AmoebaVdwForce.getName"]], "getnonbondedmethod() (openmm.openmm.amoebavdwforce method)": [[39, "openmm.openmm.AmoebaVdwForce.getNonbondedMethod"]], "getnumparticletypes() (openmm.openmm.amoebavdwforce method)": [[39, "openmm.openmm.AmoebaVdwForce.getNumParticleTypes"]], "getnumparticles() (openmm.openmm.amoebavdwforce method)": [[39, "openmm.openmm.AmoebaVdwForce.getNumParticles"]], "getnumtypepairs() (openmm.openmm.amoebavdwforce method)": [[39, "openmm.openmm.AmoebaVdwForce.getNumTypePairs"]], "getparticleexclusions() (openmm.openmm.amoebavdwforce method)": [[39, "openmm.openmm.AmoebaVdwForce.getParticleExclusions"]], "getparticleparameters() (openmm.openmm.amoebavdwforce method)": [[39, "openmm.openmm.AmoebaVdwForce.getParticleParameters"]], "getparticletypeparameters() (openmm.openmm.amoebavdwforce method)": [[39, "openmm.openmm.AmoebaVdwForce.getParticleTypeParameters"]], "getpotentialfunction() (openmm.openmm.amoebavdwforce method)": [[39, "openmm.openmm.AmoebaVdwForce.getPotentialFunction"]], "getsigmacombiningrule() (openmm.openmm.amoebavdwforce method)": [[39, "openmm.openmm.AmoebaVdwForce.getSigmaCombiningRule"]], "getsoftcorealpha() (openmm.openmm.amoebavdwforce method)": [[39, "openmm.openmm.AmoebaVdwForce.getSoftcoreAlpha"]], "getsoftcorepower() (openmm.openmm.amoebavdwforce method)": [[39, "openmm.openmm.AmoebaVdwForce.getSoftcorePower"]], "gettypepairparameters() (openmm.openmm.amoebavdwforce method)": [[39, "openmm.openmm.AmoebaVdwForce.getTypePairParameters"]], "getusedispersioncorrection() (openmm.openmm.amoebavdwforce method)": [[39, "openmm.openmm.AmoebaVdwForce.getUseDispersionCorrection"]], "getuseparticletypes() (openmm.openmm.amoebavdwforce method)": [[39, "openmm.openmm.AmoebaVdwForce.getUseParticleTypes"]], "setalchemicalmethod() (openmm.openmm.amoebavdwforce method)": [[39, "openmm.openmm.AmoebaVdwForce.setAlchemicalMethod"]], "setcutoff() (openmm.openmm.amoebavdwforce method)": [[39, "openmm.openmm.AmoebaVdwForce.setCutoff"]], "setcutoffdistance() (openmm.openmm.amoebavdwforce method)": [[39, "openmm.openmm.AmoebaVdwForce.setCutoffDistance"]], "setepsiloncombiningrule() (openmm.openmm.amoebavdwforce method)": [[39, "openmm.openmm.AmoebaVdwForce.setEpsilonCombiningRule"]], "setforcegroup() (openmm.openmm.amoebavdwforce method)": [[39, "openmm.openmm.AmoebaVdwForce.setForceGroup"]], "setname() (openmm.openmm.amoebavdwforce method)": [[39, "openmm.openmm.AmoebaVdwForce.setName"]], "setnonbondedmethod() (openmm.openmm.amoebavdwforce method)": [[39, "openmm.openmm.AmoebaVdwForce.setNonbondedMethod"]], "setparticleexclusions() (openmm.openmm.amoebavdwforce method)": [[39, "openmm.openmm.AmoebaVdwForce.setParticleExclusions"]], "setparticleparameters() (openmm.openmm.amoebavdwforce method)": [[39, "openmm.openmm.AmoebaVdwForce.setParticleParameters"]], "setparticletypeparameters() (openmm.openmm.amoebavdwforce method)": [[39, "openmm.openmm.AmoebaVdwForce.setParticleTypeParameters"]], "setpotentialfunction() (openmm.openmm.amoebavdwforce method)": [[39, "openmm.openmm.AmoebaVdwForce.setPotentialFunction"]], "setsigmacombiningrule() (openmm.openmm.amoebavdwforce method)": [[39, "openmm.openmm.AmoebaVdwForce.setSigmaCombiningRule"]], "setsoftcorealpha() (openmm.openmm.amoebavdwforce method)": [[39, "openmm.openmm.AmoebaVdwForce.setSoftcoreAlpha"]], "setsoftcorepower() (openmm.openmm.amoebavdwforce method)": [[39, "openmm.openmm.AmoebaVdwForce.setSoftcorePower"]], "settypepairparameters() (openmm.openmm.amoebavdwforce method)": [[39, "openmm.openmm.AmoebaVdwForce.setTypePairParameters"]], "setusedispersioncorrection() (openmm.openmm.amoebavdwforce method)": [[39, "openmm.openmm.AmoebaVdwForce.setUseDispersionCorrection"]], "thisown (openmm.openmm.amoebavdwforce property)": [[39, "openmm.openmm.AmoebaVdwForce.thisown"]], "updateparametersincontext() (openmm.openmm.amoebavdwforce method)": [[39, "openmm.openmm.AmoebaVdwForce.updateParametersInContext"]], "usesperiodicboundaryconditions() (openmm.openmm.amoebavdwforce method)": [[39, "openmm.openmm.AmoebaVdwForce.usesPeriodicBoundaryConditions"]], "amoebawcadispersionforce (class in openmm.openmm)": [[40, "openmm.openmm.AmoebaWcaDispersionForce"]], "__init__() (openmm.openmm.amoebawcadispersionforce method)": [[40, "openmm.openmm.AmoebaWcaDispersionForce.__init__"]], "addparticle() (openmm.openmm.amoebawcadispersionforce method)": [[40, "openmm.openmm.AmoebaWcaDispersionForce.addParticle"]], "getawater() (openmm.openmm.amoebawcadispersionforce method)": [[40, "openmm.openmm.AmoebaWcaDispersionForce.getAwater"]], "getdispoff() (openmm.openmm.amoebawcadispersionforce method)": [[40, "openmm.openmm.AmoebaWcaDispersionForce.getDispoff"]], "getepsh() (openmm.openmm.amoebawcadispersionforce method)": [[40, "openmm.openmm.AmoebaWcaDispersionForce.getEpsh"]], "getepso() (openmm.openmm.amoebawcadispersionforce method)": [[40, "openmm.openmm.AmoebaWcaDispersionForce.getEpso"]], "getforcegroup() (openmm.openmm.amoebawcadispersionforce method)": [[40, "openmm.openmm.AmoebaWcaDispersionForce.getForceGroup"]], "getname() (openmm.openmm.amoebawcadispersionforce method)": [[40, "openmm.openmm.AmoebaWcaDispersionForce.getName"]], "getnumparticles() (openmm.openmm.amoebawcadispersionforce method)": [[40, "openmm.openmm.AmoebaWcaDispersionForce.getNumParticles"]], "getparticleparameters() (openmm.openmm.amoebawcadispersionforce method)": [[40, "openmm.openmm.AmoebaWcaDispersionForce.getParticleParameters"]], "getrminh() (openmm.openmm.amoebawcadispersionforce method)": [[40, "openmm.openmm.AmoebaWcaDispersionForce.getRminh"]], "getrmino() (openmm.openmm.amoebawcadispersionforce method)": [[40, "openmm.openmm.AmoebaWcaDispersionForce.getRmino"]], "getshctd() (openmm.openmm.amoebawcadispersionforce method)": [[40, "openmm.openmm.AmoebaWcaDispersionForce.getShctd"]], "getslevy() (openmm.openmm.amoebawcadispersionforce method)": [[40, "openmm.openmm.AmoebaWcaDispersionForce.getSlevy"]], "setawater() (openmm.openmm.amoebawcadispersionforce method)": [[40, "openmm.openmm.AmoebaWcaDispersionForce.setAwater"]], "setdispoff() (openmm.openmm.amoebawcadispersionforce method)": [[40, "openmm.openmm.AmoebaWcaDispersionForce.setDispoff"]], "setepsh() (openmm.openmm.amoebawcadispersionforce method)": [[40, "openmm.openmm.AmoebaWcaDispersionForce.setEpsh"]], "setepso() (openmm.openmm.amoebawcadispersionforce method)": [[40, "openmm.openmm.AmoebaWcaDispersionForce.setEpso"]], "setforcegroup() (openmm.openmm.amoebawcadispersionforce method)": [[40, "openmm.openmm.AmoebaWcaDispersionForce.setForceGroup"]], "setname() (openmm.openmm.amoebawcadispersionforce method)": [[40, "openmm.openmm.AmoebaWcaDispersionForce.setName"]], "setparticleparameters() (openmm.openmm.amoebawcadispersionforce method)": [[40, "openmm.openmm.AmoebaWcaDispersionForce.setParticleParameters"]], "setrminh() (openmm.openmm.amoebawcadispersionforce method)": [[40, "openmm.openmm.AmoebaWcaDispersionForce.setRminh"]], "setrmino() (openmm.openmm.amoebawcadispersionforce method)": [[40, "openmm.openmm.AmoebaWcaDispersionForce.setRmino"]], "setshctd() (openmm.openmm.amoebawcadispersionforce method)": [[40, "openmm.openmm.AmoebaWcaDispersionForce.setShctd"]], "setslevy() (openmm.openmm.amoebawcadispersionforce method)": [[40, "openmm.openmm.AmoebaWcaDispersionForce.setSlevy"]], "thisown (openmm.openmm.amoebawcadispersionforce property)": [[40, "openmm.openmm.AmoebaWcaDispersionForce.thisown"]], "updateparametersincontext() (openmm.openmm.amoebawcadispersionforce method)": [[40, "openmm.openmm.AmoebaWcaDispersionForce.updateParametersInContext"]], "usesperiodicboundaryconditions() (openmm.openmm.amoebawcadispersionforce method)": [[40, "openmm.openmm.AmoebaWcaDispersionForce.usesPeriodicBoundaryConditions"]], "andersenthermostat (class in openmm.openmm)": [[41, "openmm.openmm.AndersenThermostat"]], "collisionfrequency() (openmm.openmm.andersenthermostat static method)": [[41, "openmm.openmm.AndersenThermostat.CollisionFrequency"]], "temperature() (openmm.openmm.andersenthermostat static method)": [[41, "openmm.openmm.AndersenThermostat.Temperature"]], "__init__() (openmm.openmm.andersenthermostat method)": [[41, "openmm.openmm.AndersenThermostat.__init__"]], "getdefaultcollisionfrequency() (openmm.openmm.andersenthermostat method)": [[41, "openmm.openmm.AndersenThermostat.getDefaultCollisionFrequency"]], "getdefaulttemperature() (openmm.openmm.andersenthermostat method)": [[41, "openmm.openmm.AndersenThermostat.getDefaultTemperature"]], "getforcegroup() (openmm.openmm.andersenthermostat method)": [[41, "openmm.openmm.AndersenThermostat.getForceGroup"]], "getname() (openmm.openmm.andersenthermostat method)": [[41, "openmm.openmm.AndersenThermostat.getName"]], "getrandomnumberseed() (openmm.openmm.andersenthermostat method)": [[41, "openmm.openmm.AndersenThermostat.getRandomNumberSeed"]], "setdefaultcollisionfrequency() (openmm.openmm.andersenthermostat method)": [[41, "openmm.openmm.AndersenThermostat.setDefaultCollisionFrequency"]], "setdefaulttemperature() (openmm.openmm.andersenthermostat method)": [[41, "openmm.openmm.AndersenThermostat.setDefaultTemperature"]], "setforcegroup() (openmm.openmm.andersenthermostat method)": [[41, "openmm.openmm.AndersenThermostat.setForceGroup"]], "setname() (openmm.openmm.andersenthermostat method)": [[41, "openmm.openmm.AndersenThermostat.setName"]], "setrandomnumberseed() (openmm.openmm.andersenthermostat method)": [[41, "openmm.openmm.AndersenThermostat.setRandomNumberSeed"]], "thisown (openmm.openmm.andersenthermostat property)": [[41, "openmm.openmm.AndersenThermostat.thisown"]], "usesperiodicboundaryconditions() (openmm.openmm.andersenthermostat method)": [[41, "openmm.openmm.AndersenThermostat.usesPeriodicBoundaryConditions"]], "brownianintegrator (class in openmm.openmm)": [[42, "openmm.openmm.BrownianIntegrator"]], "__init__() (openmm.openmm.brownianintegrator method)": [[42, "openmm.openmm.BrownianIntegrator.__init__"]], "getconstrainttolerance() (openmm.openmm.brownianintegrator method)": [[42, "openmm.openmm.BrownianIntegrator.getConstraintTolerance"]], "getfriction() (openmm.openmm.brownianintegrator method)": [[42, "openmm.openmm.BrownianIntegrator.getFriction"]], "getintegrationforcegroups() (openmm.openmm.brownianintegrator method)": [[42, "openmm.openmm.BrownianIntegrator.getIntegrationForceGroups"]], "getrandomnumberseed() (openmm.openmm.brownianintegrator method)": [[42, "openmm.openmm.BrownianIntegrator.getRandomNumberSeed"]], "getstepsize() (openmm.openmm.brownianintegrator method)": [[42, "openmm.openmm.BrownianIntegrator.getStepSize"]], "gettemperature() (openmm.openmm.brownianintegrator method)": [[42, "openmm.openmm.BrownianIntegrator.getTemperature"]], "setconstrainttolerance() (openmm.openmm.brownianintegrator method)": [[42, "openmm.openmm.BrownianIntegrator.setConstraintTolerance"]], "setfriction() (openmm.openmm.brownianintegrator method)": [[42, "openmm.openmm.BrownianIntegrator.setFriction"]], "setintegrationforcegroups() (openmm.openmm.brownianintegrator method)": [[42, "openmm.openmm.BrownianIntegrator.setIntegrationForceGroups"]], "setrandomnumberseed() (openmm.openmm.brownianintegrator method)": [[42, "openmm.openmm.BrownianIntegrator.setRandomNumberSeed"]], "setstepsize() (openmm.openmm.brownianintegrator method)": [[42, "openmm.openmm.BrownianIntegrator.setStepSize"]], "settemperature() (openmm.openmm.brownianintegrator method)": [[42, "openmm.openmm.BrownianIntegrator.setTemperature"]], "step() (openmm.openmm.brownianintegrator method)": [[42, "openmm.openmm.BrownianIntegrator.step"]], "thisown (openmm.openmm.brownianintegrator property)": [[42, "openmm.openmm.BrownianIntegrator.thisown"]], "cmaptorsionforce (class in openmm.openmm)": [[43, "openmm.openmm.CMAPTorsionForce"]], "__init__() (openmm.openmm.cmaptorsionforce method)": [[43, "openmm.openmm.CMAPTorsionForce.__init__"]], "addmap() (openmm.openmm.cmaptorsionforce method)": [[43, "openmm.openmm.CMAPTorsionForce.addMap"]], "addtorsion() (openmm.openmm.cmaptorsionforce method)": [[43, "openmm.openmm.CMAPTorsionForce.addTorsion"]], "getforcegroup() (openmm.openmm.cmaptorsionforce method)": [[43, "openmm.openmm.CMAPTorsionForce.getForceGroup"]], "getmapparameters() (openmm.openmm.cmaptorsionforce method)": [[43, "openmm.openmm.CMAPTorsionForce.getMapParameters"]], "getname() (openmm.openmm.cmaptorsionforce method)": [[43, "openmm.openmm.CMAPTorsionForce.getName"]], "getnummaps() (openmm.openmm.cmaptorsionforce method)": [[43, "openmm.openmm.CMAPTorsionForce.getNumMaps"]], "getnumtorsions() (openmm.openmm.cmaptorsionforce method)": [[43, "openmm.openmm.CMAPTorsionForce.getNumTorsions"]], "gettorsionparameters() (openmm.openmm.cmaptorsionforce method)": [[43, "openmm.openmm.CMAPTorsionForce.getTorsionParameters"]], "setforcegroup() (openmm.openmm.cmaptorsionforce method)": [[43, "openmm.openmm.CMAPTorsionForce.setForceGroup"]], "setmapparameters() (openmm.openmm.cmaptorsionforce method)": [[43, "openmm.openmm.CMAPTorsionForce.setMapParameters"]], "setname() (openmm.openmm.cmaptorsionforce method)": [[43, "openmm.openmm.CMAPTorsionForce.setName"]], "settorsionparameters() (openmm.openmm.cmaptorsionforce method)": [[43, "openmm.openmm.CMAPTorsionForce.setTorsionParameters"]], "setusesperiodicboundaryconditions() (openmm.openmm.cmaptorsionforce method)": [[43, "openmm.openmm.CMAPTorsionForce.setUsesPeriodicBoundaryConditions"]], "thisown (openmm.openmm.cmaptorsionforce property)": [[43, "openmm.openmm.CMAPTorsionForce.thisown"]], "updateparametersincontext() (openmm.openmm.cmaptorsionforce method)": [[43, "openmm.openmm.CMAPTorsionForce.updateParametersInContext"]], "usesperiodicboundaryconditions() (openmm.openmm.cmaptorsionforce method)": [[43, "openmm.openmm.CMAPTorsionForce.usesPeriodicBoundaryConditions"]], "cmmotionremover (class in openmm.openmm)": [[44, "openmm.openmm.CMMotionRemover"]], "__init__() (openmm.openmm.cmmotionremover method)": [[44, "openmm.openmm.CMMotionRemover.__init__"]], "getforcegroup() (openmm.openmm.cmmotionremover method)": [[44, "openmm.openmm.CMMotionRemover.getForceGroup"]], "getfrequency() (openmm.openmm.cmmotionremover method)": [[44, "openmm.openmm.CMMotionRemover.getFrequency"]], "getname() (openmm.openmm.cmmotionremover method)": [[44, "openmm.openmm.CMMotionRemover.getName"]], "setforcegroup() (openmm.openmm.cmmotionremover method)": [[44, "openmm.openmm.CMMotionRemover.setForceGroup"]], "setfrequency() (openmm.openmm.cmmotionremover method)": [[44, "openmm.openmm.CMMotionRemover.setFrequency"]], "setname() (openmm.openmm.cmmotionremover method)": [[44, "openmm.openmm.CMMotionRemover.setName"]], "thisown (openmm.openmm.cmmotionremover property)": [[44, "openmm.openmm.CMMotionRemover.thisown"]], "usesperiodicboundaryconditions() (openmm.openmm.cmmotionremover method)": [[44, "openmm.openmm.CMMotionRemover.usesPeriodicBoundaryConditions"]], "compoundintegrator (class in openmm.openmm)": [[45, "openmm.openmm.CompoundIntegrator"]], "__init__() (openmm.openmm.compoundintegrator method)": [[45, "openmm.openmm.CompoundIntegrator.__init__"]], "addintegrator() (openmm.openmm.compoundintegrator method)": [[45, "openmm.openmm.CompoundIntegrator.addIntegrator"]], "getconstrainttolerance() (openmm.openmm.compoundintegrator method)": [[45, "openmm.openmm.CompoundIntegrator.getConstraintTolerance"]], "getcurrentintegrator() (openmm.openmm.compoundintegrator method)": [[45, "openmm.openmm.CompoundIntegrator.getCurrentIntegrator"]], "getintegrationforcegroups() (openmm.openmm.compoundintegrator method)": [[45, "openmm.openmm.CompoundIntegrator.getIntegrationForceGroups"]], "getintegrator() (openmm.openmm.compoundintegrator method)": [[45, "openmm.openmm.CompoundIntegrator.getIntegrator"]], "getnumintegrators() (openmm.openmm.compoundintegrator method)": [[45, "openmm.openmm.CompoundIntegrator.getNumIntegrators"]], "getstepsize() (openmm.openmm.compoundintegrator method)": [[45, "openmm.openmm.CompoundIntegrator.getStepSize"]], "setconstrainttolerance() (openmm.openmm.compoundintegrator method)": [[45, "openmm.openmm.CompoundIntegrator.setConstraintTolerance"]], "setcurrentintegrator() (openmm.openmm.compoundintegrator method)": [[45, "openmm.openmm.CompoundIntegrator.setCurrentIntegrator"]], "setintegrationforcegroups() (openmm.openmm.compoundintegrator method)": [[45, "openmm.openmm.CompoundIntegrator.setIntegrationForceGroups"]], "setstepsize() (openmm.openmm.compoundintegrator method)": [[45, "openmm.openmm.CompoundIntegrator.setStepSize"]], "step() (openmm.openmm.compoundintegrator method)": [[45, "openmm.openmm.CompoundIntegrator.step"]], "thisown (openmm.openmm.compoundintegrator property)": [[45, "openmm.openmm.CompoundIntegrator.thisown"]], "context (class in openmm.openmm)": [[46, "openmm.openmm.Context"]], "__init__() (openmm.openmm.context method)": [[46, "openmm.openmm.Context.__init__"]], "applyconstraints() (openmm.openmm.context method)": [[46, "openmm.openmm.Context.applyConstraints"]], "applyvelocityconstraints() (openmm.openmm.context method)": [[46, "openmm.openmm.Context.applyVelocityConstraints"]], "computevirtualsites() (openmm.openmm.context method)": [[46, "openmm.openmm.Context.computeVirtualSites"]], "createcheckpoint() (openmm.openmm.context method)": [[46, "openmm.openmm.Context.createCheckpoint"]], "getmolecules() (openmm.openmm.context method)": [[46, "openmm.openmm.Context.getMolecules"]], "getparameter() (openmm.openmm.context method)": [[46, "openmm.openmm.Context.getParameter"]], "getparameters() (openmm.openmm.context method)": [[46, "openmm.openmm.Context.getParameters"]], "getplatform() (openmm.openmm.context method)": [[46, "openmm.openmm.Context.getPlatform"]], "getstate() (openmm.openmm.context method)": [[46, "openmm.openmm.Context.getState"]], "getstepcount() (openmm.openmm.context method)": [[46, "openmm.openmm.Context.getStepCount"]], "getsystem() (openmm.openmm.context method)": [[46, "openmm.openmm.Context.getSystem"]], "gettime() (openmm.openmm.context method)": [[46, "openmm.openmm.Context.getTime"]], "loadcheckpoint() (openmm.openmm.context method)": [[46, "openmm.openmm.Context.loadCheckpoint"]], "reinitialize() (openmm.openmm.context method)": [[46, "openmm.openmm.Context.reinitialize"]], "setparameter() (openmm.openmm.context method)": [[46, "openmm.openmm.Context.setParameter"]], "setperiodicboxvectors() (openmm.openmm.context method)": [[46, "openmm.openmm.Context.setPeriodicBoxVectors"]], "setpositions() (openmm.openmm.context method)": [[46, "openmm.openmm.Context.setPositions"]], "setstate() (openmm.openmm.context method)": [[46, "openmm.openmm.Context.setState"]], "setstepcount() (openmm.openmm.context method)": [[46, "openmm.openmm.Context.setStepCount"]], "settime() (openmm.openmm.context method)": [[46, "openmm.openmm.Context.setTime"]], "setvelocities() (openmm.openmm.context method)": [[46, "openmm.openmm.Context.setVelocities"]], "setvelocitiestotemperature() (openmm.openmm.context method)": [[46, "openmm.openmm.Context.setVelocitiesToTemperature"]], "thisown (openmm.openmm.context property)": [[46, "openmm.openmm.Context.thisown"]], "continuous1dfunction (class in openmm.openmm)": [[47, "openmm.openmm.Continuous1DFunction"]], "copy() (openmm.openmm.continuous1dfunction method)": [[47, "openmm.openmm.Continuous1DFunction.Copy"]], "__eq__() (openmm.openmm.continuous1dfunction method)": [[47, "openmm.openmm.Continuous1DFunction.__eq__"]], "__init__() (openmm.openmm.continuous1dfunction method)": [[47, "openmm.openmm.Continuous1DFunction.__init__"]], "__ne__() (openmm.openmm.continuous1dfunction method)": [[47, "openmm.openmm.Continuous1DFunction.__ne__"]], "getfunctionparameters() (openmm.openmm.continuous1dfunction method)": [[47, "openmm.openmm.Continuous1DFunction.getFunctionParameters"]], "getperiodic() (openmm.openmm.continuous1dfunction method)": [[47, "openmm.openmm.Continuous1DFunction.getPeriodic"]], "getupdatecount() (openmm.openmm.continuous1dfunction method)": [[47, "openmm.openmm.Continuous1DFunction.getUpdateCount"]], "setfunctionparameters() (openmm.openmm.continuous1dfunction method)": [[47, "openmm.openmm.Continuous1DFunction.setFunctionParameters"]], "thisown (openmm.openmm.continuous1dfunction property)": [[47, "openmm.openmm.Continuous1DFunction.thisown"]], "continuous2dfunction (class in openmm.openmm)": [[48, "openmm.openmm.Continuous2DFunction"]], "copy() (openmm.openmm.continuous2dfunction method)": [[48, "openmm.openmm.Continuous2DFunction.Copy"]], "__eq__() (openmm.openmm.continuous2dfunction method)": [[48, "openmm.openmm.Continuous2DFunction.__eq__"]], "__init__() (openmm.openmm.continuous2dfunction method)": [[48, "openmm.openmm.Continuous2DFunction.__init__"]], "__ne__() (openmm.openmm.continuous2dfunction method)": [[48, "openmm.openmm.Continuous2DFunction.__ne__"]], "getfunctionparameters() (openmm.openmm.continuous2dfunction method)": [[48, "openmm.openmm.Continuous2DFunction.getFunctionParameters"]], "getperiodic() (openmm.openmm.continuous2dfunction method)": [[48, "openmm.openmm.Continuous2DFunction.getPeriodic"]], "getupdatecount() (openmm.openmm.continuous2dfunction method)": [[48, "openmm.openmm.Continuous2DFunction.getUpdateCount"]], "setfunctionparameters() (openmm.openmm.continuous2dfunction method)": [[48, "openmm.openmm.Continuous2DFunction.setFunctionParameters"]], "thisown (openmm.openmm.continuous2dfunction property)": [[48, "openmm.openmm.Continuous2DFunction.thisown"]], "continuous3dfunction (class in openmm.openmm)": [[49, "openmm.openmm.Continuous3DFunction"]], "copy() (openmm.openmm.continuous3dfunction method)": [[49, "openmm.openmm.Continuous3DFunction.Copy"]], "__eq__() (openmm.openmm.continuous3dfunction method)": [[49, "openmm.openmm.Continuous3DFunction.__eq__"]], "__init__() (openmm.openmm.continuous3dfunction method)": [[49, "openmm.openmm.Continuous3DFunction.__init__"]], "__ne__() (openmm.openmm.continuous3dfunction method)": [[49, "openmm.openmm.Continuous3DFunction.__ne__"]], "getfunctionparameters() (openmm.openmm.continuous3dfunction method)": [[49, "openmm.openmm.Continuous3DFunction.getFunctionParameters"]], "getperiodic() (openmm.openmm.continuous3dfunction method)": [[49, "openmm.openmm.Continuous3DFunction.getPeriodic"]], "getupdatecount() (openmm.openmm.continuous3dfunction method)": [[49, "openmm.openmm.Continuous3DFunction.getUpdateCount"]], "setfunctionparameters() (openmm.openmm.continuous3dfunction method)": [[49, "openmm.openmm.Continuous3DFunction.setFunctionParameters"]], "thisown (openmm.openmm.continuous3dfunction property)": [[49, "openmm.openmm.Continuous3DFunction.thisown"]], "customangleforce (class in openmm.openmm)": [[50, "openmm.openmm.CustomAngleForce"]], "__init__() (openmm.openmm.customangleforce method)": [[50, "openmm.openmm.CustomAngleForce.__init__"]], "addangle() (openmm.openmm.customangleforce method)": [[50, "openmm.openmm.CustomAngleForce.addAngle"]], "addenergyparameterderivative() (openmm.openmm.customangleforce method)": [[50, "openmm.openmm.CustomAngleForce.addEnergyParameterDerivative"]], "addglobalparameter() (openmm.openmm.customangleforce method)": [[50, "openmm.openmm.CustomAngleForce.addGlobalParameter"]], "addperangleparameter() (openmm.openmm.customangleforce method)": [[50, "openmm.openmm.CustomAngleForce.addPerAngleParameter"]], "getangleparameters() (openmm.openmm.customangleforce method)": [[50, "openmm.openmm.CustomAngleForce.getAngleParameters"]], "getenergyfunction() (openmm.openmm.customangleforce method)": [[50, "openmm.openmm.CustomAngleForce.getEnergyFunction"]], "getenergyparameterderivativename() (openmm.openmm.customangleforce method)": [[50, "openmm.openmm.CustomAngleForce.getEnergyParameterDerivativeName"]], "getforcegroup() (openmm.openmm.customangleforce method)": [[50, "openmm.openmm.CustomAngleForce.getForceGroup"]], "getglobalparameterdefaultvalue() (openmm.openmm.customangleforce method)": [[50, "openmm.openmm.CustomAngleForce.getGlobalParameterDefaultValue"]], "getglobalparametername() (openmm.openmm.customangleforce method)": [[50, "openmm.openmm.CustomAngleForce.getGlobalParameterName"]], "getname() (openmm.openmm.customangleforce method)": [[50, "openmm.openmm.CustomAngleForce.getName"]], "getnumangles() (openmm.openmm.customangleforce method)": [[50, "openmm.openmm.CustomAngleForce.getNumAngles"]], "getnumenergyparameterderivatives() (openmm.openmm.customangleforce method)": [[50, "openmm.openmm.CustomAngleForce.getNumEnergyParameterDerivatives"]], "getnumglobalparameters() (openmm.openmm.customangleforce method)": [[50, "openmm.openmm.CustomAngleForce.getNumGlobalParameters"]], "getnumperangleparameters() (openmm.openmm.customangleforce method)": [[50, "openmm.openmm.CustomAngleForce.getNumPerAngleParameters"]], "getperangleparametername() (openmm.openmm.customangleforce method)": [[50, "openmm.openmm.CustomAngleForce.getPerAngleParameterName"]], "setangleparameters() (openmm.openmm.customangleforce method)": [[50, "openmm.openmm.CustomAngleForce.setAngleParameters"]], "setenergyfunction() (openmm.openmm.customangleforce method)": [[50, "openmm.openmm.CustomAngleForce.setEnergyFunction"]], "setforcegroup() (openmm.openmm.customangleforce method)": [[50, "openmm.openmm.CustomAngleForce.setForceGroup"]], "setglobalparameterdefaultvalue() (openmm.openmm.customangleforce method)": [[50, "openmm.openmm.CustomAngleForce.setGlobalParameterDefaultValue"]], "setglobalparametername() (openmm.openmm.customangleforce method)": [[50, "openmm.openmm.CustomAngleForce.setGlobalParameterName"]], "setname() (openmm.openmm.customangleforce method)": [[50, "openmm.openmm.CustomAngleForce.setName"]], "setperangleparametername() (openmm.openmm.customangleforce method)": [[50, "openmm.openmm.CustomAngleForce.setPerAngleParameterName"]], "setusesperiodicboundaryconditions() (openmm.openmm.customangleforce method)": [[50, "openmm.openmm.CustomAngleForce.setUsesPeriodicBoundaryConditions"]], "thisown (openmm.openmm.customangleforce property)": [[50, "openmm.openmm.CustomAngleForce.thisown"]], "updateparametersincontext() (openmm.openmm.customangleforce method)": [[50, "openmm.openmm.CustomAngleForce.updateParametersInContext"]], "usesperiodicboundaryconditions() (openmm.openmm.customangleforce method)": [[50, "openmm.openmm.CustomAngleForce.usesPeriodicBoundaryConditions"]], "custombondforce (class in openmm.openmm)": [[51, "openmm.openmm.CustomBondForce"]], "__init__() (openmm.openmm.custombondforce method)": [[51, "openmm.openmm.CustomBondForce.__init__"]], "addbond() (openmm.openmm.custombondforce method)": [[51, "openmm.openmm.CustomBondForce.addBond"]], "addenergyparameterderivative() (openmm.openmm.custombondforce method)": [[51, "openmm.openmm.CustomBondForce.addEnergyParameterDerivative"]], "addglobalparameter() (openmm.openmm.custombondforce method)": [[51, "openmm.openmm.CustomBondForce.addGlobalParameter"]], "addperbondparameter() (openmm.openmm.custombondforce method)": [[51, "openmm.openmm.CustomBondForce.addPerBondParameter"]], "getbondparameters() (openmm.openmm.custombondforce method)": [[51, "openmm.openmm.CustomBondForce.getBondParameters"]], "getenergyfunction() (openmm.openmm.custombondforce method)": [[51, "openmm.openmm.CustomBondForce.getEnergyFunction"]], "getenergyparameterderivativename() (openmm.openmm.custombondforce method)": [[51, "openmm.openmm.CustomBondForce.getEnergyParameterDerivativeName"]], "getforcegroup() (openmm.openmm.custombondforce method)": [[51, "openmm.openmm.CustomBondForce.getForceGroup"]], "getglobalparameterdefaultvalue() (openmm.openmm.custombondforce method)": [[51, "openmm.openmm.CustomBondForce.getGlobalParameterDefaultValue"]], "getglobalparametername() (openmm.openmm.custombondforce method)": [[51, "openmm.openmm.CustomBondForce.getGlobalParameterName"]], "getname() (openmm.openmm.custombondforce method)": [[51, "openmm.openmm.CustomBondForce.getName"]], "getnumbonds() (openmm.openmm.custombondforce method)": [[51, "openmm.openmm.CustomBondForce.getNumBonds"]], "getnumenergyparameterderivatives() (openmm.openmm.custombondforce method)": [[51, "openmm.openmm.CustomBondForce.getNumEnergyParameterDerivatives"]], "getnumglobalparameters() (openmm.openmm.custombondforce method)": [[51, "openmm.openmm.CustomBondForce.getNumGlobalParameters"]], "getnumperbondparameters() (openmm.openmm.custombondforce method)": [[51, "openmm.openmm.CustomBondForce.getNumPerBondParameters"]], "getperbondparametername() (openmm.openmm.custombondforce method)": [[51, "openmm.openmm.CustomBondForce.getPerBondParameterName"]], "setbondparameters() (openmm.openmm.custombondforce method)": [[51, "openmm.openmm.CustomBondForce.setBondParameters"]], "setenergyfunction() (openmm.openmm.custombondforce method)": [[51, "openmm.openmm.CustomBondForce.setEnergyFunction"]], "setforcegroup() (openmm.openmm.custombondforce method)": [[51, "openmm.openmm.CustomBondForce.setForceGroup"]], "setglobalparameterdefaultvalue() (openmm.openmm.custombondforce method)": [[51, "openmm.openmm.CustomBondForce.setGlobalParameterDefaultValue"]], "setglobalparametername() (openmm.openmm.custombondforce method)": [[51, "openmm.openmm.CustomBondForce.setGlobalParameterName"]], "setname() (openmm.openmm.custombondforce method)": [[51, "openmm.openmm.CustomBondForce.setName"]], "setperbondparametername() (openmm.openmm.custombondforce method)": [[51, "openmm.openmm.CustomBondForce.setPerBondParameterName"]], "setusesperiodicboundaryconditions() (openmm.openmm.custombondforce method)": [[51, "openmm.openmm.CustomBondForce.setUsesPeriodicBoundaryConditions"]], "thisown (openmm.openmm.custombondforce property)": [[51, "openmm.openmm.CustomBondForce.thisown"]], "updateparametersincontext() (openmm.openmm.custombondforce method)": [[51, "openmm.openmm.CustomBondForce.updateParametersInContext"]], "usesperiodicboundaryconditions() (openmm.openmm.custombondforce method)": [[51, "openmm.openmm.CustomBondForce.usesPeriodicBoundaryConditions"]], "customcvforce (class in openmm.openmm)": [[52, "openmm.openmm.CustomCVForce"]], "__init__() (openmm.openmm.customcvforce method)": [[52, "openmm.openmm.CustomCVForce.__init__"]], "addcollectivevariable() (openmm.openmm.customcvforce method)": [[52, "openmm.openmm.CustomCVForce.addCollectiveVariable"]], "addenergyparameterderivative() (openmm.openmm.customcvforce method)": [[52, "openmm.openmm.CustomCVForce.addEnergyParameterDerivative"]], "addglobalparameter() (openmm.openmm.customcvforce method)": [[52, "openmm.openmm.CustomCVForce.addGlobalParameter"]], "addtabulatedfunction() (openmm.openmm.customcvforce method)": [[52, "openmm.openmm.CustomCVForce.addTabulatedFunction"]], "getcollectivevariable() (openmm.openmm.customcvforce method)": [[52, "openmm.openmm.CustomCVForce.getCollectiveVariable"]], "getcollectivevariablename() (openmm.openmm.customcvforce method)": [[52, "openmm.openmm.CustomCVForce.getCollectiveVariableName"]], "getcollectivevariablevalues() (openmm.openmm.customcvforce method)": [[52, "openmm.openmm.CustomCVForce.getCollectiveVariableValues"]], "getenergyfunction() (openmm.openmm.customcvforce method)": [[52, "openmm.openmm.CustomCVForce.getEnergyFunction"]], "getenergyparameterderivativename() (openmm.openmm.customcvforce method)": [[52, "openmm.openmm.CustomCVForce.getEnergyParameterDerivativeName"]], "getforcegroup() (openmm.openmm.customcvforce method)": [[52, "openmm.openmm.CustomCVForce.getForceGroup"]], "getglobalparameterdefaultvalue() (openmm.openmm.customcvforce method)": [[52, "openmm.openmm.CustomCVForce.getGlobalParameterDefaultValue"]], "getglobalparametername() (openmm.openmm.customcvforce method)": [[52, "openmm.openmm.CustomCVForce.getGlobalParameterName"]], "getinnercontext() (openmm.openmm.customcvforce method)": [[52, "openmm.openmm.CustomCVForce.getInnerContext"]], "getname() (openmm.openmm.customcvforce method)": [[52, "openmm.openmm.CustomCVForce.getName"]], "getnumcollectivevariables() (openmm.openmm.customcvforce method)": [[52, "openmm.openmm.CustomCVForce.getNumCollectiveVariables"]], "getnumenergyparameterderivatives() (openmm.openmm.customcvforce method)": [[52, "openmm.openmm.CustomCVForce.getNumEnergyParameterDerivatives"]], "getnumglobalparameters() (openmm.openmm.customcvforce method)": [[52, "openmm.openmm.CustomCVForce.getNumGlobalParameters"]], "getnumtabulatedfunctions() (openmm.openmm.customcvforce method)": [[52, "openmm.openmm.CustomCVForce.getNumTabulatedFunctions"]], "gettabulatedfunction() (openmm.openmm.customcvforce method)": [[52, "openmm.openmm.CustomCVForce.getTabulatedFunction"]], "gettabulatedfunctionname() (openmm.openmm.customcvforce method)": [[52, "openmm.openmm.CustomCVForce.getTabulatedFunctionName"]], "setenergyfunction() (openmm.openmm.customcvforce method)": [[52, "openmm.openmm.CustomCVForce.setEnergyFunction"]], "setforcegroup() (openmm.openmm.customcvforce method)": [[52, "openmm.openmm.CustomCVForce.setForceGroup"]], "setglobalparameterdefaultvalue() (openmm.openmm.customcvforce method)": [[52, "openmm.openmm.CustomCVForce.setGlobalParameterDefaultValue"]], "setglobalparametername() (openmm.openmm.customcvforce method)": [[52, "openmm.openmm.CustomCVForce.setGlobalParameterName"]], "setname() (openmm.openmm.customcvforce method)": [[52, "openmm.openmm.CustomCVForce.setName"]], "thisown (openmm.openmm.customcvforce property)": [[52, "openmm.openmm.CustomCVForce.thisown"]], "updateparametersincontext() (openmm.openmm.customcvforce method)": [[52, "openmm.openmm.CustomCVForce.updateParametersInContext"]], "usesperiodicboundaryconditions() (openmm.openmm.customcvforce method)": [[52, "openmm.openmm.CustomCVForce.usesPeriodicBoundaryConditions"]], "customcentroidbondforce (class in openmm.openmm)": [[53, "openmm.openmm.CustomCentroidBondForce"]], "__init__() (openmm.openmm.customcentroidbondforce method)": [[53, "openmm.openmm.CustomCentroidBondForce.__init__"]], "addbond() (openmm.openmm.customcentroidbondforce method)": [[53, "openmm.openmm.CustomCentroidBondForce.addBond"]], "addenergyparameterderivative() (openmm.openmm.customcentroidbondforce method)": [[53, "openmm.openmm.CustomCentroidBondForce.addEnergyParameterDerivative"]], "addglobalparameter() (openmm.openmm.customcentroidbondforce method)": [[53, "openmm.openmm.CustomCentroidBondForce.addGlobalParameter"]], "addgroup() (openmm.openmm.customcentroidbondforce method)": [[53, "openmm.openmm.CustomCentroidBondForce.addGroup"]], "addperbondparameter() (openmm.openmm.customcentroidbondforce method)": [[53, "openmm.openmm.CustomCentroidBondForce.addPerBondParameter"]], "addtabulatedfunction() (openmm.openmm.customcentroidbondforce method)": [[53, "openmm.openmm.CustomCentroidBondForce.addTabulatedFunction"]], "getbondparameters() (openmm.openmm.customcentroidbondforce method)": [[53, "openmm.openmm.CustomCentroidBondForce.getBondParameters"]], "getenergyfunction() (openmm.openmm.customcentroidbondforce method)": [[53, "openmm.openmm.CustomCentroidBondForce.getEnergyFunction"]], "getenergyparameterderivativename() (openmm.openmm.customcentroidbondforce method)": [[53, "openmm.openmm.CustomCentroidBondForce.getEnergyParameterDerivativeName"]], "getforcegroup() (openmm.openmm.customcentroidbondforce method)": [[53, "openmm.openmm.CustomCentroidBondForce.getForceGroup"]], "getglobalparameterdefaultvalue() (openmm.openmm.customcentroidbondforce method)": [[53, "openmm.openmm.CustomCentroidBondForce.getGlobalParameterDefaultValue"]], "getglobalparametername() (openmm.openmm.customcentroidbondforce method)": [[53, "openmm.openmm.CustomCentroidBondForce.getGlobalParameterName"]], "getgroupparameters() (openmm.openmm.customcentroidbondforce method)": [[53, "openmm.openmm.CustomCentroidBondForce.getGroupParameters"]], "getname() (openmm.openmm.customcentroidbondforce method)": [[53, "openmm.openmm.CustomCentroidBondForce.getName"]], "getnumbonds() (openmm.openmm.customcentroidbondforce method)": [[53, "openmm.openmm.CustomCentroidBondForce.getNumBonds"]], "getnumenergyparameterderivatives() (openmm.openmm.customcentroidbondforce method)": [[53, "openmm.openmm.CustomCentroidBondForce.getNumEnergyParameterDerivatives"]], "getnumfunctions() (openmm.openmm.customcentroidbondforce method)": [[53, "openmm.openmm.CustomCentroidBondForce.getNumFunctions"]], "getnumglobalparameters() (openmm.openmm.customcentroidbondforce method)": [[53, "openmm.openmm.CustomCentroidBondForce.getNumGlobalParameters"]], "getnumgroups() (openmm.openmm.customcentroidbondforce method)": [[53, "openmm.openmm.CustomCentroidBondForce.getNumGroups"]], "getnumgroupsperbond() (openmm.openmm.customcentroidbondforce method)": [[53, "openmm.openmm.CustomCentroidBondForce.getNumGroupsPerBond"]], "getnumperbondparameters() (openmm.openmm.customcentroidbondforce method)": [[53, "openmm.openmm.CustomCentroidBondForce.getNumPerBondParameters"]], "getnumtabulatedfunctions() (openmm.openmm.customcentroidbondforce method)": [[53, "openmm.openmm.CustomCentroidBondForce.getNumTabulatedFunctions"]], "getperbondparametername() (openmm.openmm.customcentroidbondforce method)": [[53, "openmm.openmm.CustomCentroidBondForce.getPerBondParameterName"]], "gettabulatedfunction() (openmm.openmm.customcentroidbondforce method)": [[53, "openmm.openmm.CustomCentroidBondForce.getTabulatedFunction"]], "gettabulatedfunctionname() (openmm.openmm.customcentroidbondforce method)": [[53, "openmm.openmm.CustomCentroidBondForce.getTabulatedFunctionName"]], "setbondparameters() (openmm.openmm.customcentroidbondforce method)": [[53, "openmm.openmm.CustomCentroidBondForce.setBondParameters"]], "setenergyfunction() (openmm.openmm.customcentroidbondforce method)": [[53, "openmm.openmm.CustomCentroidBondForce.setEnergyFunction"]], "setforcegroup() (openmm.openmm.customcentroidbondforce method)": [[53, "openmm.openmm.CustomCentroidBondForce.setForceGroup"]], "setglobalparameterdefaultvalue() (openmm.openmm.customcentroidbondforce method)": [[53, "openmm.openmm.CustomCentroidBondForce.setGlobalParameterDefaultValue"]], "setglobalparametername() (openmm.openmm.customcentroidbondforce method)": [[53, "openmm.openmm.CustomCentroidBondForce.setGlobalParameterName"]], "setgroupparameters() (openmm.openmm.customcentroidbondforce method)": [[53, "openmm.openmm.CustomCentroidBondForce.setGroupParameters"]], "setname() (openmm.openmm.customcentroidbondforce method)": [[53, "openmm.openmm.CustomCentroidBondForce.setName"]], "setperbondparametername() (openmm.openmm.customcentroidbondforce method)": [[53, "openmm.openmm.CustomCentroidBondForce.setPerBondParameterName"]], "setusesperiodicboundaryconditions() (openmm.openmm.customcentroidbondforce method)": [[53, "openmm.openmm.CustomCentroidBondForce.setUsesPeriodicBoundaryConditions"]], "thisown (openmm.openmm.customcentroidbondforce property)": [[53, "openmm.openmm.CustomCentroidBondForce.thisown"]], "updateparametersincontext() (openmm.openmm.customcentroidbondforce method)": [[53, "openmm.openmm.CustomCentroidBondForce.updateParametersInContext"]], "usesperiodicboundaryconditions() (openmm.openmm.customcentroidbondforce method)": [[53, "openmm.openmm.CustomCentroidBondForce.usesPeriodicBoundaryConditions"]], "customcompoundbondforce (class in openmm.openmm)": [[54, "openmm.openmm.CustomCompoundBondForce"]], "__init__() (openmm.openmm.customcompoundbondforce method)": [[54, "openmm.openmm.CustomCompoundBondForce.__init__"]], "addbond() (openmm.openmm.customcompoundbondforce method)": [[54, "openmm.openmm.CustomCompoundBondForce.addBond"]], "addenergyparameterderivative() (openmm.openmm.customcompoundbondforce method)": [[54, "openmm.openmm.CustomCompoundBondForce.addEnergyParameterDerivative"]], "addfunction() (openmm.openmm.customcompoundbondforce method)": [[54, "openmm.openmm.CustomCompoundBondForce.addFunction"]], "addglobalparameter() (openmm.openmm.customcompoundbondforce method)": [[54, "openmm.openmm.CustomCompoundBondForce.addGlobalParameter"]], "addperbondparameter() (openmm.openmm.customcompoundbondforce method)": [[54, "openmm.openmm.CustomCompoundBondForce.addPerBondParameter"]], "addtabulatedfunction() (openmm.openmm.customcompoundbondforce method)": [[54, "openmm.openmm.CustomCompoundBondForce.addTabulatedFunction"]], "getbondparameters() (openmm.openmm.customcompoundbondforce method)": [[54, "openmm.openmm.CustomCompoundBondForce.getBondParameters"]], "getenergyfunction() (openmm.openmm.customcompoundbondforce method)": [[54, "openmm.openmm.CustomCompoundBondForce.getEnergyFunction"]], "getenergyparameterderivativename() (openmm.openmm.customcompoundbondforce method)": [[54, "openmm.openmm.CustomCompoundBondForce.getEnergyParameterDerivativeName"]], "getforcegroup() (openmm.openmm.customcompoundbondforce method)": [[54, "openmm.openmm.CustomCompoundBondForce.getForceGroup"]], "getfunctionparameters() (openmm.openmm.customcompoundbondforce method)": [[54, "openmm.openmm.CustomCompoundBondForce.getFunctionParameters"]], "getglobalparameterdefaultvalue() (openmm.openmm.customcompoundbondforce method)": [[54, "openmm.openmm.CustomCompoundBondForce.getGlobalParameterDefaultValue"]], "getglobalparametername() (openmm.openmm.customcompoundbondforce method)": [[54, "openmm.openmm.CustomCompoundBondForce.getGlobalParameterName"]], "getname() (openmm.openmm.customcompoundbondforce method)": [[54, "openmm.openmm.CustomCompoundBondForce.getName"]], "getnumbonds() (openmm.openmm.customcompoundbondforce method)": [[54, "openmm.openmm.CustomCompoundBondForce.getNumBonds"]], "getnumenergyparameterderivatives() (openmm.openmm.customcompoundbondforce method)": [[54, "openmm.openmm.CustomCompoundBondForce.getNumEnergyParameterDerivatives"]], "getnumfunctions() (openmm.openmm.customcompoundbondforce method)": [[54, "openmm.openmm.CustomCompoundBondForce.getNumFunctions"]], "getnumglobalparameters() (openmm.openmm.customcompoundbondforce method)": [[54, "openmm.openmm.CustomCompoundBondForce.getNumGlobalParameters"]], "getnumparticlesperbond() (openmm.openmm.customcompoundbondforce method)": [[54, "openmm.openmm.CustomCompoundBondForce.getNumParticlesPerBond"]], "getnumperbondparameters() (openmm.openmm.customcompoundbondforce method)": [[54, "openmm.openmm.CustomCompoundBondForce.getNumPerBondParameters"]], "getnumtabulatedfunctions() (openmm.openmm.customcompoundbondforce method)": [[54, "openmm.openmm.CustomCompoundBondForce.getNumTabulatedFunctions"]], "getperbondparametername() (openmm.openmm.customcompoundbondforce method)": [[54, "openmm.openmm.CustomCompoundBondForce.getPerBondParameterName"]], "gettabulatedfunction() (openmm.openmm.customcompoundbondforce method)": [[54, "openmm.openmm.CustomCompoundBondForce.getTabulatedFunction"]], "gettabulatedfunctionname() (openmm.openmm.customcompoundbondforce method)": [[54, "openmm.openmm.CustomCompoundBondForce.getTabulatedFunctionName"]], "setbondparameters() (openmm.openmm.customcompoundbondforce method)": [[54, "openmm.openmm.CustomCompoundBondForce.setBondParameters"]], "setenergyfunction() (openmm.openmm.customcompoundbondforce method)": [[54, "openmm.openmm.CustomCompoundBondForce.setEnergyFunction"]], "setforcegroup() (openmm.openmm.customcompoundbondforce method)": [[54, "openmm.openmm.CustomCompoundBondForce.setForceGroup"]], "setfunctionparameters() (openmm.openmm.customcompoundbondforce method)": [[54, "openmm.openmm.CustomCompoundBondForce.setFunctionParameters"]], "setglobalparameterdefaultvalue() (openmm.openmm.customcompoundbondforce method)": [[54, "openmm.openmm.CustomCompoundBondForce.setGlobalParameterDefaultValue"]], "setglobalparametername() (openmm.openmm.customcompoundbondforce method)": [[54, "openmm.openmm.CustomCompoundBondForce.setGlobalParameterName"]], "setname() (openmm.openmm.customcompoundbondforce method)": [[54, "openmm.openmm.CustomCompoundBondForce.setName"]], "setperbondparametername() (openmm.openmm.customcompoundbondforce method)": [[54, "openmm.openmm.CustomCompoundBondForce.setPerBondParameterName"]], "setusesperiodicboundaryconditions() (openmm.openmm.customcompoundbondforce method)": [[54, "openmm.openmm.CustomCompoundBondForce.setUsesPeriodicBoundaryConditions"]], "thisown (openmm.openmm.customcompoundbondforce property)": [[54, "openmm.openmm.CustomCompoundBondForce.thisown"]], "updateparametersincontext() (openmm.openmm.customcompoundbondforce method)": [[54, "openmm.openmm.CustomCompoundBondForce.updateParametersInContext"]], "usesperiodicboundaryconditions() (openmm.openmm.customcompoundbondforce method)": [[54, "openmm.openmm.CustomCompoundBondForce.usesPeriodicBoundaryConditions"]], "customexternalforce (class in openmm.openmm)": [[55, "openmm.openmm.CustomExternalForce"]], "__init__() (openmm.openmm.customexternalforce method)": [[55, "openmm.openmm.CustomExternalForce.__init__"]], "addglobalparameter() (openmm.openmm.customexternalforce method)": [[55, "openmm.openmm.CustomExternalForce.addGlobalParameter"]], "addparticle() (openmm.openmm.customexternalforce method)": [[55, "openmm.openmm.CustomExternalForce.addParticle"]], "addperparticleparameter() (openmm.openmm.customexternalforce method)": [[55, "openmm.openmm.CustomExternalForce.addPerParticleParameter"]], "getenergyfunction() (openmm.openmm.customexternalforce method)": [[55, "openmm.openmm.CustomExternalForce.getEnergyFunction"]], "getforcegroup() (openmm.openmm.customexternalforce method)": [[55, "openmm.openmm.CustomExternalForce.getForceGroup"]], "getglobalparameterdefaultvalue() (openmm.openmm.customexternalforce method)": [[55, "openmm.openmm.CustomExternalForce.getGlobalParameterDefaultValue"]], "getglobalparametername() (openmm.openmm.customexternalforce method)": [[55, "openmm.openmm.CustomExternalForce.getGlobalParameterName"]], "getname() (openmm.openmm.customexternalforce method)": [[55, "openmm.openmm.CustomExternalForce.getName"]], "getnumglobalparameters() (openmm.openmm.customexternalforce method)": [[55, "openmm.openmm.CustomExternalForce.getNumGlobalParameters"]], "getnumparticles() (openmm.openmm.customexternalforce method)": [[55, "openmm.openmm.CustomExternalForce.getNumParticles"]], "getnumperparticleparameters() (openmm.openmm.customexternalforce method)": [[55, "openmm.openmm.CustomExternalForce.getNumPerParticleParameters"]], "getparticleparameters() (openmm.openmm.customexternalforce method)": [[55, "openmm.openmm.CustomExternalForce.getParticleParameters"]], "getperparticleparametername() (openmm.openmm.customexternalforce method)": [[55, "openmm.openmm.CustomExternalForce.getPerParticleParameterName"]], "setenergyfunction() (openmm.openmm.customexternalforce method)": [[55, "openmm.openmm.CustomExternalForce.setEnergyFunction"]], "setforcegroup() (openmm.openmm.customexternalforce method)": [[55, "openmm.openmm.CustomExternalForce.setForceGroup"]], "setglobalparameterdefaultvalue() (openmm.openmm.customexternalforce method)": [[55, "openmm.openmm.CustomExternalForce.setGlobalParameterDefaultValue"]], "setglobalparametername() (openmm.openmm.customexternalforce method)": [[55, "openmm.openmm.CustomExternalForce.setGlobalParameterName"]], "setname() (openmm.openmm.customexternalforce method)": [[55, "openmm.openmm.CustomExternalForce.setName"]], "setparticleparameters() (openmm.openmm.customexternalforce method)": [[55, "openmm.openmm.CustomExternalForce.setParticleParameters"]], "setperparticleparametername() (openmm.openmm.customexternalforce method)": [[55, "openmm.openmm.CustomExternalForce.setPerParticleParameterName"]], "thisown (openmm.openmm.customexternalforce property)": [[55, "openmm.openmm.CustomExternalForce.thisown"]], "updateparametersincontext() (openmm.openmm.customexternalforce method)": [[55, "openmm.openmm.CustomExternalForce.updateParametersInContext"]], "usesperiodicboundaryconditions() (openmm.openmm.customexternalforce method)": [[55, "openmm.openmm.CustomExternalForce.usesPeriodicBoundaryConditions"]], "customgbforce (class in openmm.openmm)": [[56, "openmm.openmm.CustomGBForce"]], "__init__() (openmm.openmm.customgbforce method)": [[56, "openmm.openmm.CustomGBForce.__init__"]], "addcomputedvalue() (openmm.openmm.customgbforce method)": [[56, "openmm.openmm.CustomGBForce.addComputedValue"]], "addenergyparameterderivative() (openmm.openmm.customgbforce method)": [[56, "openmm.openmm.CustomGBForce.addEnergyParameterDerivative"]], "addenergyterm() (openmm.openmm.customgbforce method)": [[56, "openmm.openmm.CustomGBForce.addEnergyTerm"]], "addexclusion() (openmm.openmm.customgbforce method)": [[56, "openmm.openmm.CustomGBForce.addExclusion"]], "addfunction() (openmm.openmm.customgbforce method)": [[56, "openmm.openmm.CustomGBForce.addFunction"]], "addglobalparameter() (openmm.openmm.customgbforce method)": [[56, "openmm.openmm.CustomGBForce.addGlobalParameter"]], "addparticle() (openmm.openmm.customgbforce method)": [[56, "openmm.openmm.CustomGBForce.addParticle"]], "addperparticleparameter() (openmm.openmm.customgbforce method)": [[56, "openmm.openmm.CustomGBForce.addPerParticleParameter"]], "addtabulatedfunction() (openmm.openmm.customgbforce method)": [[56, "openmm.openmm.CustomGBForce.addTabulatedFunction"]], "getcomputedvalueparameters() (openmm.openmm.customgbforce method)": [[56, "openmm.openmm.CustomGBForce.getComputedValueParameters"]], "getcutoffdistance() (openmm.openmm.customgbforce method)": [[56, "openmm.openmm.CustomGBForce.getCutoffDistance"]], "getenergyparameterderivativename() (openmm.openmm.customgbforce method)": [[56, "openmm.openmm.CustomGBForce.getEnergyParameterDerivativeName"]], "getenergytermparameters() (openmm.openmm.customgbforce method)": [[56, "openmm.openmm.CustomGBForce.getEnergyTermParameters"]], "getexclusionparticles() (openmm.openmm.customgbforce method)": [[56, "openmm.openmm.CustomGBForce.getExclusionParticles"]], "getforcegroup() (openmm.openmm.customgbforce method)": [[56, "openmm.openmm.CustomGBForce.getForceGroup"]], "getfunctionparameters() (openmm.openmm.customgbforce method)": [[56, "openmm.openmm.CustomGBForce.getFunctionParameters"]], "getglobalparameterdefaultvalue() (openmm.openmm.customgbforce method)": [[56, "openmm.openmm.CustomGBForce.getGlobalParameterDefaultValue"]], "getglobalparametername() (openmm.openmm.customgbforce method)": [[56, "openmm.openmm.CustomGBForce.getGlobalParameterName"]], "getname() (openmm.openmm.customgbforce method)": [[56, "openmm.openmm.CustomGBForce.getName"]], "getnonbondedmethod() (openmm.openmm.customgbforce method)": [[56, "openmm.openmm.CustomGBForce.getNonbondedMethod"]], "getnumcomputedvalues() (openmm.openmm.customgbforce method)": [[56, "openmm.openmm.CustomGBForce.getNumComputedValues"]], "getnumenergyparameterderivatives() (openmm.openmm.customgbforce method)": [[56, "openmm.openmm.CustomGBForce.getNumEnergyParameterDerivatives"]], "getnumenergyterms() (openmm.openmm.customgbforce method)": [[56, "openmm.openmm.CustomGBForce.getNumEnergyTerms"]], "getnumexclusions() (openmm.openmm.customgbforce method)": [[56, "openmm.openmm.CustomGBForce.getNumExclusions"]], "getnumfunctions() (openmm.openmm.customgbforce method)": [[56, "openmm.openmm.CustomGBForce.getNumFunctions"]], "getnumglobalparameters() (openmm.openmm.customgbforce method)": [[56, "openmm.openmm.CustomGBForce.getNumGlobalParameters"]], "getnumparticles() (openmm.openmm.customgbforce method)": [[56, "openmm.openmm.CustomGBForce.getNumParticles"]], "getnumperparticleparameters() (openmm.openmm.customgbforce method)": [[56, "openmm.openmm.CustomGBForce.getNumPerParticleParameters"]], "getnumtabulatedfunctions() (openmm.openmm.customgbforce method)": [[56, "openmm.openmm.CustomGBForce.getNumTabulatedFunctions"]], "getparticleparameters() (openmm.openmm.customgbforce method)": [[56, "openmm.openmm.CustomGBForce.getParticleParameters"]], "getperparticleparametername() (openmm.openmm.customgbforce method)": [[56, "openmm.openmm.CustomGBForce.getPerParticleParameterName"]], "gettabulatedfunction() (openmm.openmm.customgbforce method)": [[56, "openmm.openmm.CustomGBForce.getTabulatedFunction"]], "gettabulatedfunctionname() (openmm.openmm.customgbforce method)": [[56, "openmm.openmm.CustomGBForce.getTabulatedFunctionName"]], "setcomputedvalueparameters() (openmm.openmm.customgbforce method)": [[56, "openmm.openmm.CustomGBForce.setComputedValueParameters"]], "setcutoffdistance() (openmm.openmm.customgbforce method)": [[56, "openmm.openmm.CustomGBForce.setCutoffDistance"]], "setenergytermparameters() (openmm.openmm.customgbforce method)": [[56, "openmm.openmm.CustomGBForce.setEnergyTermParameters"]], "setexclusionparticles() (openmm.openmm.customgbforce method)": [[56, "openmm.openmm.CustomGBForce.setExclusionParticles"]], "setforcegroup() (openmm.openmm.customgbforce method)": [[56, "openmm.openmm.CustomGBForce.setForceGroup"]], "setfunctionparameters() (openmm.openmm.customgbforce method)": [[56, "openmm.openmm.CustomGBForce.setFunctionParameters"]], "setglobalparameterdefaultvalue() (openmm.openmm.customgbforce method)": [[56, "openmm.openmm.CustomGBForce.setGlobalParameterDefaultValue"]], "setglobalparametername() (openmm.openmm.customgbforce method)": [[56, "openmm.openmm.CustomGBForce.setGlobalParameterName"]], "setname() (openmm.openmm.customgbforce method)": [[56, "openmm.openmm.CustomGBForce.setName"]], "setnonbondedmethod() (openmm.openmm.customgbforce method)": [[56, "openmm.openmm.CustomGBForce.setNonbondedMethod"]], "setparticleparameters() (openmm.openmm.customgbforce method)": [[56, "openmm.openmm.CustomGBForce.setParticleParameters"]], "setperparticleparametername() (openmm.openmm.customgbforce method)": [[56, "openmm.openmm.CustomGBForce.setPerParticleParameterName"]], "thisown (openmm.openmm.customgbforce property)": [[56, "openmm.openmm.CustomGBForce.thisown"]], "updateparametersincontext() (openmm.openmm.customgbforce method)": [[56, "openmm.openmm.CustomGBForce.updateParametersInContext"]], "usesperiodicboundaryconditions() (openmm.openmm.customgbforce method)": [[56, "openmm.openmm.CustomGBForce.usesPeriodicBoundaryConditions"]], "customhbondforce (class in openmm.openmm)": [[57, "openmm.openmm.CustomHbondForce"]], "__init__() (openmm.openmm.customhbondforce method)": [[57, "openmm.openmm.CustomHbondForce.__init__"]], "addacceptor() (openmm.openmm.customhbondforce method)": [[57, "openmm.openmm.CustomHbondForce.addAcceptor"]], "adddonor() (openmm.openmm.customhbondforce method)": [[57, "openmm.openmm.CustomHbondForce.addDonor"]], "addexclusion() (openmm.openmm.customhbondforce method)": [[57, "openmm.openmm.CustomHbondForce.addExclusion"]], "addfunction() (openmm.openmm.customhbondforce method)": [[57, "openmm.openmm.CustomHbondForce.addFunction"]], "addglobalparameter() (openmm.openmm.customhbondforce method)": [[57, "openmm.openmm.CustomHbondForce.addGlobalParameter"]], "addperacceptorparameter() (openmm.openmm.customhbondforce method)": [[57, "openmm.openmm.CustomHbondForce.addPerAcceptorParameter"]], "addperdonorparameter() (openmm.openmm.customhbondforce method)": [[57, "openmm.openmm.CustomHbondForce.addPerDonorParameter"]], "addtabulatedfunction() (openmm.openmm.customhbondforce method)": [[57, "openmm.openmm.CustomHbondForce.addTabulatedFunction"]], "getacceptorparameters() (openmm.openmm.customhbondforce method)": [[57, "openmm.openmm.CustomHbondForce.getAcceptorParameters"]], "getcutoffdistance() (openmm.openmm.customhbondforce method)": [[57, "openmm.openmm.CustomHbondForce.getCutoffDistance"]], "getdonorparameters() (openmm.openmm.customhbondforce method)": [[57, "openmm.openmm.CustomHbondForce.getDonorParameters"]], "getenergyfunction() (openmm.openmm.customhbondforce method)": [[57, "openmm.openmm.CustomHbondForce.getEnergyFunction"]], "getexclusionparticles() (openmm.openmm.customhbondforce method)": [[57, "openmm.openmm.CustomHbondForce.getExclusionParticles"]], "getforcegroup() (openmm.openmm.customhbondforce method)": [[57, "openmm.openmm.CustomHbondForce.getForceGroup"]], "getfunctionparameters() (openmm.openmm.customhbondforce method)": [[57, "openmm.openmm.CustomHbondForce.getFunctionParameters"]], "getglobalparameterdefaultvalue() (openmm.openmm.customhbondforce method)": [[57, "openmm.openmm.CustomHbondForce.getGlobalParameterDefaultValue"]], "getglobalparametername() (openmm.openmm.customhbondforce method)": [[57, "openmm.openmm.CustomHbondForce.getGlobalParameterName"]], "getname() (openmm.openmm.customhbondforce method)": [[57, "openmm.openmm.CustomHbondForce.getName"]], "getnonbondedmethod() (openmm.openmm.customhbondforce method)": [[57, "openmm.openmm.CustomHbondForce.getNonbondedMethod"]], "getnumacceptors() (openmm.openmm.customhbondforce method)": [[57, "openmm.openmm.CustomHbondForce.getNumAcceptors"]], "getnumdonors() (openmm.openmm.customhbondforce method)": [[57, "openmm.openmm.CustomHbondForce.getNumDonors"]], "getnumexclusions() (openmm.openmm.customhbondforce method)": [[57, "openmm.openmm.CustomHbondForce.getNumExclusions"]], "getnumfunctions() (openmm.openmm.customhbondforce method)": [[57, "openmm.openmm.CustomHbondForce.getNumFunctions"]], "getnumglobalparameters() (openmm.openmm.customhbondforce method)": [[57, "openmm.openmm.CustomHbondForce.getNumGlobalParameters"]], "getnumperacceptorparameters() (openmm.openmm.customhbondforce method)": [[57, "openmm.openmm.CustomHbondForce.getNumPerAcceptorParameters"]], "getnumperdonorparameters() (openmm.openmm.customhbondforce method)": [[57, "openmm.openmm.CustomHbondForce.getNumPerDonorParameters"]], "getnumtabulatedfunctions() (openmm.openmm.customhbondforce method)": [[57, "openmm.openmm.CustomHbondForce.getNumTabulatedFunctions"]], "getperacceptorparametername() (openmm.openmm.customhbondforce method)": [[57, "openmm.openmm.CustomHbondForce.getPerAcceptorParameterName"]], "getperdonorparametername() (openmm.openmm.customhbondforce method)": [[57, "openmm.openmm.CustomHbondForce.getPerDonorParameterName"]], "gettabulatedfunction() (openmm.openmm.customhbondforce method)": [[57, "openmm.openmm.CustomHbondForce.getTabulatedFunction"]], "gettabulatedfunctionname() (openmm.openmm.customhbondforce method)": [[57, "openmm.openmm.CustomHbondForce.getTabulatedFunctionName"]], "setacceptorparameters() (openmm.openmm.customhbondforce method)": [[57, "openmm.openmm.CustomHbondForce.setAcceptorParameters"]], "setcutoffdistance() (openmm.openmm.customhbondforce method)": [[57, "openmm.openmm.CustomHbondForce.setCutoffDistance"]], "setdonorparameters() (openmm.openmm.customhbondforce method)": [[57, "openmm.openmm.CustomHbondForce.setDonorParameters"]], "setenergyfunction() (openmm.openmm.customhbondforce method)": [[57, "openmm.openmm.CustomHbondForce.setEnergyFunction"]], "setexclusionparticles() (openmm.openmm.customhbondforce method)": [[57, "openmm.openmm.CustomHbondForce.setExclusionParticles"]], "setforcegroup() (openmm.openmm.customhbondforce method)": [[57, "openmm.openmm.CustomHbondForce.setForceGroup"]], "setfunctionparameters() (openmm.openmm.customhbondforce method)": [[57, "openmm.openmm.CustomHbondForce.setFunctionParameters"]], "setglobalparameterdefaultvalue() (openmm.openmm.customhbondforce method)": [[57, "openmm.openmm.CustomHbondForce.setGlobalParameterDefaultValue"]], "setglobalparametername() (openmm.openmm.customhbondforce method)": [[57, "openmm.openmm.CustomHbondForce.setGlobalParameterName"]], "setname() (openmm.openmm.customhbondforce method)": [[57, "openmm.openmm.CustomHbondForce.setName"]], "setnonbondedmethod() (openmm.openmm.customhbondforce method)": [[57, "openmm.openmm.CustomHbondForce.setNonbondedMethod"]], "setperacceptorparametername() (openmm.openmm.customhbondforce method)": [[57, "openmm.openmm.CustomHbondForce.setPerAcceptorParameterName"]], "setperdonorparametername() (openmm.openmm.customhbondforce method)": [[57, "openmm.openmm.CustomHbondForce.setPerDonorParameterName"]], "thisown (openmm.openmm.customhbondforce property)": [[57, "openmm.openmm.CustomHbondForce.thisown"]], "updateparametersincontext() (openmm.openmm.customhbondforce method)": [[57, "openmm.openmm.CustomHbondForce.updateParametersInContext"]], "usesperiodicboundaryconditions() (openmm.openmm.customhbondforce method)": [[57, "openmm.openmm.CustomHbondForce.usesPeriodicBoundaryConditions"]], "customintegrator (class in openmm.openmm)": [[58, "openmm.openmm.CustomIntegrator"]], "__init__() (openmm.openmm.customintegrator method)": [[58, "openmm.openmm.CustomIntegrator.__init__"]], "addcomputeglobal() (openmm.openmm.customintegrator method)": [[58, "openmm.openmm.CustomIntegrator.addComputeGlobal"]], "addcomputeperdof() (openmm.openmm.customintegrator method)": [[58, "openmm.openmm.CustomIntegrator.addComputePerDof"]], "addcomputesum() (openmm.openmm.customintegrator method)": [[58, "openmm.openmm.CustomIntegrator.addComputeSum"]], "addconstrainpositions() (openmm.openmm.customintegrator method)": [[58, "openmm.openmm.CustomIntegrator.addConstrainPositions"]], "addconstrainvelocities() (openmm.openmm.customintegrator method)": [[58, "openmm.openmm.CustomIntegrator.addConstrainVelocities"]], "addglobalvariable() (openmm.openmm.customintegrator method)": [[58, "openmm.openmm.CustomIntegrator.addGlobalVariable"]], "addperdofvariable() (openmm.openmm.customintegrator method)": [[58, "openmm.openmm.CustomIntegrator.addPerDofVariable"]], "addtabulatedfunction() (openmm.openmm.customintegrator method)": [[58, "openmm.openmm.CustomIntegrator.addTabulatedFunction"]], "addupdatecontextstate() (openmm.openmm.customintegrator method)": [[58, "openmm.openmm.CustomIntegrator.addUpdateContextState"]], "beginifblock() (openmm.openmm.customintegrator method)": [[58, "openmm.openmm.CustomIntegrator.beginIfBlock"]], "beginwhileblock() (openmm.openmm.customintegrator method)": [[58, "openmm.openmm.CustomIntegrator.beginWhileBlock"]], "endblock() (openmm.openmm.customintegrator method)": [[58, "openmm.openmm.CustomIntegrator.endBlock"]], "getcomputationstep() (openmm.openmm.customintegrator method)": [[58, "openmm.openmm.CustomIntegrator.getComputationStep"]], "getconstrainttolerance() (openmm.openmm.customintegrator method)": [[58, "openmm.openmm.CustomIntegrator.getConstraintTolerance"]], "getglobalvariable() (openmm.openmm.customintegrator method)": [[58, "openmm.openmm.CustomIntegrator.getGlobalVariable"]], "getglobalvariablebyname() (openmm.openmm.customintegrator method)": [[58, "openmm.openmm.CustomIntegrator.getGlobalVariableByName"]], "getglobalvariablename() (openmm.openmm.customintegrator method)": [[58, "openmm.openmm.CustomIntegrator.getGlobalVariableName"]], "getintegrationforcegroups() (openmm.openmm.customintegrator method)": [[58, "openmm.openmm.CustomIntegrator.getIntegrationForceGroups"]], "getkineticenergyexpression() (openmm.openmm.customintegrator method)": [[58, "openmm.openmm.CustomIntegrator.getKineticEnergyExpression"]], "getnumcomputations() (openmm.openmm.customintegrator method)": [[58, "openmm.openmm.CustomIntegrator.getNumComputations"]], "getnumglobalvariables() (openmm.openmm.customintegrator method)": [[58, "openmm.openmm.CustomIntegrator.getNumGlobalVariables"]], "getnumperdofvariables() (openmm.openmm.customintegrator method)": [[58, "openmm.openmm.CustomIntegrator.getNumPerDofVariables"]], "getnumtabulatedfunctions() (openmm.openmm.customintegrator method)": [[58, "openmm.openmm.CustomIntegrator.getNumTabulatedFunctions"]], "getperdofvariable() (openmm.openmm.customintegrator method)": [[58, "openmm.openmm.CustomIntegrator.getPerDofVariable"]], "getperdofvariablebyname() (openmm.openmm.customintegrator method)": [[58, "openmm.openmm.CustomIntegrator.getPerDofVariableByName"]], "getperdofvariablename() (openmm.openmm.customintegrator method)": [[58, "openmm.openmm.CustomIntegrator.getPerDofVariableName"]], "getrandomnumberseed() (openmm.openmm.customintegrator method)": [[58, "openmm.openmm.CustomIntegrator.getRandomNumberSeed"]], "getstepsize() (openmm.openmm.customintegrator method)": [[58, "openmm.openmm.CustomIntegrator.getStepSize"]], "gettabulatedfunction() (openmm.openmm.customintegrator method)": [[58, "openmm.openmm.CustomIntegrator.getTabulatedFunction"]], "gettabulatedfunctionname() (openmm.openmm.customintegrator method)": [[58, "openmm.openmm.CustomIntegrator.getTabulatedFunctionName"]], "setconstrainttolerance() (openmm.openmm.customintegrator method)": [[58, "openmm.openmm.CustomIntegrator.setConstraintTolerance"]], "setglobalvariable() (openmm.openmm.customintegrator method)": [[58, "openmm.openmm.CustomIntegrator.setGlobalVariable"]], "setglobalvariablebyname() (openmm.openmm.customintegrator method)": [[58, "openmm.openmm.CustomIntegrator.setGlobalVariableByName"]], "setintegrationforcegroups() (openmm.openmm.customintegrator method)": [[58, "openmm.openmm.CustomIntegrator.setIntegrationForceGroups"]], "setkineticenergyexpression() (openmm.openmm.customintegrator method)": [[58, "openmm.openmm.CustomIntegrator.setKineticEnergyExpression"]], "setperdofvariable() (openmm.openmm.customintegrator method)": [[58, "openmm.openmm.CustomIntegrator.setPerDofVariable"]], "setperdofvariablebyname() (openmm.openmm.customintegrator method)": [[58, "openmm.openmm.CustomIntegrator.setPerDofVariableByName"]], "setrandomnumberseed() (openmm.openmm.customintegrator method)": [[58, "openmm.openmm.CustomIntegrator.setRandomNumberSeed"]], "setstepsize() (openmm.openmm.customintegrator method)": [[58, "openmm.openmm.CustomIntegrator.setStepSize"]], "step() (openmm.openmm.customintegrator method)": [[58, "openmm.openmm.CustomIntegrator.step"]], "thisown (openmm.openmm.customintegrator property)": [[58, "openmm.openmm.CustomIntegrator.thisown"]], "custommanyparticleforce (class in openmm.openmm)": [[59, "openmm.openmm.CustomManyParticleForce"]], "__init__() (openmm.openmm.custommanyparticleforce method)": [[59, "openmm.openmm.CustomManyParticleForce.__init__"]], "addexclusion() (openmm.openmm.custommanyparticleforce method)": [[59, "openmm.openmm.CustomManyParticleForce.addExclusion"]], "addglobalparameter() (openmm.openmm.custommanyparticleforce method)": [[59, "openmm.openmm.CustomManyParticleForce.addGlobalParameter"]], "addparticle() (openmm.openmm.custommanyparticleforce method)": [[59, "openmm.openmm.CustomManyParticleForce.addParticle"]], "addperparticleparameter() (openmm.openmm.custommanyparticleforce method)": [[59, "openmm.openmm.CustomManyParticleForce.addPerParticleParameter"]], "addtabulatedfunction() (openmm.openmm.custommanyparticleforce method)": [[59, "openmm.openmm.CustomManyParticleForce.addTabulatedFunction"]], "createexclusionsfrombonds() (openmm.openmm.custommanyparticleforce method)": [[59, "openmm.openmm.CustomManyParticleForce.createExclusionsFromBonds"]], "getcutoffdistance() (openmm.openmm.custommanyparticleforce method)": [[59, "openmm.openmm.CustomManyParticleForce.getCutoffDistance"]], "getenergyfunction() (openmm.openmm.custommanyparticleforce method)": [[59, "openmm.openmm.CustomManyParticleForce.getEnergyFunction"]], "getexclusionparticles() (openmm.openmm.custommanyparticleforce method)": [[59, "openmm.openmm.CustomManyParticleForce.getExclusionParticles"]], "getforcegroup() (openmm.openmm.custommanyparticleforce method)": [[59, "openmm.openmm.CustomManyParticleForce.getForceGroup"]], "getglobalparameterdefaultvalue() (openmm.openmm.custommanyparticleforce method)": [[59, "openmm.openmm.CustomManyParticleForce.getGlobalParameterDefaultValue"]], "getglobalparametername() (openmm.openmm.custommanyparticleforce method)": [[59, "openmm.openmm.CustomManyParticleForce.getGlobalParameterName"]], "getname() (openmm.openmm.custommanyparticleforce method)": [[59, "openmm.openmm.CustomManyParticleForce.getName"]], "getnonbondedmethod() (openmm.openmm.custommanyparticleforce method)": [[59, "openmm.openmm.CustomManyParticleForce.getNonbondedMethod"]], "getnumexclusions() (openmm.openmm.custommanyparticleforce method)": [[59, "openmm.openmm.CustomManyParticleForce.getNumExclusions"]], "getnumglobalparameters() (openmm.openmm.custommanyparticleforce method)": [[59, "openmm.openmm.CustomManyParticleForce.getNumGlobalParameters"]], "getnumparticles() (openmm.openmm.custommanyparticleforce method)": [[59, "openmm.openmm.CustomManyParticleForce.getNumParticles"]], "getnumparticlesperset() (openmm.openmm.custommanyparticleforce method)": [[59, "openmm.openmm.CustomManyParticleForce.getNumParticlesPerSet"]], "getnumperparticleparameters() (openmm.openmm.custommanyparticleforce method)": [[59, "openmm.openmm.CustomManyParticleForce.getNumPerParticleParameters"]], "getnumtabulatedfunctions() (openmm.openmm.custommanyparticleforce method)": [[59, "openmm.openmm.CustomManyParticleForce.getNumTabulatedFunctions"]], "getparticleparameters() (openmm.openmm.custommanyparticleforce method)": [[59, "openmm.openmm.CustomManyParticleForce.getParticleParameters"]], "getperparticleparametername() (openmm.openmm.custommanyparticleforce method)": [[59, "openmm.openmm.CustomManyParticleForce.getPerParticleParameterName"]], "getpermutationmode() (openmm.openmm.custommanyparticleforce method)": [[59, "openmm.openmm.CustomManyParticleForce.getPermutationMode"]], "gettabulatedfunction() (openmm.openmm.custommanyparticleforce method)": [[59, "openmm.openmm.CustomManyParticleForce.getTabulatedFunction"]], "gettabulatedfunctionname() (openmm.openmm.custommanyparticleforce method)": [[59, "openmm.openmm.CustomManyParticleForce.getTabulatedFunctionName"]], "gettypefilter() (openmm.openmm.custommanyparticleforce method)": [[59, "openmm.openmm.CustomManyParticleForce.getTypeFilter"]], "setcutoffdistance() (openmm.openmm.custommanyparticleforce method)": [[59, "openmm.openmm.CustomManyParticleForce.setCutoffDistance"]], "setenergyfunction() (openmm.openmm.custommanyparticleforce method)": [[59, "openmm.openmm.CustomManyParticleForce.setEnergyFunction"]], "setexclusionparticles() (openmm.openmm.custommanyparticleforce method)": [[59, "openmm.openmm.CustomManyParticleForce.setExclusionParticles"]], "setforcegroup() (openmm.openmm.custommanyparticleforce method)": [[59, "openmm.openmm.CustomManyParticleForce.setForceGroup"]], "setglobalparameterdefaultvalue() (openmm.openmm.custommanyparticleforce method)": [[59, "openmm.openmm.CustomManyParticleForce.setGlobalParameterDefaultValue"]], "setglobalparametername() (openmm.openmm.custommanyparticleforce method)": [[59, "openmm.openmm.CustomManyParticleForce.setGlobalParameterName"]], "setname() (openmm.openmm.custommanyparticleforce method)": [[59, "openmm.openmm.CustomManyParticleForce.setName"]], "setnonbondedmethod() (openmm.openmm.custommanyparticleforce method)": [[59, "openmm.openmm.CustomManyParticleForce.setNonbondedMethod"]], "setparticleparameters() (openmm.openmm.custommanyparticleforce method)": [[59, "openmm.openmm.CustomManyParticleForce.setParticleParameters"]], "setperparticleparametername() (openmm.openmm.custommanyparticleforce method)": [[59, "openmm.openmm.CustomManyParticleForce.setPerParticleParameterName"]], "setpermutationmode() (openmm.openmm.custommanyparticleforce method)": [[59, "openmm.openmm.CustomManyParticleForce.setPermutationMode"]], "settypefilter() (openmm.openmm.custommanyparticleforce method)": [[59, "openmm.openmm.CustomManyParticleForce.setTypeFilter"]], "thisown (openmm.openmm.custommanyparticleforce property)": [[59, "openmm.openmm.CustomManyParticleForce.thisown"]], "updateparametersincontext() (openmm.openmm.custommanyparticleforce method)": [[59, "openmm.openmm.CustomManyParticleForce.updateParametersInContext"]], "usesperiodicboundaryconditions() (openmm.openmm.custommanyparticleforce method)": [[59, "openmm.openmm.CustomManyParticleForce.usesPeriodicBoundaryConditions"]], "customnonbondedforce (class in openmm.openmm)": [[60, "openmm.openmm.CustomNonbondedForce"]], "__init__() (openmm.openmm.customnonbondedforce method)": [[60, "openmm.openmm.CustomNonbondedForce.__init__"]], "addcomputedvalue() (openmm.openmm.customnonbondedforce method)": [[60, "openmm.openmm.CustomNonbondedForce.addComputedValue"]], "addenergyparameterderivative() (openmm.openmm.customnonbondedforce method)": [[60, "openmm.openmm.CustomNonbondedForce.addEnergyParameterDerivative"]], "addexclusion() (openmm.openmm.customnonbondedforce method)": [[60, "openmm.openmm.CustomNonbondedForce.addExclusion"]], "addfunction() (openmm.openmm.customnonbondedforce method)": [[60, "openmm.openmm.CustomNonbondedForce.addFunction"]], "addglobalparameter() (openmm.openmm.customnonbondedforce method)": [[60, "openmm.openmm.CustomNonbondedForce.addGlobalParameter"]], "addinteractiongroup() (openmm.openmm.customnonbondedforce method)": [[60, "openmm.openmm.CustomNonbondedForce.addInteractionGroup"]], "addparticle() (openmm.openmm.customnonbondedforce method)": [[60, "openmm.openmm.CustomNonbondedForce.addParticle"]], "addperparticleparameter() (openmm.openmm.customnonbondedforce method)": [[60, "openmm.openmm.CustomNonbondedForce.addPerParticleParameter"]], "addtabulatedfunction() (openmm.openmm.customnonbondedforce method)": [[60, "openmm.openmm.CustomNonbondedForce.addTabulatedFunction"]], "createexclusionsfrombonds() (openmm.openmm.customnonbondedforce method)": [[60, "openmm.openmm.CustomNonbondedForce.createExclusionsFromBonds"]], "getcomputedvalueparameters() (openmm.openmm.customnonbondedforce method)": [[60, "openmm.openmm.CustomNonbondedForce.getComputedValueParameters"]], "getcutoffdistance() (openmm.openmm.customnonbondedforce method)": [[60, "openmm.openmm.CustomNonbondedForce.getCutoffDistance"]], "getenergyfunction() (openmm.openmm.customnonbondedforce method)": [[60, "openmm.openmm.CustomNonbondedForce.getEnergyFunction"]], "getenergyparameterderivativename() (openmm.openmm.customnonbondedforce method)": [[60, "openmm.openmm.CustomNonbondedForce.getEnergyParameterDerivativeName"]], "getexclusionparticles() (openmm.openmm.customnonbondedforce method)": [[60, "openmm.openmm.CustomNonbondedForce.getExclusionParticles"]], "getforcegroup() (openmm.openmm.customnonbondedforce method)": [[60, "openmm.openmm.CustomNonbondedForce.getForceGroup"]], "getfunctionparameters() (openmm.openmm.customnonbondedforce method)": [[60, "openmm.openmm.CustomNonbondedForce.getFunctionParameters"]], "getglobalparameterdefaultvalue() (openmm.openmm.customnonbondedforce method)": [[60, "openmm.openmm.CustomNonbondedForce.getGlobalParameterDefaultValue"]], "getglobalparametername() (openmm.openmm.customnonbondedforce method)": [[60, "openmm.openmm.CustomNonbondedForce.getGlobalParameterName"]], "getinteractiongroupparameters() (openmm.openmm.customnonbondedforce method)": [[60, "openmm.openmm.CustomNonbondedForce.getInteractionGroupParameters"]], "getname() (openmm.openmm.customnonbondedforce method)": [[60, "openmm.openmm.CustomNonbondedForce.getName"]], "getnonbondedmethod() (openmm.openmm.customnonbondedforce method)": [[60, "openmm.openmm.CustomNonbondedForce.getNonbondedMethod"]], "getnumcomputedvalues() (openmm.openmm.customnonbondedforce method)": [[60, "openmm.openmm.CustomNonbondedForce.getNumComputedValues"]], "getnumenergyparameterderivatives() (openmm.openmm.customnonbondedforce method)": [[60, "openmm.openmm.CustomNonbondedForce.getNumEnergyParameterDerivatives"]], "getnumexclusions() (openmm.openmm.customnonbondedforce method)": [[60, "openmm.openmm.CustomNonbondedForce.getNumExclusions"]], "getnumfunctions() (openmm.openmm.customnonbondedforce method)": [[60, "openmm.openmm.CustomNonbondedForce.getNumFunctions"]], "getnumglobalparameters() (openmm.openmm.customnonbondedforce method)": [[60, "openmm.openmm.CustomNonbondedForce.getNumGlobalParameters"]], "getnuminteractiongroups() (openmm.openmm.customnonbondedforce method)": [[60, "openmm.openmm.CustomNonbondedForce.getNumInteractionGroups"]], "getnumparticles() (openmm.openmm.customnonbondedforce method)": [[60, "openmm.openmm.CustomNonbondedForce.getNumParticles"]], "getnumperparticleparameters() (openmm.openmm.customnonbondedforce method)": [[60, "openmm.openmm.CustomNonbondedForce.getNumPerParticleParameters"]], "getnumtabulatedfunctions() (openmm.openmm.customnonbondedforce method)": [[60, "openmm.openmm.CustomNonbondedForce.getNumTabulatedFunctions"]], "getparticleparameters() (openmm.openmm.customnonbondedforce method)": [[60, "openmm.openmm.CustomNonbondedForce.getParticleParameters"]], "getperparticleparametername() (openmm.openmm.customnonbondedforce method)": [[60, "openmm.openmm.CustomNonbondedForce.getPerParticleParameterName"]], "getswitchingdistance() (openmm.openmm.customnonbondedforce method)": [[60, "openmm.openmm.CustomNonbondedForce.getSwitchingDistance"]], "gettabulatedfunction() (openmm.openmm.customnonbondedforce method)": [[60, "openmm.openmm.CustomNonbondedForce.getTabulatedFunction"]], "gettabulatedfunctionname() (openmm.openmm.customnonbondedforce method)": [[60, "openmm.openmm.CustomNonbondedForce.getTabulatedFunctionName"]], "getuselongrangecorrection() (openmm.openmm.customnonbondedforce method)": [[60, "openmm.openmm.CustomNonbondedForce.getUseLongRangeCorrection"]], "getuseswitchingfunction() (openmm.openmm.customnonbondedforce method)": [[60, "openmm.openmm.CustomNonbondedForce.getUseSwitchingFunction"]], "setcomputedvalueparameters() (openmm.openmm.customnonbondedforce method)": [[60, "openmm.openmm.CustomNonbondedForce.setComputedValueParameters"]], "setcutoffdistance() (openmm.openmm.customnonbondedforce method)": [[60, "openmm.openmm.CustomNonbondedForce.setCutoffDistance"]], "setenergyfunction() (openmm.openmm.customnonbondedforce method)": [[60, "openmm.openmm.CustomNonbondedForce.setEnergyFunction"]], "setexclusionparticles() (openmm.openmm.customnonbondedforce method)": [[60, "openmm.openmm.CustomNonbondedForce.setExclusionParticles"]], "setforcegroup() (openmm.openmm.customnonbondedforce method)": [[60, "openmm.openmm.CustomNonbondedForce.setForceGroup"]], "setfunctionparameters() (openmm.openmm.customnonbondedforce method)": [[60, "openmm.openmm.CustomNonbondedForce.setFunctionParameters"]], "setglobalparameterdefaultvalue() (openmm.openmm.customnonbondedforce method)": [[60, "openmm.openmm.CustomNonbondedForce.setGlobalParameterDefaultValue"]], "setglobalparametername() (openmm.openmm.customnonbondedforce method)": [[60, "openmm.openmm.CustomNonbondedForce.setGlobalParameterName"]], "setinteractiongroupparameters() (openmm.openmm.customnonbondedforce method)": [[60, "openmm.openmm.CustomNonbondedForce.setInteractionGroupParameters"]], "setname() (openmm.openmm.customnonbondedforce method)": [[60, "openmm.openmm.CustomNonbondedForce.setName"]], "setnonbondedmethod() (openmm.openmm.customnonbondedforce method)": [[60, "openmm.openmm.CustomNonbondedForce.setNonbondedMethod"]], "setparticleparameters() (openmm.openmm.customnonbondedforce method)": [[60, "openmm.openmm.CustomNonbondedForce.setParticleParameters"]], "setperparticleparametername() (openmm.openmm.customnonbondedforce method)": [[60, "openmm.openmm.CustomNonbondedForce.setPerParticleParameterName"]], "setswitchingdistance() (openmm.openmm.customnonbondedforce method)": [[60, "openmm.openmm.CustomNonbondedForce.setSwitchingDistance"]], "setuselongrangecorrection() (openmm.openmm.customnonbondedforce method)": [[60, "openmm.openmm.CustomNonbondedForce.setUseLongRangeCorrection"]], "setuseswitchingfunction() (openmm.openmm.customnonbondedforce method)": [[60, "openmm.openmm.CustomNonbondedForce.setUseSwitchingFunction"]], "thisown (openmm.openmm.customnonbondedforce property)": [[60, "openmm.openmm.CustomNonbondedForce.thisown"]], "updateparametersincontext() (openmm.openmm.customnonbondedforce method)": [[60, "openmm.openmm.CustomNonbondedForce.updateParametersInContext"]], "usesperiodicboundaryconditions() (openmm.openmm.customnonbondedforce method)": [[60, "openmm.openmm.CustomNonbondedForce.usesPeriodicBoundaryConditions"]], "customtorsionforce (class in openmm.openmm)": [[61, "openmm.openmm.CustomTorsionForce"]], "__init__() (openmm.openmm.customtorsionforce method)": [[61, "openmm.openmm.CustomTorsionForce.__init__"]], "addenergyparameterderivative() (openmm.openmm.customtorsionforce method)": [[61, "openmm.openmm.CustomTorsionForce.addEnergyParameterDerivative"]], "addglobalparameter() (openmm.openmm.customtorsionforce method)": [[61, "openmm.openmm.CustomTorsionForce.addGlobalParameter"]], "addpertorsionparameter() (openmm.openmm.customtorsionforce method)": [[61, "openmm.openmm.CustomTorsionForce.addPerTorsionParameter"]], "addtorsion() (openmm.openmm.customtorsionforce method)": [[61, "openmm.openmm.CustomTorsionForce.addTorsion"]], "getenergyfunction() (openmm.openmm.customtorsionforce method)": [[61, "openmm.openmm.CustomTorsionForce.getEnergyFunction"]], "getenergyparameterderivativename() (openmm.openmm.customtorsionforce method)": [[61, "openmm.openmm.CustomTorsionForce.getEnergyParameterDerivativeName"]], "getforcegroup() (openmm.openmm.customtorsionforce method)": [[61, "openmm.openmm.CustomTorsionForce.getForceGroup"]], "getglobalparameterdefaultvalue() (openmm.openmm.customtorsionforce method)": [[61, "openmm.openmm.CustomTorsionForce.getGlobalParameterDefaultValue"]], "getglobalparametername() (openmm.openmm.customtorsionforce method)": [[61, "openmm.openmm.CustomTorsionForce.getGlobalParameterName"]], "getname() (openmm.openmm.customtorsionforce method)": [[61, "openmm.openmm.CustomTorsionForce.getName"]], "getnumenergyparameterderivatives() (openmm.openmm.customtorsionforce method)": [[61, "openmm.openmm.CustomTorsionForce.getNumEnergyParameterDerivatives"]], "getnumglobalparameters() (openmm.openmm.customtorsionforce method)": [[61, "openmm.openmm.CustomTorsionForce.getNumGlobalParameters"]], "getnumpertorsionparameters() (openmm.openmm.customtorsionforce method)": [[61, "openmm.openmm.CustomTorsionForce.getNumPerTorsionParameters"]], "getnumtorsions() (openmm.openmm.customtorsionforce method)": [[61, "openmm.openmm.CustomTorsionForce.getNumTorsions"]], "getpertorsionparametername() (openmm.openmm.customtorsionforce method)": [[61, "openmm.openmm.CustomTorsionForce.getPerTorsionParameterName"]], "gettorsionparameters() (openmm.openmm.customtorsionforce method)": [[61, "openmm.openmm.CustomTorsionForce.getTorsionParameters"]], "setenergyfunction() (openmm.openmm.customtorsionforce method)": [[61, "openmm.openmm.CustomTorsionForce.setEnergyFunction"]], "setforcegroup() (openmm.openmm.customtorsionforce method)": [[61, "openmm.openmm.CustomTorsionForce.setForceGroup"]], "setglobalparameterdefaultvalue() (openmm.openmm.customtorsionforce method)": [[61, "openmm.openmm.CustomTorsionForce.setGlobalParameterDefaultValue"]], "setglobalparametername() (openmm.openmm.customtorsionforce method)": [[61, "openmm.openmm.CustomTorsionForce.setGlobalParameterName"]], "setname() (openmm.openmm.customtorsionforce method)": [[61, "openmm.openmm.CustomTorsionForce.setName"]], "setpertorsionparametername() (openmm.openmm.customtorsionforce method)": [[61, "openmm.openmm.CustomTorsionForce.setPerTorsionParameterName"]], "settorsionparameters() (openmm.openmm.customtorsionforce method)": [[61, "openmm.openmm.CustomTorsionForce.setTorsionParameters"]], "setusesperiodicboundaryconditions() (openmm.openmm.customtorsionforce method)": [[61, "openmm.openmm.CustomTorsionForce.setUsesPeriodicBoundaryConditions"]], "thisown (openmm.openmm.customtorsionforce property)": [[61, "openmm.openmm.CustomTorsionForce.thisown"]], "updateparametersincontext() (openmm.openmm.customtorsionforce method)": [[61, "openmm.openmm.CustomTorsionForce.updateParametersInContext"]], "usesperiodicboundaryconditions() (openmm.openmm.customtorsionforce method)": [[61, "openmm.openmm.CustomTorsionForce.usesPeriodicBoundaryConditions"]], "copy() (openmm.openmm.discrete1dfunction method)": [[62, "openmm.openmm.Discrete1DFunction.Copy"]], "discrete1dfunction (class in openmm.openmm)": [[62, "openmm.openmm.Discrete1DFunction"]], "__eq__() (openmm.openmm.discrete1dfunction method)": [[62, "openmm.openmm.Discrete1DFunction.__eq__"]], "__init__() (openmm.openmm.discrete1dfunction method)": [[62, "openmm.openmm.Discrete1DFunction.__init__"]], "__ne__() (openmm.openmm.discrete1dfunction method)": [[62, "openmm.openmm.Discrete1DFunction.__ne__"]], "getfunctionparameters() (openmm.openmm.discrete1dfunction method)": [[62, "openmm.openmm.Discrete1DFunction.getFunctionParameters"]], "getperiodic() (openmm.openmm.discrete1dfunction method)": [[62, "openmm.openmm.Discrete1DFunction.getPeriodic"]], "getupdatecount() (openmm.openmm.discrete1dfunction method)": [[62, "openmm.openmm.Discrete1DFunction.getUpdateCount"]], "setfunctionparameters() (openmm.openmm.discrete1dfunction method)": [[62, "openmm.openmm.Discrete1DFunction.setFunctionParameters"]], "thisown (openmm.openmm.discrete1dfunction property)": [[62, "openmm.openmm.Discrete1DFunction.thisown"]], "copy() (openmm.openmm.discrete2dfunction method)": [[63, "openmm.openmm.Discrete2DFunction.Copy"]], "discrete2dfunction (class in openmm.openmm)": [[63, "openmm.openmm.Discrete2DFunction"]], "__eq__() (openmm.openmm.discrete2dfunction method)": [[63, "openmm.openmm.Discrete2DFunction.__eq__"]], "__init__() (openmm.openmm.discrete2dfunction method)": [[63, "openmm.openmm.Discrete2DFunction.__init__"]], "__ne__() (openmm.openmm.discrete2dfunction method)": [[63, "openmm.openmm.Discrete2DFunction.__ne__"]], "getfunctionparameters() (openmm.openmm.discrete2dfunction method)": [[63, "openmm.openmm.Discrete2DFunction.getFunctionParameters"]], "getperiodic() (openmm.openmm.discrete2dfunction method)": [[63, "openmm.openmm.Discrete2DFunction.getPeriodic"]], "getupdatecount() (openmm.openmm.discrete2dfunction method)": [[63, "openmm.openmm.Discrete2DFunction.getUpdateCount"]], "setfunctionparameters() (openmm.openmm.discrete2dfunction method)": [[63, "openmm.openmm.Discrete2DFunction.setFunctionParameters"]], "thisown (openmm.openmm.discrete2dfunction property)": [[63, "openmm.openmm.Discrete2DFunction.thisown"]], "copy() (openmm.openmm.discrete3dfunction method)": [[64, "openmm.openmm.Discrete3DFunction.Copy"]], "discrete3dfunction (class in openmm.openmm)": [[64, "openmm.openmm.Discrete3DFunction"]], "__eq__() (openmm.openmm.discrete3dfunction method)": [[64, "openmm.openmm.Discrete3DFunction.__eq__"]], "__init__() (openmm.openmm.discrete3dfunction method)": [[64, "openmm.openmm.Discrete3DFunction.__init__"]], "__ne__() (openmm.openmm.discrete3dfunction method)": [[64, "openmm.openmm.Discrete3DFunction.__ne__"]], "getfunctionparameters() (openmm.openmm.discrete3dfunction method)": [[64, "openmm.openmm.Discrete3DFunction.getFunctionParameters"]], "getperiodic() (openmm.openmm.discrete3dfunction method)": [[64, "openmm.openmm.Discrete3DFunction.getPeriodic"]], "getupdatecount() (openmm.openmm.discrete3dfunction method)": [[64, "openmm.openmm.Discrete3DFunction.getUpdateCount"]], "setfunctionparameters() (openmm.openmm.discrete3dfunction method)": [[64, "openmm.openmm.Discrete3DFunction.setFunctionParameters"]], "thisown (openmm.openmm.discrete3dfunction property)": [[64, "openmm.openmm.Discrete3DFunction.thisown"]], "drudeforce (class in openmm.openmm)": [[65, "openmm.openmm.DrudeForce"]], "__init__() (openmm.openmm.drudeforce method)": [[65, "openmm.openmm.DrudeForce.__init__"]], "addparticle() (openmm.openmm.drudeforce method)": [[65, "openmm.openmm.DrudeForce.addParticle"]], "addscreenedpair() (openmm.openmm.drudeforce method)": [[65, "openmm.openmm.DrudeForce.addScreenedPair"]], "getforcegroup() (openmm.openmm.drudeforce method)": [[65, "openmm.openmm.DrudeForce.getForceGroup"]], "getname() (openmm.openmm.drudeforce method)": [[65, "openmm.openmm.DrudeForce.getName"]], "getnumparticles() (openmm.openmm.drudeforce method)": [[65, "openmm.openmm.DrudeForce.getNumParticles"]], "getnumscreenedpairs() (openmm.openmm.drudeforce method)": [[65, "openmm.openmm.DrudeForce.getNumScreenedPairs"]], "getparticleparameters() (openmm.openmm.drudeforce method)": [[65, "openmm.openmm.DrudeForce.getParticleParameters"]], "getscreenedpairparameters() (openmm.openmm.drudeforce method)": [[65, "openmm.openmm.DrudeForce.getScreenedPairParameters"]], "setforcegroup() (openmm.openmm.drudeforce method)": [[65, "openmm.openmm.DrudeForce.setForceGroup"]], "setname() (openmm.openmm.drudeforce method)": [[65, "openmm.openmm.DrudeForce.setName"]], "setparticleparameters() (openmm.openmm.drudeforce method)": [[65, "openmm.openmm.DrudeForce.setParticleParameters"]], "setscreenedpairparameters() (openmm.openmm.drudeforce method)": [[65, "openmm.openmm.DrudeForce.setScreenedPairParameters"]], "thisown (openmm.openmm.drudeforce property)": [[65, "openmm.openmm.DrudeForce.thisown"]], "updateparametersincontext() (openmm.openmm.drudeforce method)": [[65, "openmm.openmm.DrudeForce.updateParametersInContext"]], "usesperiodicboundaryconditions() (openmm.openmm.drudeforce method)": [[65, "openmm.openmm.DrudeForce.usesPeriodicBoundaryConditions"]], "drudeintegrator (class in openmm.openmm)": [[66, "openmm.openmm.DrudeIntegrator"]], "__init__() (openmm.openmm.drudeintegrator method)": [[66, "openmm.openmm.DrudeIntegrator.__init__"]], "getconstrainttolerance() (openmm.openmm.drudeintegrator method)": [[66, "openmm.openmm.DrudeIntegrator.getConstraintTolerance"]], "getdrudetemperature() (openmm.openmm.drudeintegrator method)": [[66, "openmm.openmm.DrudeIntegrator.getDrudeTemperature"]], "getintegrationforcegroups() (openmm.openmm.drudeintegrator method)": [[66, "openmm.openmm.DrudeIntegrator.getIntegrationForceGroups"]], "getmaxdrudedistance() (openmm.openmm.drudeintegrator method)": [[66, "openmm.openmm.DrudeIntegrator.getMaxDrudeDistance"]], "getrandomnumberseed() (openmm.openmm.drudeintegrator method)": [[66, "openmm.openmm.DrudeIntegrator.getRandomNumberSeed"]], "getstepsize() (openmm.openmm.drudeintegrator method)": [[66, "openmm.openmm.DrudeIntegrator.getStepSize"]], "setconstrainttolerance() (openmm.openmm.drudeintegrator method)": [[66, "openmm.openmm.DrudeIntegrator.setConstraintTolerance"]], "setdrudetemperature() (openmm.openmm.drudeintegrator method)": [[66, "openmm.openmm.DrudeIntegrator.setDrudeTemperature"]], "setintegrationforcegroups() (openmm.openmm.drudeintegrator method)": [[66, "openmm.openmm.DrudeIntegrator.setIntegrationForceGroups"]], "setmaxdrudedistance() (openmm.openmm.drudeintegrator method)": [[66, "openmm.openmm.DrudeIntegrator.setMaxDrudeDistance"]], "setrandomnumberseed() (openmm.openmm.drudeintegrator method)": [[66, "openmm.openmm.DrudeIntegrator.setRandomNumberSeed"]], "setstepsize() (openmm.openmm.drudeintegrator method)": [[66, "openmm.openmm.DrudeIntegrator.setStepSize"]], "step() (openmm.openmm.drudeintegrator method)": [[66, "openmm.openmm.DrudeIntegrator.step"]], "thisown (openmm.openmm.drudeintegrator property)": [[66, "openmm.openmm.DrudeIntegrator.thisown"]], "drudelangevinintegrator (class in openmm.openmm)": [[67, "openmm.openmm.DrudeLangevinIntegrator"]], "__init__() (openmm.openmm.drudelangevinintegrator method)": [[67, "openmm.openmm.DrudeLangevinIntegrator.__init__"]], "computedrudetemperature() (openmm.openmm.drudelangevinintegrator method)": [[67, "openmm.openmm.DrudeLangevinIntegrator.computeDrudeTemperature"]], "computesystemtemperature() (openmm.openmm.drudelangevinintegrator method)": [[67, "openmm.openmm.DrudeLangevinIntegrator.computeSystemTemperature"]], "getconstrainttolerance() (openmm.openmm.drudelangevinintegrator method)": [[67, "openmm.openmm.DrudeLangevinIntegrator.getConstraintTolerance"]], "getdrudefriction() (openmm.openmm.drudelangevinintegrator method)": [[67, "openmm.openmm.DrudeLangevinIntegrator.getDrudeFriction"]], "getdrudetemperature() (openmm.openmm.drudelangevinintegrator method)": [[67, "openmm.openmm.DrudeLangevinIntegrator.getDrudeTemperature"]], "getfriction() (openmm.openmm.drudelangevinintegrator method)": [[67, "openmm.openmm.DrudeLangevinIntegrator.getFriction"]], "getintegrationforcegroups() (openmm.openmm.drudelangevinintegrator method)": [[67, "openmm.openmm.DrudeLangevinIntegrator.getIntegrationForceGroups"]], "getmaxdrudedistance() (openmm.openmm.drudelangevinintegrator method)": [[67, "openmm.openmm.DrudeLangevinIntegrator.getMaxDrudeDistance"]], "getrandomnumberseed() (openmm.openmm.drudelangevinintegrator method)": [[67, "openmm.openmm.DrudeLangevinIntegrator.getRandomNumberSeed"]], "getstepsize() (openmm.openmm.drudelangevinintegrator method)": [[67, "openmm.openmm.DrudeLangevinIntegrator.getStepSize"]], "gettemperature() (openmm.openmm.drudelangevinintegrator method)": [[67, "openmm.openmm.DrudeLangevinIntegrator.getTemperature"]], "setconstrainttolerance() (openmm.openmm.drudelangevinintegrator method)": [[67, "openmm.openmm.DrudeLangevinIntegrator.setConstraintTolerance"]], "setdrudefriction() (openmm.openmm.drudelangevinintegrator method)": [[67, "openmm.openmm.DrudeLangevinIntegrator.setDrudeFriction"]], "setdrudetemperature() (openmm.openmm.drudelangevinintegrator method)": [[67, "openmm.openmm.DrudeLangevinIntegrator.setDrudeTemperature"]], "setfriction() (openmm.openmm.drudelangevinintegrator method)": [[67, "openmm.openmm.DrudeLangevinIntegrator.setFriction"]], "setintegrationforcegroups() (openmm.openmm.drudelangevinintegrator method)": [[67, "openmm.openmm.DrudeLangevinIntegrator.setIntegrationForceGroups"]], "setmaxdrudedistance() (openmm.openmm.drudelangevinintegrator method)": [[67, "openmm.openmm.DrudeLangevinIntegrator.setMaxDrudeDistance"]], "setrandomnumberseed() (openmm.openmm.drudelangevinintegrator method)": [[67, "openmm.openmm.DrudeLangevinIntegrator.setRandomNumberSeed"]], "setstepsize() (openmm.openmm.drudelangevinintegrator method)": [[67, "openmm.openmm.DrudeLangevinIntegrator.setStepSize"]], "settemperature() (openmm.openmm.drudelangevinintegrator method)": [[67, "openmm.openmm.DrudeLangevinIntegrator.setTemperature"]], "step() (openmm.openmm.drudelangevinintegrator method)": [[67, "openmm.openmm.DrudeLangevinIntegrator.step"]], "thisown (openmm.openmm.drudelangevinintegrator property)": [[67, "openmm.openmm.DrudeLangevinIntegrator.thisown"]], "drudenosehooverintegrator (class in openmm.openmm)": [[68, "openmm.openmm.DrudeNoseHooverIntegrator"]], "__init__() (openmm.openmm.drudenosehooverintegrator method)": [[68, "openmm.openmm.DrudeNoseHooverIntegrator.__init__"]], "addsubsystemthermostat() (openmm.openmm.drudenosehooverintegrator method)": [[68, "openmm.openmm.DrudeNoseHooverIntegrator.addSubsystemThermostat"]], "addthermostat() (openmm.openmm.drudenosehooverintegrator method)": [[68, "openmm.openmm.DrudeNoseHooverIntegrator.addThermostat"]], "computedrudekineticenergy() (openmm.openmm.drudenosehooverintegrator method)": [[68, "openmm.openmm.DrudeNoseHooverIntegrator.computeDrudeKineticEnergy"]], "computedrudetemperature() (openmm.openmm.drudenosehooverintegrator method)": [[68, "openmm.openmm.DrudeNoseHooverIntegrator.computeDrudeTemperature"]], "computeheatbathenergy() (openmm.openmm.drudenosehooverintegrator method)": [[68, "openmm.openmm.DrudeNoseHooverIntegrator.computeHeatBathEnergy"]], "computesystemtemperature() (openmm.openmm.drudenosehooverintegrator method)": [[68, "openmm.openmm.DrudeNoseHooverIntegrator.computeSystemTemperature"]], "computetotalkineticenergy() (openmm.openmm.drudenosehooverintegrator method)": [[68, "openmm.openmm.DrudeNoseHooverIntegrator.computeTotalKineticEnergy"]], "getcollisionfrequency() (openmm.openmm.drudenosehooverintegrator method)": [[68, "openmm.openmm.DrudeNoseHooverIntegrator.getCollisionFrequency"]], "getconstrainttolerance() (openmm.openmm.drudenosehooverintegrator method)": [[68, "openmm.openmm.DrudeNoseHooverIntegrator.getConstraintTolerance"]], "getintegrationforcegroups() (openmm.openmm.drudenosehooverintegrator method)": [[68, "openmm.openmm.DrudeNoseHooverIntegrator.getIntegrationForceGroups"]], "getmaxdrudedistance() (openmm.openmm.drudenosehooverintegrator method)": [[68, "openmm.openmm.DrudeNoseHooverIntegrator.getMaxDrudeDistance"]], "getmaximumpairdistance() (openmm.openmm.drudenosehooverintegrator method)": [[68, "openmm.openmm.DrudeNoseHooverIntegrator.getMaximumPairDistance"]], "getnumthermostats() (openmm.openmm.drudenosehooverintegrator method)": [[68, "openmm.openmm.DrudeNoseHooverIntegrator.getNumThermostats"]], "getrelativecollisionfrequency() (openmm.openmm.drudenosehooverintegrator method)": [[68, "openmm.openmm.DrudeNoseHooverIntegrator.getRelativeCollisionFrequency"]], "getrelativetemperature() (openmm.openmm.drudenosehooverintegrator method)": [[68, "openmm.openmm.DrudeNoseHooverIntegrator.getRelativeTemperature"]], "getstepsize() (openmm.openmm.drudenosehooverintegrator method)": [[68, "openmm.openmm.DrudeNoseHooverIntegrator.getStepSize"]], "gettemperature() (openmm.openmm.drudenosehooverintegrator method)": [[68, "openmm.openmm.DrudeNoseHooverIntegrator.getTemperature"]], "getthermostat() (openmm.openmm.drudenosehooverintegrator method)": [[68, "openmm.openmm.DrudeNoseHooverIntegrator.getThermostat"]], "hassubsystemthermostats() (openmm.openmm.drudenosehooverintegrator method)": [[68, "openmm.openmm.DrudeNoseHooverIntegrator.hasSubsystemThermostats"]], "initialize() (openmm.openmm.drudenosehooverintegrator method)": [[68, "openmm.openmm.DrudeNoseHooverIntegrator.initialize"]], "setcollisionfrequency() (openmm.openmm.drudenosehooverintegrator method)": [[68, "openmm.openmm.DrudeNoseHooverIntegrator.setCollisionFrequency"]], "setconstrainttolerance() (openmm.openmm.drudenosehooverintegrator method)": [[68, "openmm.openmm.DrudeNoseHooverIntegrator.setConstraintTolerance"]], "setintegrationforcegroups() (openmm.openmm.drudenosehooverintegrator method)": [[68, "openmm.openmm.DrudeNoseHooverIntegrator.setIntegrationForceGroups"]], "setmaxdrudedistance() (openmm.openmm.drudenosehooverintegrator method)": [[68, "openmm.openmm.DrudeNoseHooverIntegrator.setMaxDrudeDistance"]], "setmaximumpairdistance() (openmm.openmm.drudenosehooverintegrator method)": [[68, "openmm.openmm.DrudeNoseHooverIntegrator.setMaximumPairDistance"]], "setrelativecollisionfrequency() (openmm.openmm.drudenosehooverintegrator method)": [[68, "openmm.openmm.DrudeNoseHooverIntegrator.setRelativeCollisionFrequency"]], "setrelativetemperature() (openmm.openmm.drudenosehooverintegrator method)": [[68, "openmm.openmm.DrudeNoseHooverIntegrator.setRelativeTemperature"]], "setstepsize() (openmm.openmm.drudenosehooverintegrator method)": [[68, "openmm.openmm.DrudeNoseHooverIntegrator.setStepSize"]], "settemperature() (openmm.openmm.drudenosehooverintegrator method)": [[68, "openmm.openmm.DrudeNoseHooverIntegrator.setTemperature"]], "step() (openmm.openmm.drudenosehooverintegrator method)": [[68, "openmm.openmm.DrudeNoseHooverIntegrator.step"]], "thisown (openmm.openmm.drudenosehooverintegrator property)": [[68, "openmm.openmm.DrudeNoseHooverIntegrator.thisown"]], "drudescfintegrator (class in openmm.openmm)": [[69, "openmm.openmm.DrudeSCFIntegrator"]], "__init__() (openmm.openmm.drudescfintegrator method)": [[69, "openmm.openmm.DrudeSCFIntegrator.__init__"]], "getconstrainttolerance() (openmm.openmm.drudescfintegrator method)": [[69, "openmm.openmm.DrudeSCFIntegrator.getConstraintTolerance"]], "getdrudetemperature() (openmm.openmm.drudescfintegrator method)": [[69, "openmm.openmm.DrudeSCFIntegrator.getDrudeTemperature"]], "getintegrationforcegroups() (openmm.openmm.drudescfintegrator method)": [[69, "openmm.openmm.DrudeSCFIntegrator.getIntegrationForceGroups"]], "getmaxdrudedistance() (openmm.openmm.drudescfintegrator method)": [[69, "openmm.openmm.DrudeSCFIntegrator.getMaxDrudeDistance"]], "getminimizationerrortolerance() (openmm.openmm.drudescfintegrator method)": [[69, "openmm.openmm.DrudeSCFIntegrator.getMinimizationErrorTolerance"]], "getrandomnumberseed() (openmm.openmm.drudescfintegrator method)": [[69, "openmm.openmm.DrudeSCFIntegrator.getRandomNumberSeed"]], "getstepsize() (openmm.openmm.drudescfintegrator method)": [[69, "openmm.openmm.DrudeSCFIntegrator.getStepSize"]], "setconstrainttolerance() (openmm.openmm.drudescfintegrator method)": [[69, "openmm.openmm.DrudeSCFIntegrator.setConstraintTolerance"]], "setdrudetemperature() (openmm.openmm.drudescfintegrator method)": [[69, "openmm.openmm.DrudeSCFIntegrator.setDrudeTemperature"]], "setintegrationforcegroups() (openmm.openmm.drudescfintegrator method)": [[69, "openmm.openmm.DrudeSCFIntegrator.setIntegrationForceGroups"]], "setmaxdrudedistance() (openmm.openmm.drudescfintegrator method)": [[69, "openmm.openmm.DrudeSCFIntegrator.setMaxDrudeDistance"]], "setminimizationerrortolerance() (openmm.openmm.drudescfintegrator method)": [[69, "openmm.openmm.DrudeSCFIntegrator.setMinimizationErrorTolerance"]], "setrandomnumberseed() (openmm.openmm.drudescfintegrator method)": [[69, "openmm.openmm.DrudeSCFIntegrator.setRandomNumberSeed"]], "setstepsize() (openmm.openmm.drudescfintegrator method)": [[69, "openmm.openmm.DrudeSCFIntegrator.setStepSize"]], "step() (openmm.openmm.drudescfintegrator method)": [[69, "openmm.openmm.DrudeSCFIntegrator.step"]], "thisown (openmm.openmm.drudescfintegrator property)": [[69, "openmm.openmm.DrudeSCFIntegrator.thisown"]], "force (class in openmm.openmm)": [[70, "openmm.openmm.Force"]], "__init__() (openmm.openmm.force method)": [[70, "openmm.openmm.Force.__init__"]], "getforcegroup() (openmm.openmm.force method)": [[70, "openmm.openmm.Force.getForceGroup"]], "getname() (openmm.openmm.force method)": [[70, "openmm.openmm.Force.getName"]], "setforcegroup() (openmm.openmm.force method)": [[70, "openmm.openmm.Force.setForceGroup"]], "setname() (openmm.openmm.force method)": [[70, "openmm.openmm.Force.setName"]], "thisown (openmm.openmm.force property)": [[70, "openmm.openmm.Force.thisown"]], "usesperiodicboundaryconditions() (openmm.openmm.force method)": [[70, "openmm.openmm.Force.usesPeriodicBoundaryConditions"]], "gbsaobcforce (class in openmm.openmm)": [[71, "openmm.openmm.GBSAOBCForce"]], "__init__() (openmm.openmm.gbsaobcforce method)": [[71, "openmm.openmm.GBSAOBCForce.__init__"]], "addparticle() (openmm.openmm.gbsaobcforce method)": [[71, "openmm.openmm.GBSAOBCForce.addParticle"]], "getcutoffdistance() (openmm.openmm.gbsaobcforce method)": [[71, "openmm.openmm.GBSAOBCForce.getCutoffDistance"]], "getforcegroup() (openmm.openmm.gbsaobcforce method)": [[71, "openmm.openmm.GBSAOBCForce.getForceGroup"]], "getname() (openmm.openmm.gbsaobcforce method)": [[71, "openmm.openmm.GBSAOBCForce.getName"]], "getnonbondedmethod() (openmm.openmm.gbsaobcforce method)": [[71, "openmm.openmm.GBSAOBCForce.getNonbondedMethod"]], "getnumparticles() (openmm.openmm.gbsaobcforce method)": [[71, "openmm.openmm.GBSAOBCForce.getNumParticles"]], "getparticleparameters() (openmm.openmm.gbsaobcforce method)": [[71, "openmm.openmm.GBSAOBCForce.getParticleParameters"]], "getsolutedielectric() (openmm.openmm.gbsaobcforce method)": [[71, "openmm.openmm.GBSAOBCForce.getSoluteDielectric"]], "getsolventdielectric() (openmm.openmm.gbsaobcforce method)": [[71, "openmm.openmm.GBSAOBCForce.getSolventDielectric"]], "getsurfaceareaenergy() (openmm.openmm.gbsaobcforce method)": [[71, "openmm.openmm.GBSAOBCForce.getSurfaceAreaEnergy"]], "setcutoffdistance() (openmm.openmm.gbsaobcforce method)": [[71, "openmm.openmm.GBSAOBCForce.setCutoffDistance"]], "setforcegroup() (openmm.openmm.gbsaobcforce method)": [[71, "openmm.openmm.GBSAOBCForce.setForceGroup"]], "setname() (openmm.openmm.gbsaobcforce method)": [[71, "openmm.openmm.GBSAOBCForce.setName"]], "setnonbondedmethod() (openmm.openmm.gbsaobcforce method)": [[71, "openmm.openmm.GBSAOBCForce.setNonbondedMethod"]], "setparticleparameters() (openmm.openmm.gbsaobcforce method)": [[71, "openmm.openmm.GBSAOBCForce.setParticleParameters"]], "setsolutedielectric() (openmm.openmm.gbsaobcforce method)": [[71, "openmm.openmm.GBSAOBCForce.setSoluteDielectric"]], "setsolventdielectric() (openmm.openmm.gbsaobcforce method)": [[71, "openmm.openmm.GBSAOBCForce.setSolventDielectric"]], "setsurfaceareaenergy() (openmm.openmm.gbsaobcforce method)": [[71, "openmm.openmm.GBSAOBCForce.setSurfaceAreaEnergy"]], "thisown (openmm.openmm.gbsaobcforce property)": [[71, "openmm.openmm.GBSAOBCForce.thisown"]], "updateparametersincontext() (openmm.openmm.gbsaobcforce method)": [[71, "openmm.openmm.GBSAOBCForce.updateParametersInContext"]], "usesperiodicboundaryconditions() (openmm.openmm.gbsaobcforce method)": [[71, "openmm.openmm.GBSAOBCForce.usesPeriodicBoundaryConditions"]], "gayberneforce (class in openmm.openmm)": [[72, "openmm.openmm.GayBerneForce"]], "__init__() (openmm.openmm.gayberneforce method)": [[72, "openmm.openmm.GayBerneForce.__init__"]], "addexception() (openmm.openmm.gayberneforce method)": [[72, "openmm.openmm.GayBerneForce.addException"]], "addparticle() (openmm.openmm.gayberneforce method)": [[72, "openmm.openmm.GayBerneForce.addParticle"]], "getcutoffdistance() (openmm.openmm.gayberneforce method)": [[72, "openmm.openmm.GayBerneForce.getCutoffDistance"]], "getexceptionparameters() (openmm.openmm.gayberneforce method)": [[72, "openmm.openmm.GayBerneForce.getExceptionParameters"]], "getforcegroup() (openmm.openmm.gayberneforce method)": [[72, "openmm.openmm.GayBerneForce.getForceGroup"]], "getname() (openmm.openmm.gayberneforce method)": [[72, "openmm.openmm.GayBerneForce.getName"]], "getnonbondedmethod() (openmm.openmm.gayberneforce method)": [[72, "openmm.openmm.GayBerneForce.getNonbondedMethod"]], "getnumexceptions() (openmm.openmm.gayberneforce method)": [[72, "openmm.openmm.GayBerneForce.getNumExceptions"]], "getnumparticles() (openmm.openmm.gayberneforce method)": [[72, "openmm.openmm.GayBerneForce.getNumParticles"]], "getparticleparameters() (openmm.openmm.gayberneforce method)": [[72, "openmm.openmm.GayBerneForce.getParticleParameters"]], "getswitchingdistance() (openmm.openmm.gayberneforce method)": [[72, "openmm.openmm.GayBerneForce.getSwitchingDistance"]], "getuseswitchingfunction() (openmm.openmm.gayberneforce method)": [[72, "openmm.openmm.GayBerneForce.getUseSwitchingFunction"]], "setcutoffdistance() (openmm.openmm.gayberneforce method)": [[72, "openmm.openmm.GayBerneForce.setCutoffDistance"]], "setexceptionparameters() (openmm.openmm.gayberneforce method)": [[72, "openmm.openmm.GayBerneForce.setExceptionParameters"]], "setforcegroup() (openmm.openmm.gayberneforce method)": [[72, "openmm.openmm.GayBerneForce.setForceGroup"]], "setname() (openmm.openmm.gayberneforce method)": [[72, "openmm.openmm.GayBerneForce.setName"]], "setnonbondedmethod() (openmm.openmm.gayberneforce method)": [[72, "openmm.openmm.GayBerneForce.setNonbondedMethod"]], "setparticleparameters() (openmm.openmm.gayberneforce method)": [[72, "openmm.openmm.GayBerneForce.setParticleParameters"]], "setswitchingdistance() (openmm.openmm.gayberneforce method)": [[72, "openmm.openmm.GayBerneForce.setSwitchingDistance"]], "setuseswitchingfunction() (openmm.openmm.gayberneforce method)": [[72, "openmm.openmm.GayBerneForce.setUseSwitchingFunction"]], "thisown (openmm.openmm.gayberneforce property)": [[72, "openmm.openmm.GayBerneForce.thisown"]], "updateparametersincontext() (openmm.openmm.gayberneforce method)": [[72, "openmm.openmm.GayBerneForce.updateParametersInContext"]], "usesperiodicboundaryconditions() (openmm.openmm.gayberneforce method)": [[72, "openmm.openmm.GayBerneForce.usesPeriodicBoundaryConditions"]], "harmonicangleforce (class in openmm.openmm)": [[73, "openmm.openmm.HarmonicAngleForce"]], "__init__() (openmm.openmm.harmonicangleforce method)": [[73, "openmm.openmm.HarmonicAngleForce.__init__"]], "addangle() (openmm.openmm.harmonicangleforce method)": [[73, "openmm.openmm.HarmonicAngleForce.addAngle"]], "getangleparameters() (openmm.openmm.harmonicangleforce method)": [[73, "openmm.openmm.HarmonicAngleForce.getAngleParameters"]], "getforcegroup() (openmm.openmm.harmonicangleforce method)": [[73, "openmm.openmm.HarmonicAngleForce.getForceGroup"]], "getname() (openmm.openmm.harmonicangleforce method)": [[73, "openmm.openmm.HarmonicAngleForce.getName"]], "getnumangles() (openmm.openmm.harmonicangleforce method)": [[73, "openmm.openmm.HarmonicAngleForce.getNumAngles"]], "setangleparameters() (openmm.openmm.harmonicangleforce method)": [[73, "openmm.openmm.HarmonicAngleForce.setAngleParameters"]], "setforcegroup() (openmm.openmm.harmonicangleforce method)": [[73, "openmm.openmm.HarmonicAngleForce.setForceGroup"]], "setname() (openmm.openmm.harmonicangleforce method)": [[73, "openmm.openmm.HarmonicAngleForce.setName"]], "setusesperiodicboundaryconditions() (openmm.openmm.harmonicangleforce method)": [[73, "openmm.openmm.HarmonicAngleForce.setUsesPeriodicBoundaryConditions"]], "thisown (openmm.openmm.harmonicangleforce property)": [[73, "openmm.openmm.HarmonicAngleForce.thisown"]], "updateparametersincontext() (openmm.openmm.harmonicangleforce method)": [[73, "openmm.openmm.HarmonicAngleForce.updateParametersInContext"]], "usesperiodicboundaryconditions() (openmm.openmm.harmonicangleforce method)": [[73, "openmm.openmm.HarmonicAngleForce.usesPeriodicBoundaryConditions"]], "harmonicbondforce (class in openmm.openmm)": [[74, "openmm.openmm.HarmonicBondForce"]], "__init__() (openmm.openmm.harmonicbondforce method)": [[74, "openmm.openmm.HarmonicBondForce.__init__"]], "addbond() (openmm.openmm.harmonicbondforce method)": [[74, "openmm.openmm.HarmonicBondForce.addBond"]], "getbondparameters() (openmm.openmm.harmonicbondforce method)": [[74, "openmm.openmm.HarmonicBondForce.getBondParameters"]], "getforcegroup() (openmm.openmm.harmonicbondforce method)": [[74, "openmm.openmm.HarmonicBondForce.getForceGroup"]], "getname() (openmm.openmm.harmonicbondforce method)": [[74, "openmm.openmm.HarmonicBondForce.getName"]], "getnumbonds() (openmm.openmm.harmonicbondforce method)": [[74, "openmm.openmm.HarmonicBondForce.getNumBonds"]], "setbondparameters() (openmm.openmm.harmonicbondforce method)": [[74, "openmm.openmm.HarmonicBondForce.setBondParameters"]], "setforcegroup() (openmm.openmm.harmonicbondforce method)": [[74, "openmm.openmm.HarmonicBondForce.setForceGroup"]], "setname() (openmm.openmm.harmonicbondforce method)": [[74, "openmm.openmm.HarmonicBondForce.setName"]], "setusesperiodicboundaryconditions() (openmm.openmm.harmonicbondforce method)": [[74, "openmm.openmm.HarmonicBondForce.setUsesPeriodicBoundaryConditions"]], "thisown (openmm.openmm.harmonicbondforce property)": [[74, "openmm.openmm.HarmonicBondForce.thisown"]], "updateparametersincontext() (openmm.openmm.harmonicbondforce method)": [[74, "openmm.openmm.HarmonicBondForce.updateParametersInContext"]], "usesperiodicboundaryconditions() (openmm.openmm.harmonicbondforce method)": [[74, "openmm.openmm.HarmonicBondForce.usesPeriodicBoundaryConditions"]], "hippononbondedforce (class in openmm.openmm)": [[75, "openmm.openmm.HippoNonbondedForce"]], "__init__() (openmm.openmm.hippononbondedforce method)": [[75, "openmm.openmm.HippoNonbondedForce.__init__"]], "addexception() (openmm.openmm.hippononbondedforce method)": [[75, "openmm.openmm.HippoNonbondedForce.addException"]], "addparticle() (openmm.openmm.hippononbondedforce method)": [[75, "openmm.openmm.HippoNonbondedForce.addParticle"]], "getcutoffdistance() (openmm.openmm.hippononbondedforce method)": [[75, "openmm.openmm.HippoNonbondedForce.getCutoffDistance"]], "getdpmeparameters() (openmm.openmm.hippononbondedforce method)": [[75, "openmm.openmm.HippoNonbondedForce.getDPMEParameters"]], "getdpmeparametersincontext() (openmm.openmm.hippononbondedforce method)": [[75, "openmm.openmm.HippoNonbondedForce.getDPMEParametersInContext"]], "getewalderrortolerance() (openmm.openmm.hippononbondedforce method)": [[75, "openmm.openmm.HippoNonbondedForce.getEwaldErrorTolerance"]], "getexceptionparameters() (openmm.openmm.hippononbondedforce method)": [[75, "openmm.openmm.HippoNonbondedForce.getExceptionParameters"]], "getextrapolationcoefficients() (openmm.openmm.hippononbondedforce method)": [[75, "openmm.openmm.HippoNonbondedForce.getExtrapolationCoefficients"]], "getforcegroup() (openmm.openmm.hippononbondedforce method)": [[75, "openmm.openmm.HippoNonbondedForce.getForceGroup"]], "getinduceddipoles() (openmm.openmm.hippononbondedforce method)": [[75, "openmm.openmm.HippoNonbondedForce.getInducedDipoles"]], "getlabframepermanentdipoles() (openmm.openmm.hippononbondedforce method)": [[75, "openmm.openmm.HippoNonbondedForce.getLabFramePermanentDipoles"]], "getname() (openmm.openmm.hippononbondedforce method)": [[75, "openmm.openmm.HippoNonbondedForce.getName"]], "getnonbondedmethod() (openmm.openmm.hippononbondedforce method)": [[75, "openmm.openmm.HippoNonbondedForce.getNonbondedMethod"]], "getnumexceptions() (openmm.openmm.hippononbondedforce method)": [[75, "openmm.openmm.HippoNonbondedForce.getNumExceptions"]], "getnumparticles() (openmm.openmm.hippononbondedforce method)": [[75, "openmm.openmm.HippoNonbondedForce.getNumParticles"]], "getpmeparameters() (openmm.openmm.hippononbondedforce method)": [[75, "openmm.openmm.HippoNonbondedForce.getPMEParameters"]], "getpmeparametersincontext() (openmm.openmm.hippononbondedforce method)": [[75, "openmm.openmm.HippoNonbondedForce.getPMEParametersInContext"]], "getparticleparameters() (openmm.openmm.hippononbondedforce method)": [[75, "openmm.openmm.HippoNonbondedForce.getParticleParameters"]], "getswitchingdistance() (openmm.openmm.hippononbondedforce method)": [[75, "openmm.openmm.HippoNonbondedForce.getSwitchingDistance"]], "setcutoffdistance() (openmm.openmm.hippononbondedforce method)": [[75, "openmm.openmm.HippoNonbondedForce.setCutoffDistance"]], "setdpmeparameters() (openmm.openmm.hippononbondedforce method)": [[75, "openmm.openmm.HippoNonbondedForce.setDPMEParameters"]], "setewalderrortolerance() (openmm.openmm.hippononbondedforce method)": [[75, "openmm.openmm.HippoNonbondedForce.setEwaldErrorTolerance"]], "setexceptionparameters() (openmm.openmm.hippononbondedforce method)": [[75, "openmm.openmm.HippoNonbondedForce.setExceptionParameters"]], "setextrapolationcoefficients() (openmm.openmm.hippononbondedforce method)": [[75, "openmm.openmm.HippoNonbondedForce.setExtrapolationCoefficients"]], "setforcegroup() (openmm.openmm.hippononbondedforce method)": [[75, "openmm.openmm.HippoNonbondedForce.setForceGroup"]], "setname() (openmm.openmm.hippononbondedforce method)": [[75, "openmm.openmm.HippoNonbondedForce.setName"]], "setnonbondedmethod() (openmm.openmm.hippononbondedforce method)": [[75, "openmm.openmm.HippoNonbondedForce.setNonbondedMethod"]], "setpmeparameters() (openmm.openmm.hippononbondedforce method)": [[75, "openmm.openmm.HippoNonbondedForce.setPMEParameters"]], "setparticleparameters() (openmm.openmm.hippononbondedforce method)": [[75, "openmm.openmm.HippoNonbondedForce.setParticleParameters"]], "setswitchingdistance() (openmm.openmm.hippononbondedforce method)": [[75, "openmm.openmm.HippoNonbondedForce.setSwitchingDistance"]], "thisown (openmm.openmm.hippononbondedforce property)": [[75, "openmm.openmm.HippoNonbondedForce.thisown"]], "updateparametersincontext() (openmm.openmm.hippononbondedforce method)": [[75, "openmm.openmm.HippoNonbondedForce.updateParametersInContext"]], "usesperiodicboundaryconditions() (openmm.openmm.hippononbondedforce method)": [[75, "openmm.openmm.HippoNonbondedForce.usesPeriodicBoundaryConditions"]], "integrator (class in openmm.openmm)": [[76, "openmm.openmm.Integrator"]], "__init__() (openmm.openmm.integrator method)": [[76, "openmm.openmm.Integrator.__init__"]], "getconstrainttolerance() (openmm.openmm.integrator method)": [[76, "openmm.openmm.Integrator.getConstraintTolerance"]], "getintegrationforcegroups() (openmm.openmm.integrator method)": [[76, "openmm.openmm.Integrator.getIntegrationForceGroups"]], "getstepsize() (openmm.openmm.integrator method)": [[76, "openmm.openmm.Integrator.getStepSize"]], "setconstrainttolerance() (openmm.openmm.integrator method)": [[76, "openmm.openmm.Integrator.setConstraintTolerance"]], "setintegrationforcegroups() (openmm.openmm.integrator method)": [[76, "openmm.openmm.Integrator.setIntegrationForceGroups"]], "setstepsize() (openmm.openmm.integrator method)": [[76, "openmm.openmm.Integrator.setStepSize"]], "step() (openmm.openmm.integrator method)": [[76, "openmm.openmm.Integrator.step"]], "thisown (openmm.openmm.integrator property)": [[76, "openmm.openmm.Integrator.thisown"]], "langevinintegrator (class in openmm.openmm)": [[77, "openmm.openmm.LangevinIntegrator"]], "__init__() (openmm.openmm.langevinintegrator method)": [[77, "openmm.openmm.LangevinIntegrator.__init__"]], "getconstrainttolerance() (openmm.openmm.langevinintegrator method)": [[77, "openmm.openmm.LangevinIntegrator.getConstraintTolerance"]], "getfriction() (openmm.openmm.langevinintegrator method)": [[77, "openmm.openmm.LangevinIntegrator.getFriction"]], "getintegrationforcegroups() (openmm.openmm.langevinintegrator method)": [[77, "openmm.openmm.LangevinIntegrator.getIntegrationForceGroups"]], "getrandomnumberseed() (openmm.openmm.langevinintegrator method)": [[77, "openmm.openmm.LangevinIntegrator.getRandomNumberSeed"]], "getstepsize() (openmm.openmm.langevinintegrator method)": [[77, "openmm.openmm.LangevinIntegrator.getStepSize"]], "gettemperature() (openmm.openmm.langevinintegrator method)": [[77, "openmm.openmm.LangevinIntegrator.getTemperature"]], "setconstrainttolerance() (openmm.openmm.langevinintegrator method)": [[77, "openmm.openmm.LangevinIntegrator.setConstraintTolerance"]], "setfriction() (openmm.openmm.langevinintegrator method)": [[77, "openmm.openmm.LangevinIntegrator.setFriction"]], "setintegrationforcegroups() (openmm.openmm.langevinintegrator method)": [[77, "openmm.openmm.LangevinIntegrator.setIntegrationForceGroups"]], "setrandomnumberseed() (openmm.openmm.langevinintegrator method)": [[77, "openmm.openmm.LangevinIntegrator.setRandomNumberSeed"]], "setstepsize() (openmm.openmm.langevinintegrator method)": [[77, "openmm.openmm.LangevinIntegrator.setStepSize"]], "settemperature() (openmm.openmm.langevinintegrator method)": [[77, "openmm.openmm.LangevinIntegrator.setTemperature"]], "step() (openmm.openmm.langevinintegrator method)": [[77, "openmm.openmm.LangevinIntegrator.step"]], "thisown (openmm.openmm.langevinintegrator property)": [[77, "openmm.openmm.LangevinIntegrator.thisown"]], "langevinmiddleintegrator (class in openmm.openmm)": [[78, "openmm.openmm.LangevinMiddleIntegrator"]], "__init__() (openmm.openmm.langevinmiddleintegrator method)": [[78, "openmm.openmm.LangevinMiddleIntegrator.__init__"]], "getconstrainttolerance() (openmm.openmm.langevinmiddleintegrator method)": [[78, "openmm.openmm.LangevinMiddleIntegrator.getConstraintTolerance"]], "getfriction() (openmm.openmm.langevinmiddleintegrator method)": [[78, "openmm.openmm.LangevinMiddleIntegrator.getFriction"]], "getintegrationforcegroups() (openmm.openmm.langevinmiddleintegrator method)": [[78, "openmm.openmm.LangevinMiddleIntegrator.getIntegrationForceGroups"]], "getrandomnumberseed() (openmm.openmm.langevinmiddleintegrator method)": [[78, "openmm.openmm.LangevinMiddleIntegrator.getRandomNumberSeed"]], "getstepsize() (openmm.openmm.langevinmiddleintegrator method)": [[78, "openmm.openmm.LangevinMiddleIntegrator.getStepSize"]], "gettemperature() (openmm.openmm.langevinmiddleintegrator method)": [[78, "openmm.openmm.LangevinMiddleIntegrator.getTemperature"]], "setconstrainttolerance() (openmm.openmm.langevinmiddleintegrator method)": [[78, "openmm.openmm.LangevinMiddleIntegrator.setConstraintTolerance"]], "setfriction() (openmm.openmm.langevinmiddleintegrator method)": [[78, "openmm.openmm.LangevinMiddleIntegrator.setFriction"]], "setintegrationforcegroups() (openmm.openmm.langevinmiddleintegrator method)": [[78, "openmm.openmm.LangevinMiddleIntegrator.setIntegrationForceGroups"]], "setrandomnumberseed() (openmm.openmm.langevinmiddleintegrator method)": [[78, "openmm.openmm.LangevinMiddleIntegrator.setRandomNumberSeed"]], "setstepsize() (openmm.openmm.langevinmiddleintegrator method)": [[78, "openmm.openmm.LangevinMiddleIntegrator.setStepSize"]], "settemperature() (openmm.openmm.langevinmiddleintegrator method)": [[78, "openmm.openmm.LangevinMiddleIntegrator.setTemperature"]], "step() (openmm.openmm.langevinmiddleintegrator method)": [[78, "openmm.openmm.LangevinMiddleIntegrator.step"]], "thisown (openmm.openmm.langevinmiddleintegrator property)": [[78, "openmm.openmm.LangevinMiddleIntegrator.thisown"]], "localcoordinatessite (class in openmm.openmm)": [[79, "openmm.openmm.LocalCoordinatesSite"]], "__init__() (openmm.openmm.localcoordinatessite method)": [[79, "openmm.openmm.LocalCoordinatesSite.__init__"]], "getlocalposition() (openmm.openmm.localcoordinatessite method)": [[79, "openmm.openmm.LocalCoordinatesSite.getLocalPosition"]], "getnumparticles() (openmm.openmm.localcoordinatessite method)": [[79, "openmm.openmm.LocalCoordinatesSite.getNumParticles"]], "getoriginweights() (openmm.openmm.localcoordinatessite method)": [[79, "openmm.openmm.LocalCoordinatesSite.getOriginWeights"]], "getparticle() (openmm.openmm.localcoordinatessite method)": [[79, "openmm.openmm.LocalCoordinatesSite.getParticle"]], "getxweights() (openmm.openmm.localcoordinatessite method)": [[79, "openmm.openmm.LocalCoordinatesSite.getXWeights"]], "getyweights() (openmm.openmm.localcoordinatessite method)": [[79, "openmm.openmm.LocalCoordinatesSite.getYWeights"]], "thisown (openmm.openmm.localcoordinatessite property)": [[79, "openmm.openmm.LocalCoordinatesSite.thisown"]], "localenergyminimizer (class in openmm.openmm)": [[80, "openmm.openmm.LocalEnergyMinimizer"]], "__init__() (openmm.openmm.localenergyminimizer method)": [[80, "openmm.openmm.LocalEnergyMinimizer.__init__"]], "minimize() (openmm.openmm.localenergyminimizer static method)": [[80, "openmm.openmm.LocalEnergyMinimizer.minimize"]], "thisown (openmm.openmm.localenergyminimizer property)": [[80, "openmm.openmm.LocalEnergyMinimizer.thisown"]], "montecarloanisotropicbarostat (class in openmm.openmm)": [[81, "openmm.openmm.MonteCarloAnisotropicBarostat"]], "pressurex() (openmm.openmm.montecarloanisotropicbarostat static method)": [[81, "openmm.openmm.MonteCarloAnisotropicBarostat.PressureX"]], "pressurey() (openmm.openmm.montecarloanisotropicbarostat static method)": [[81, "openmm.openmm.MonteCarloAnisotropicBarostat.PressureY"]], "pressurez() (openmm.openmm.montecarloanisotropicbarostat static method)": [[81, "openmm.openmm.MonteCarloAnisotropicBarostat.PressureZ"]], "temperature() (openmm.openmm.montecarloanisotropicbarostat static method)": [[81, "openmm.openmm.MonteCarloAnisotropicBarostat.Temperature"]], "__init__() (openmm.openmm.montecarloanisotropicbarostat method)": [[81, "openmm.openmm.MonteCarloAnisotropicBarostat.__init__"]], "getdefaultpressure() (openmm.openmm.montecarloanisotropicbarostat method)": [[81, "openmm.openmm.MonteCarloAnisotropicBarostat.getDefaultPressure"]], "getdefaulttemperature() (openmm.openmm.montecarloanisotropicbarostat method)": [[81, "openmm.openmm.MonteCarloAnisotropicBarostat.getDefaultTemperature"]], "getforcegroup() (openmm.openmm.montecarloanisotropicbarostat method)": [[81, "openmm.openmm.MonteCarloAnisotropicBarostat.getForceGroup"]], "getfrequency() (openmm.openmm.montecarloanisotropicbarostat method)": [[81, "openmm.openmm.MonteCarloAnisotropicBarostat.getFrequency"]], "getname() (openmm.openmm.montecarloanisotropicbarostat method)": [[81, "openmm.openmm.MonteCarloAnisotropicBarostat.getName"]], "getrandomnumberseed() (openmm.openmm.montecarloanisotropicbarostat method)": [[81, "openmm.openmm.MonteCarloAnisotropicBarostat.getRandomNumberSeed"]], "getscalex() (openmm.openmm.montecarloanisotropicbarostat method)": [[81, "openmm.openmm.MonteCarloAnisotropicBarostat.getScaleX"]], "getscaley() (openmm.openmm.montecarloanisotropicbarostat method)": [[81, "openmm.openmm.MonteCarloAnisotropicBarostat.getScaleY"]], "getscalez() (openmm.openmm.montecarloanisotropicbarostat method)": [[81, "openmm.openmm.MonteCarloAnisotropicBarostat.getScaleZ"]], "setdefaultpressure() (openmm.openmm.montecarloanisotropicbarostat method)": [[81, "openmm.openmm.MonteCarloAnisotropicBarostat.setDefaultPressure"]], "setdefaulttemperature() (openmm.openmm.montecarloanisotropicbarostat method)": [[81, "openmm.openmm.MonteCarloAnisotropicBarostat.setDefaultTemperature"]], "setforcegroup() (openmm.openmm.montecarloanisotropicbarostat method)": [[81, "openmm.openmm.MonteCarloAnisotropicBarostat.setForceGroup"]], "setfrequency() (openmm.openmm.montecarloanisotropicbarostat method)": [[81, "openmm.openmm.MonteCarloAnisotropicBarostat.setFrequency"]], "setname() (openmm.openmm.montecarloanisotropicbarostat method)": [[81, "openmm.openmm.MonteCarloAnisotropicBarostat.setName"]], "setrandomnumberseed() (openmm.openmm.montecarloanisotropicbarostat method)": [[81, "openmm.openmm.MonteCarloAnisotropicBarostat.setRandomNumberSeed"]], "thisown (openmm.openmm.montecarloanisotropicbarostat property)": [[81, "openmm.openmm.MonteCarloAnisotropicBarostat.thisown"]], "usesperiodicboundaryconditions() (openmm.openmm.montecarloanisotropicbarostat method)": [[81, "openmm.openmm.MonteCarloAnisotropicBarostat.usesPeriodicBoundaryConditions"]], "montecarlobarostat (class in openmm.openmm)": [[82, "openmm.openmm.MonteCarloBarostat"]], "pressure() (openmm.openmm.montecarlobarostat static method)": [[82, "openmm.openmm.MonteCarloBarostat.Pressure"]], "temperature() (openmm.openmm.montecarlobarostat static method)": [[82, "openmm.openmm.MonteCarloBarostat.Temperature"]], "__init__() (openmm.openmm.montecarlobarostat method)": [[82, "openmm.openmm.MonteCarloBarostat.__init__"]], "getdefaultpressure() (openmm.openmm.montecarlobarostat method)": [[82, "openmm.openmm.MonteCarloBarostat.getDefaultPressure"]], "getdefaulttemperature() (openmm.openmm.montecarlobarostat method)": [[82, "openmm.openmm.MonteCarloBarostat.getDefaultTemperature"]], "getforcegroup() (openmm.openmm.montecarlobarostat method)": [[82, "openmm.openmm.MonteCarloBarostat.getForceGroup"]], "getfrequency() (openmm.openmm.montecarlobarostat method)": [[82, "openmm.openmm.MonteCarloBarostat.getFrequency"]], "getname() (openmm.openmm.montecarlobarostat method)": [[82, "openmm.openmm.MonteCarloBarostat.getName"]], "getrandomnumberseed() (openmm.openmm.montecarlobarostat method)": [[82, "openmm.openmm.MonteCarloBarostat.getRandomNumberSeed"]], "setdefaultpressure() (openmm.openmm.montecarlobarostat method)": [[82, "openmm.openmm.MonteCarloBarostat.setDefaultPressure"]], "setdefaulttemperature() (openmm.openmm.montecarlobarostat method)": [[82, "openmm.openmm.MonteCarloBarostat.setDefaultTemperature"]], "setforcegroup() (openmm.openmm.montecarlobarostat method)": [[82, "openmm.openmm.MonteCarloBarostat.setForceGroup"]], "setfrequency() (openmm.openmm.montecarlobarostat method)": [[82, "openmm.openmm.MonteCarloBarostat.setFrequency"]], "setname() (openmm.openmm.montecarlobarostat method)": [[82, "openmm.openmm.MonteCarloBarostat.setName"]], "setrandomnumberseed() (openmm.openmm.montecarlobarostat method)": [[82, "openmm.openmm.MonteCarloBarostat.setRandomNumberSeed"]], "thisown (openmm.openmm.montecarlobarostat property)": [[82, "openmm.openmm.MonteCarloBarostat.thisown"]], "usesperiodicboundaryconditions() (openmm.openmm.montecarlobarostat method)": [[82, "openmm.openmm.MonteCarloBarostat.usesPeriodicBoundaryConditions"]], "montecarloflexiblebarostat (class in openmm.openmm)": [[83, "openmm.openmm.MonteCarloFlexibleBarostat"]], "pressure() (openmm.openmm.montecarloflexiblebarostat static method)": [[83, "openmm.openmm.MonteCarloFlexibleBarostat.Pressure"]], "temperature() (openmm.openmm.montecarloflexiblebarostat static method)": [[83, "openmm.openmm.MonteCarloFlexibleBarostat.Temperature"]], "__init__() (openmm.openmm.montecarloflexiblebarostat method)": [[83, "openmm.openmm.MonteCarloFlexibleBarostat.__init__"]], "getdefaultpressure() (openmm.openmm.montecarloflexiblebarostat method)": [[83, "openmm.openmm.MonteCarloFlexibleBarostat.getDefaultPressure"]], "getdefaulttemperature() (openmm.openmm.montecarloflexiblebarostat method)": [[83, "openmm.openmm.MonteCarloFlexibleBarostat.getDefaultTemperature"]], "getforcegroup() (openmm.openmm.montecarloflexiblebarostat method)": [[83, "openmm.openmm.MonteCarloFlexibleBarostat.getForceGroup"]], "getfrequency() (openmm.openmm.montecarloflexiblebarostat method)": [[83, "openmm.openmm.MonteCarloFlexibleBarostat.getFrequency"]], "getname() (openmm.openmm.montecarloflexiblebarostat method)": [[83, "openmm.openmm.MonteCarloFlexibleBarostat.getName"]], "getrandomnumberseed() (openmm.openmm.montecarloflexiblebarostat method)": [[83, "openmm.openmm.MonteCarloFlexibleBarostat.getRandomNumberSeed"]], "getscalemoleculesasrigid() (openmm.openmm.montecarloflexiblebarostat method)": [[83, "openmm.openmm.MonteCarloFlexibleBarostat.getScaleMoleculesAsRigid"]], "setdefaultpressure() (openmm.openmm.montecarloflexiblebarostat method)": [[83, "openmm.openmm.MonteCarloFlexibleBarostat.setDefaultPressure"]], "setdefaulttemperature() (openmm.openmm.montecarloflexiblebarostat method)": [[83, "openmm.openmm.MonteCarloFlexibleBarostat.setDefaultTemperature"]], "setforcegroup() (openmm.openmm.montecarloflexiblebarostat method)": [[83, "openmm.openmm.MonteCarloFlexibleBarostat.setForceGroup"]], "setfrequency() (openmm.openmm.montecarloflexiblebarostat method)": [[83, "openmm.openmm.MonteCarloFlexibleBarostat.setFrequency"]], "setname() (openmm.openmm.montecarloflexiblebarostat method)": [[83, "openmm.openmm.MonteCarloFlexibleBarostat.setName"]], "setrandomnumberseed() (openmm.openmm.montecarloflexiblebarostat method)": [[83, "openmm.openmm.MonteCarloFlexibleBarostat.setRandomNumberSeed"]], "setscalemoleculesasrigid() (openmm.openmm.montecarloflexiblebarostat method)": [[83, "openmm.openmm.MonteCarloFlexibleBarostat.setScaleMoleculesAsRigid"]], "thisown (openmm.openmm.montecarloflexiblebarostat property)": [[83, "openmm.openmm.MonteCarloFlexibleBarostat.thisown"]], "usesperiodicboundaryconditions() (openmm.openmm.montecarloflexiblebarostat method)": [[83, "openmm.openmm.MonteCarloFlexibleBarostat.usesPeriodicBoundaryConditions"]], "montecarlomembranebarostat (class in openmm.openmm)": [[84, "openmm.openmm.MonteCarloMembraneBarostat"]], "pressure() (openmm.openmm.montecarlomembranebarostat static method)": [[84, "openmm.openmm.MonteCarloMembraneBarostat.Pressure"]], "surfacetension() (openmm.openmm.montecarlomembranebarostat static method)": [[84, "openmm.openmm.MonteCarloMembraneBarostat.SurfaceTension"]], "temperature() (openmm.openmm.montecarlomembranebarostat static method)": [[84, "openmm.openmm.MonteCarloMembraneBarostat.Temperature"]], "__init__() (openmm.openmm.montecarlomembranebarostat method)": [[84, "openmm.openmm.MonteCarloMembraneBarostat.__init__"]], "getdefaultpressure() (openmm.openmm.montecarlomembranebarostat method)": [[84, "openmm.openmm.MonteCarloMembraneBarostat.getDefaultPressure"]], "getdefaultsurfacetension() (openmm.openmm.montecarlomembranebarostat method)": [[84, "openmm.openmm.MonteCarloMembraneBarostat.getDefaultSurfaceTension"]], "getdefaulttemperature() (openmm.openmm.montecarlomembranebarostat method)": [[84, "openmm.openmm.MonteCarloMembraneBarostat.getDefaultTemperature"]], "getforcegroup() (openmm.openmm.montecarlomembranebarostat method)": [[84, "openmm.openmm.MonteCarloMembraneBarostat.getForceGroup"]], "getfrequency() (openmm.openmm.montecarlomembranebarostat method)": [[84, "openmm.openmm.MonteCarloMembraneBarostat.getFrequency"]], "getname() (openmm.openmm.montecarlomembranebarostat method)": [[84, "openmm.openmm.MonteCarloMembraneBarostat.getName"]], "getrandomnumberseed() (openmm.openmm.montecarlomembranebarostat method)": [[84, "openmm.openmm.MonteCarloMembraneBarostat.getRandomNumberSeed"]], "getxymode() (openmm.openmm.montecarlomembranebarostat method)": [[84, "openmm.openmm.MonteCarloMembraneBarostat.getXYMode"]], "getzmode() (openmm.openmm.montecarlomembranebarostat method)": [[84, "openmm.openmm.MonteCarloMembraneBarostat.getZMode"]], "setdefaultpressure() (openmm.openmm.montecarlomembranebarostat method)": [[84, "openmm.openmm.MonteCarloMembraneBarostat.setDefaultPressure"]], "setdefaultsurfacetension() (openmm.openmm.montecarlomembranebarostat method)": [[84, "openmm.openmm.MonteCarloMembraneBarostat.setDefaultSurfaceTension"]], "setdefaulttemperature() (openmm.openmm.montecarlomembranebarostat method)": [[84, "openmm.openmm.MonteCarloMembraneBarostat.setDefaultTemperature"]], "setforcegroup() (openmm.openmm.montecarlomembranebarostat method)": [[84, "openmm.openmm.MonteCarloMembraneBarostat.setForceGroup"]], "setfrequency() (openmm.openmm.montecarlomembranebarostat method)": [[84, "openmm.openmm.MonteCarloMembraneBarostat.setFrequency"]], "setname() (openmm.openmm.montecarlomembranebarostat method)": [[84, "openmm.openmm.MonteCarloMembraneBarostat.setName"]], "setrandomnumberseed() (openmm.openmm.montecarlomembranebarostat method)": [[84, "openmm.openmm.MonteCarloMembraneBarostat.setRandomNumberSeed"]], "setxymode() (openmm.openmm.montecarlomembranebarostat method)": [[84, "openmm.openmm.MonteCarloMembraneBarostat.setXYMode"]], "setzmode() (openmm.openmm.montecarlomembranebarostat method)": [[84, "openmm.openmm.MonteCarloMembraneBarostat.setZMode"]], "thisown (openmm.openmm.montecarlomembranebarostat property)": [[84, "openmm.openmm.MonteCarloMembraneBarostat.thisown"]], "usesperiodicboundaryconditions() (openmm.openmm.montecarlomembranebarostat method)": [[84, "openmm.openmm.MonteCarloMembraneBarostat.usesPeriodicBoundaryConditions"]], "nonbondedforce (class in openmm.openmm)": [[85, "openmm.openmm.NonbondedForce"]], "__init__() (openmm.openmm.nonbondedforce method)": [[85, "openmm.openmm.NonbondedForce.__init__"]], "addexception() (openmm.openmm.nonbondedforce method)": [[85, "openmm.openmm.NonbondedForce.addException"]], "addexceptionparameteroffset() (openmm.openmm.nonbondedforce method)": [[85, "openmm.openmm.NonbondedForce.addExceptionParameterOffset"]], "addexception_usingrmin() (openmm.openmm.nonbondedforce method)": [[85, "openmm.openmm.NonbondedForce.addException_usingRMin"]], "addglobalparameter() (openmm.openmm.nonbondedforce method)": [[85, "openmm.openmm.NonbondedForce.addGlobalParameter"]], "addparticle() (openmm.openmm.nonbondedforce method)": [[85, "openmm.openmm.NonbondedForce.addParticle"]], "addparticleparameteroffset() (openmm.openmm.nonbondedforce method)": [[85, "openmm.openmm.NonbondedForce.addParticleParameterOffset"]], "addparticle_usingrvdw() (openmm.openmm.nonbondedforce method)": [[85, "openmm.openmm.NonbondedForce.addParticle_usingRVdw"]], "createexceptionsfrombonds() (openmm.openmm.nonbondedforce method)": [[85, "openmm.openmm.NonbondedForce.createExceptionsFromBonds"]], "getcutoffdistance() (openmm.openmm.nonbondedforce method)": [[85, "openmm.openmm.NonbondedForce.getCutoffDistance"]], "getewalderrortolerance() (openmm.openmm.nonbondedforce method)": [[85, "openmm.openmm.NonbondedForce.getEwaldErrorTolerance"]], "getexceptionparameteroffset() (openmm.openmm.nonbondedforce method)": [[85, "openmm.openmm.NonbondedForce.getExceptionParameterOffset"]], "getexceptionparameters() (openmm.openmm.nonbondedforce method)": [[85, "openmm.openmm.NonbondedForce.getExceptionParameters"]], "getexceptionsuseperiodicboundaryconditions() (openmm.openmm.nonbondedforce method)": [[85, "openmm.openmm.NonbondedForce.getExceptionsUsePeriodicBoundaryConditions"]], "getforcegroup() (openmm.openmm.nonbondedforce method)": [[85, "openmm.openmm.NonbondedForce.getForceGroup"]], "getglobalparameterdefaultvalue() (openmm.openmm.nonbondedforce method)": [[85, "openmm.openmm.NonbondedForce.getGlobalParameterDefaultValue"]], "getglobalparametername() (openmm.openmm.nonbondedforce method)": [[85, "openmm.openmm.NonbondedForce.getGlobalParameterName"]], "getincludedirectspace() (openmm.openmm.nonbondedforce method)": [[85, "openmm.openmm.NonbondedForce.getIncludeDirectSpace"]], "getljpmeparameters() (openmm.openmm.nonbondedforce method)": [[85, "openmm.openmm.NonbondedForce.getLJPMEParameters"]], "getljpmeparametersincontext() (openmm.openmm.nonbondedforce method)": [[85, "openmm.openmm.NonbondedForce.getLJPMEParametersInContext"]], "getname() (openmm.openmm.nonbondedforce method)": [[85, "openmm.openmm.NonbondedForce.getName"]], "getnonbondedmethod() (openmm.openmm.nonbondedforce method)": [[85, "openmm.openmm.NonbondedForce.getNonbondedMethod"]], "getnumexceptionparameteroffsets() (openmm.openmm.nonbondedforce method)": [[85, "openmm.openmm.NonbondedForce.getNumExceptionParameterOffsets"]], "getnumexceptions() (openmm.openmm.nonbondedforce method)": [[85, "openmm.openmm.NonbondedForce.getNumExceptions"]], "getnumglobalparameters() (openmm.openmm.nonbondedforce method)": [[85, "openmm.openmm.NonbondedForce.getNumGlobalParameters"]], "getnumparticleparameteroffsets() (openmm.openmm.nonbondedforce method)": [[85, "openmm.openmm.NonbondedForce.getNumParticleParameterOffsets"]], "getnumparticles() (openmm.openmm.nonbondedforce method)": [[85, "openmm.openmm.NonbondedForce.getNumParticles"]], "getpmeparameters() (openmm.openmm.nonbondedforce method)": [[85, "openmm.openmm.NonbondedForce.getPMEParameters"]], "getpmeparametersincontext() (openmm.openmm.nonbondedforce method)": [[85, "openmm.openmm.NonbondedForce.getPMEParametersInContext"]], "getparticleparameteroffset() (openmm.openmm.nonbondedforce method)": [[85, "openmm.openmm.NonbondedForce.getParticleParameterOffset"]], "getparticleparameters() (openmm.openmm.nonbondedforce method)": [[85, "openmm.openmm.NonbondedForce.getParticleParameters"]], "getreactionfielddielectric() (openmm.openmm.nonbondedforce method)": [[85, "openmm.openmm.NonbondedForce.getReactionFieldDielectric"]], "getreciprocalspaceforcegroup() (openmm.openmm.nonbondedforce method)": [[85, "openmm.openmm.NonbondedForce.getReciprocalSpaceForceGroup"]], "getswitchingdistance() (openmm.openmm.nonbondedforce method)": [[85, "openmm.openmm.NonbondedForce.getSwitchingDistance"]], "getusedispersioncorrection() (openmm.openmm.nonbondedforce method)": [[85, "openmm.openmm.NonbondedForce.getUseDispersionCorrection"]], "getuseswitchingfunction() (openmm.openmm.nonbondedforce method)": [[85, "openmm.openmm.NonbondedForce.getUseSwitchingFunction"]], "setcutoffdistance() (openmm.openmm.nonbondedforce method)": [[85, "openmm.openmm.NonbondedForce.setCutoffDistance"]], "setewalderrortolerance() (openmm.openmm.nonbondedforce method)": [[85, "openmm.openmm.NonbondedForce.setEwaldErrorTolerance"]], "setexceptionparameteroffset() (openmm.openmm.nonbondedforce method)": [[85, "openmm.openmm.NonbondedForce.setExceptionParameterOffset"]], "setexceptionparameters() (openmm.openmm.nonbondedforce method)": [[85, "openmm.openmm.NonbondedForce.setExceptionParameters"]], "setexceptionsuseperiodicboundaryconditions() (openmm.openmm.nonbondedforce method)": [[85, "openmm.openmm.NonbondedForce.setExceptionsUsePeriodicBoundaryConditions"]], "setforcegroup() (openmm.openmm.nonbondedforce method)": [[85, "openmm.openmm.NonbondedForce.setForceGroup"]], "setglobalparameterdefaultvalue() (openmm.openmm.nonbondedforce method)": [[85, "openmm.openmm.NonbondedForce.setGlobalParameterDefaultValue"]], "setglobalparametername() (openmm.openmm.nonbondedforce method)": [[85, "openmm.openmm.NonbondedForce.setGlobalParameterName"]], "setincludedirectspace() (openmm.openmm.nonbondedforce method)": [[85, "openmm.openmm.NonbondedForce.setIncludeDirectSpace"]], "setljpmeparameters() (openmm.openmm.nonbondedforce method)": [[85, "openmm.openmm.NonbondedForce.setLJPMEParameters"]], "setname() (openmm.openmm.nonbondedforce method)": [[85, "openmm.openmm.NonbondedForce.setName"]], "setnonbondedmethod() (openmm.openmm.nonbondedforce method)": [[85, "openmm.openmm.NonbondedForce.setNonbondedMethod"]], "setpmeparameters() (openmm.openmm.nonbondedforce method)": [[85, "openmm.openmm.NonbondedForce.setPMEParameters"]], "setparticleparameteroffset() (openmm.openmm.nonbondedforce method)": [[85, "openmm.openmm.NonbondedForce.setParticleParameterOffset"]], "setparticleparameters() (openmm.openmm.nonbondedforce method)": [[85, "openmm.openmm.NonbondedForce.setParticleParameters"]], "setreactionfielddielectric() (openmm.openmm.nonbondedforce method)": [[85, "openmm.openmm.NonbondedForce.setReactionFieldDielectric"]], "setreciprocalspaceforcegroup() (openmm.openmm.nonbondedforce method)": [[85, "openmm.openmm.NonbondedForce.setReciprocalSpaceForceGroup"]], "setswitchingdistance() (openmm.openmm.nonbondedforce method)": [[85, "openmm.openmm.NonbondedForce.setSwitchingDistance"]], "setusedispersioncorrection() (openmm.openmm.nonbondedforce method)": [[85, "openmm.openmm.NonbondedForce.setUseDispersionCorrection"]], "setuseswitchingfunction() (openmm.openmm.nonbondedforce method)": [[85, "openmm.openmm.NonbondedForce.setUseSwitchingFunction"]], "thisown (openmm.openmm.nonbondedforce property)": [[85, "openmm.openmm.NonbondedForce.thisown"]], "updateparametersincontext() (openmm.openmm.nonbondedforce method)": [[85, "openmm.openmm.NonbondedForce.updateParametersInContext"]], "usesperiodicboundaryconditions() (openmm.openmm.nonbondedforce method)": [[85, "openmm.openmm.NonbondedForce.usesPeriodicBoundaryConditions"]], "nosehooverchain (class in openmm.openmm)": [[86, "openmm.openmm.NoseHooverChain"]], "__init__() (openmm.openmm.nosehooverchain method)": [[86, "openmm.openmm.NoseHooverChain.__init__"]], "getchainid() (openmm.openmm.nosehooverchain method)": [[86, "openmm.openmm.NoseHooverChain.getChainID"]], "getchainlength() (openmm.openmm.nosehooverchain method)": [[86, "openmm.openmm.NoseHooverChain.getChainLength"]], "getcollisionfrequency() (openmm.openmm.nosehooverchain method)": [[86, "openmm.openmm.NoseHooverChain.getCollisionFrequency"]], "getnumdegreesoffreedom() (openmm.openmm.nosehooverchain method)": [[86, "openmm.openmm.NoseHooverChain.getNumDegreesOfFreedom"]], "getnummultitimesteps() (openmm.openmm.nosehooverchain method)": [[86, "openmm.openmm.NoseHooverChain.getNumMultiTimeSteps"]], "getnumyoshidasuzukitimesteps() (openmm.openmm.nosehooverchain method)": [[86, "openmm.openmm.NoseHooverChain.getNumYoshidaSuzukiTimeSteps"]], "getrelativecollisionfrequency() (openmm.openmm.nosehooverchain method)": [[86, "openmm.openmm.NoseHooverChain.getRelativeCollisionFrequency"]], "getrelativetemperature() (openmm.openmm.nosehooverchain method)": [[86, "openmm.openmm.NoseHooverChain.getRelativeTemperature"]], "gettemperature() (openmm.openmm.nosehooverchain method)": [[86, "openmm.openmm.NoseHooverChain.getTemperature"]], "getthermostatedatoms() (openmm.openmm.nosehooverchain method)": [[86, "openmm.openmm.NoseHooverChain.getThermostatedAtoms"]], "getthermostatedpairs() (openmm.openmm.nosehooverchain method)": [[86, "openmm.openmm.NoseHooverChain.getThermostatedPairs"]], "getyoshidasuzukiweights() (openmm.openmm.nosehooverchain method)": [[86, "openmm.openmm.NoseHooverChain.getYoshidaSuzukiWeights"]], "setcollisionfrequency() (openmm.openmm.nosehooverchain method)": [[86, "openmm.openmm.NoseHooverChain.setCollisionFrequency"]], "setnumdegreesoffreedom() (openmm.openmm.nosehooverchain method)": [[86, "openmm.openmm.NoseHooverChain.setNumDegreesOfFreedom"]], "setrelativecollisionfrequency() (openmm.openmm.nosehooverchain method)": [[86, "openmm.openmm.NoseHooverChain.setRelativeCollisionFrequency"]], "setrelativetemperature() (openmm.openmm.nosehooverchain method)": [[86, "openmm.openmm.NoseHooverChain.setRelativeTemperature"]], "settemperature() (openmm.openmm.nosehooverchain method)": [[86, "openmm.openmm.NoseHooverChain.setTemperature"]], "setthermostatedatoms() (openmm.openmm.nosehooverchain method)": [[86, "openmm.openmm.NoseHooverChain.setThermostatedAtoms"]], "setthermostatedpairs() (openmm.openmm.nosehooverchain method)": [[86, "openmm.openmm.NoseHooverChain.setThermostatedPairs"]], "thisown (openmm.openmm.nosehooverchain property)": [[86, "openmm.openmm.NoseHooverChain.thisown"]], "usesperiodicboundaryconditions() (openmm.openmm.nosehooverchain method)": [[86, "openmm.openmm.NoseHooverChain.usesPeriodicBoundaryConditions"]], "nosehooverintegrator (class in openmm.openmm)": [[87, "openmm.openmm.NoseHooverIntegrator"]], "__init__() (openmm.openmm.nosehooverintegrator method)": [[87, "openmm.openmm.NoseHooverIntegrator.__init__"]], "addsubsystemthermostat() (openmm.openmm.nosehooverintegrator method)": [[87, "openmm.openmm.NoseHooverIntegrator.addSubsystemThermostat"]], "addthermostat() (openmm.openmm.nosehooverintegrator method)": [[87, "openmm.openmm.NoseHooverIntegrator.addThermostat"]], "computeheatbathenergy() (openmm.openmm.nosehooverintegrator method)": [[87, "openmm.openmm.NoseHooverIntegrator.computeHeatBathEnergy"]], "getcollisionfrequency() (openmm.openmm.nosehooverintegrator method)": [[87, "openmm.openmm.NoseHooverIntegrator.getCollisionFrequency"]], "getconstrainttolerance() (openmm.openmm.nosehooverintegrator method)": [[87, "openmm.openmm.NoseHooverIntegrator.getConstraintTolerance"]], "getintegrationforcegroups() (openmm.openmm.nosehooverintegrator method)": [[87, "openmm.openmm.NoseHooverIntegrator.getIntegrationForceGroups"]], "getmaximumpairdistance() (openmm.openmm.nosehooverintegrator method)": [[87, "openmm.openmm.NoseHooverIntegrator.getMaximumPairDistance"]], "getnumthermostats() (openmm.openmm.nosehooverintegrator method)": [[87, "openmm.openmm.NoseHooverIntegrator.getNumThermostats"]], "getrelativecollisionfrequency() (openmm.openmm.nosehooverintegrator method)": [[87, "openmm.openmm.NoseHooverIntegrator.getRelativeCollisionFrequency"]], "getrelativetemperature() (openmm.openmm.nosehooverintegrator method)": [[87, "openmm.openmm.NoseHooverIntegrator.getRelativeTemperature"]], "getstepsize() (openmm.openmm.nosehooverintegrator method)": [[87, "openmm.openmm.NoseHooverIntegrator.getStepSize"]], "gettemperature() (openmm.openmm.nosehooverintegrator method)": [[87, "openmm.openmm.NoseHooverIntegrator.getTemperature"]], "getthermostat() (openmm.openmm.nosehooverintegrator method)": [[87, "openmm.openmm.NoseHooverIntegrator.getThermostat"]], "hassubsystemthermostats() (openmm.openmm.nosehooverintegrator method)": [[87, "openmm.openmm.NoseHooverIntegrator.hasSubsystemThermostats"]], "setcollisionfrequency() (openmm.openmm.nosehooverintegrator method)": [[87, "openmm.openmm.NoseHooverIntegrator.setCollisionFrequency"]], "setconstrainttolerance() (openmm.openmm.nosehooverintegrator method)": [[87, "openmm.openmm.NoseHooverIntegrator.setConstraintTolerance"]], "setintegrationforcegroups() (openmm.openmm.nosehooverintegrator method)": [[87, "openmm.openmm.NoseHooverIntegrator.setIntegrationForceGroups"]], "setmaximumpairdistance() (openmm.openmm.nosehooverintegrator method)": [[87, "openmm.openmm.NoseHooverIntegrator.setMaximumPairDistance"]], "setrelativecollisionfrequency() (openmm.openmm.nosehooverintegrator method)": [[87, "openmm.openmm.NoseHooverIntegrator.setRelativeCollisionFrequency"]], "setrelativetemperature() (openmm.openmm.nosehooverintegrator method)": [[87, "openmm.openmm.NoseHooverIntegrator.setRelativeTemperature"]], "setstepsize() (openmm.openmm.nosehooverintegrator method)": [[87, "openmm.openmm.NoseHooverIntegrator.setStepSize"]], "settemperature() (openmm.openmm.nosehooverintegrator method)": [[87, "openmm.openmm.NoseHooverIntegrator.setTemperature"]], "step() (openmm.openmm.nosehooverintegrator method)": [[87, "openmm.openmm.NoseHooverIntegrator.step"]], "thisown (openmm.openmm.nosehooverintegrator property)": [[87, "openmm.openmm.NoseHooverIntegrator.thisown"]], "outofplanesite (class in openmm.openmm)": [[88, "openmm.openmm.OutOfPlaneSite"]], "__init__() (openmm.openmm.outofplanesite method)": [[88, "openmm.openmm.OutOfPlaneSite.__init__"]], "getnumparticles() (openmm.openmm.outofplanesite method)": [[88, "openmm.openmm.OutOfPlaneSite.getNumParticles"]], "getparticle() (openmm.openmm.outofplanesite method)": [[88, "openmm.openmm.OutOfPlaneSite.getParticle"]], "getweight12() (openmm.openmm.outofplanesite method)": [[88, "openmm.openmm.OutOfPlaneSite.getWeight12"]], "getweight13() (openmm.openmm.outofplanesite method)": [[88, "openmm.openmm.OutOfPlaneSite.getWeight13"]], "getweightcross() (openmm.openmm.outofplanesite method)": [[88, "openmm.openmm.OutOfPlaneSite.getWeightCross"]], "thisown (openmm.openmm.outofplanesite property)": [[88, "openmm.openmm.OutOfPlaneSite.thisown"]], "periodictorsionforce (class in openmm.openmm)": [[89, "openmm.openmm.PeriodicTorsionForce"]], "__init__() (openmm.openmm.periodictorsionforce method)": [[89, "openmm.openmm.PeriodicTorsionForce.__init__"]], "addtorsion() (openmm.openmm.periodictorsionforce method)": [[89, "openmm.openmm.PeriodicTorsionForce.addTorsion"]], "getforcegroup() (openmm.openmm.periodictorsionforce method)": [[89, "openmm.openmm.PeriodicTorsionForce.getForceGroup"]], "getname() (openmm.openmm.periodictorsionforce method)": [[89, "openmm.openmm.PeriodicTorsionForce.getName"]], "getnumtorsions() (openmm.openmm.periodictorsionforce method)": [[89, "openmm.openmm.PeriodicTorsionForce.getNumTorsions"]], "gettorsionparameters() (openmm.openmm.periodictorsionforce method)": [[89, "openmm.openmm.PeriodicTorsionForce.getTorsionParameters"]], "setforcegroup() (openmm.openmm.periodictorsionforce method)": [[89, "openmm.openmm.PeriodicTorsionForce.setForceGroup"]], "setname() (openmm.openmm.periodictorsionforce method)": [[89, "openmm.openmm.PeriodicTorsionForce.setName"]], "settorsionparameters() (openmm.openmm.periodictorsionforce method)": [[89, "openmm.openmm.PeriodicTorsionForce.setTorsionParameters"]], "setusesperiodicboundaryconditions() (openmm.openmm.periodictorsionforce method)": [[89, "openmm.openmm.PeriodicTorsionForce.setUsesPeriodicBoundaryConditions"]], "thisown (openmm.openmm.periodictorsionforce property)": [[89, "openmm.openmm.PeriodicTorsionForce.thisown"]], "updateparametersincontext() (openmm.openmm.periodictorsionforce method)": [[89, "openmm.openmm.PeriodicTorsionForce.updateParametersInContext"]], "usesperiodicboundaryconditions() (openmm.openmm.periodictorsionforce method)": [[89, "openmm.openmm.PeriodicTorsionForce.usesPeriodicBoundaryConditions"]], "platform (class in openmm.openmm)": [[90, "openmm.openmm.Platform"]], "__init__() (openmm.openmm.platform method)": [[90, "openmm.openmm.Platform.__init__"]], "findplatform() (openmm.openmm.platform static method)": [[90, "openmm.openmm.Platform.findPlatform"]], "getdefaultpluginsdirectory() (openmm.openmm.platform static method)": [[90, "openmm.openmm.Platform.getDefaultPluginsDirectory"]], "getname() (openmm.openmm.platform method)": [[90, "openmm.openmm.Platform.getName"]], "getnumplatforms() (openmm.openmm.platform static method)": [[90, "openmm.openmm.Platform.getNumPlatforms"]], "getopenmmversion() (openmm.openmm.platform static method)": [[90, "openmm.openmm.Platform.getOpenMMVersion"]], "getplatform() (openmm.openmm.platform static method)": [[90, "openmm.openmm.Platform.getPlatform"]], "getplatformbyname() (openmm.openmm.platform static method)": [[90, "openmm.openmm.Platform.getPlatformByName"]], "getpluginloadfailures() (openmm.openmm.platform static method)": [[90, "openmm.openmm.Platform.getPluginLoadFailures"]], "getpropertydefaultvalue() (openmm.openmm.platform method)": [[90, "openmm.openmm.Platform.getPropertyDefaultValue"]], "getpropertynames() (openmm.openmm.platform method)": [[90, "openmm.openmm.Platform.getPropertyNames"]], "getpropertyvalue() (openmm.openmm.platform method)": [[90, "openmm.openmm.Platform.getPropertyValue"]], "getspeed() (openmm.openmm.platform method)": [[90, "openmm.openmm.Platform.getSpeed"]], "linkedcontextcreated() (openmm.openmm.platform method)": [[90, "openmm.openmm.Platform.linkedContextCreated"]], "loadpluginlibrary() (openmm.openmm.platform static method)": [[90, "openmm.openmm.Platform.loadPluginLibrary"]], "loadpluginsfromdirectory() (openmm.openmm.platform static method)": [[90, "openmm.openmm.Platform.loadPluginsFromDirectory"]], "registerplatform() (openmm.openmm.platform static method)": [[90, "openmm.openmm.Platform.registerPlatform"]], "setpropertydefaultvalue() (openmm.openmm.platform method)": [[90, "openmm.openmm.Platform.setPropertyDefaultValue"]], "setpropertyvalue() (openmm.openmm.platform method)": [[90, "openmm.openmm.Platform.setPropertyValue"]], "supportsdoubleprecision() (openmm.openmm.platform method)": [[90, "openmm.openmm.Platform.supportsDoublePrecision"]], "supportskernels() (openmm.openmm.platform method)": [[90, "openmm.openmm.Platform.supportsKernels"]], "thisown (openmm.openmm.platform property)": [[90, "openmm.openmm.Platform.thisown"]], "rbtorsionforce (class in openmm.openmm)": [[91, "openmm.openmm.RBTorsionForce"]], "__init__() (openmm.openmm.rbtorsionforce method)": [[91, "openmm.openmm.RBTorsionForce.__init__"]], "addtorsion() (openmm.openmm.rbtorsionforce method)": [[91, "openmm.openmm.RBTorsionForce.addTorsion"]], "getforcegroup() (openmm.openmm.rbtorsionforce method)": [[91, "openmm.openmm.RBTorsionForce.getForceGroup"]], "getname() (openmm.openmm.rbtorsionforce method)": [[91, "openmm.openmm.RBTorsionForce.getName"]], "getnumtorsions() (openmm.openmm.rbtorsionforce method)": [[91, "openmm.openmm.RBTorsionForce.getNumTorsions"]], "gettorsionparameters() (openmm.openmm.rbtorsionforce method)": [[91, "openmm.openmm.RBTorsionForce.getTorsionParameters"]], "setforcegroup() (openmm.openmm.rbtorsionforce method)": [[91, "openmm.openmm.RBTorsionForce.setForceGroup"]], "setname() (openmm.openmm.rbtorsionforce method)": [[91, "openmm.openmm.RBTorsionForce.setName"]], "settorsionparameters() (openmm.openmm.rbtorsionforce method)": [[91, "openmm.openmm.RBTorsionForce.setTorsionParameters"]], "setusesperiodicboundaryconditions() (openmm.openmm.rbtorsionforce method)": [[91, "openmm.openmm.RBTorsionForce.setUsesPeriodicBoundaryConditions"]], "thisown (openmm.openmm.rbtorsionforce property)": [[91, "openmm.openmm.RBTorsionForce.thisown"]], "updateparametersincontext() (openmm.openmm.rbtorsionforce method)": [[91, "openmm.openmm.RBTorsionForce.updateParametersInContext"]], "usesperiodicboundaryconditions() (openmm.openmm.rbtorsionforce method)": [[91, "openmm.openmm.RBTorsionForce.usesPeriodicBoundaryConditions"]], "rmsdforce (class in openmm.openmm)": [[92, "openmm.openmm.RMSDForce"]], "__init__() (openmm.openmm.rmsdforce method)": [[92, "openmm.openmm.RMSDForce.__init__"]], "getforcegroup() (openmm.openmm.rmsdforce method)": [[92, "openmm.openmm.RMSDForce.getForceGroup"]], "getname() (openmm.openmm.rmsdforce method)": [[92, "openmm.openmm.RMSDForce.getName"]], "getparticles() (openmm.openmm.rmsdforce method)": [[92, "openmm.openmm.RMSDForce.getParticles"]], "getreferencepositions() (openmm.openmm.rmsdforce method)": [[92, "openmm.openmm.RMSDForce.getReferencePositions"]], "setforcegroup() (openmm.openmm.rmsdforce method)": [[92, "openmm.openmm.RMSDForce.setForceGroup"]], "setname() (openmm.openmm.rmsdforce method)": [[92, "openmm.openmm.RMSDForce.setName"]], "setparticles() (openmm.openmm.rmsdforce method)": [[92, "openmm.openmm.RMSDForce.setParticles"]], "setreferencepositions() (openmm.openmm.rmsdforce method)": [[92, "openmm.openmm.RMSDForce.setReferencePositions"]], "thisown (openmm.openmm.rmsdforce property)": [[92, "openmm.openmm.RMSDForce.thisown"]], "updateparametersincontext() (openmm.openmm.rmsdforce method)": [[92, "openmm.openmm.RMSDForce.updateParametersInContext"]], "usesperiodicboundaryconditions() (openmm.openmm.rmsdforce method)": [[92, "openmm.openmm.RMSDForce.usesPeriodicBoundaryConditions"]], "rpmdintegrator (class in openmm.openmm)": [[93, "openmm.openmm.RPMDIntegrator"]], "__init__() (openmm.openmm.rpmdintegrator method)": [[93, "openmm.openmm.RPMDIntegrator.__init__"]], "getapplythermostat() (openmm.openmm.rpmdintegrator method)": [[93, "openmm.openmm.RPMDIntegrator.getApplyThermostat"]], "getconstrainttolerance() (openmm.openmm.rpmdintegrator method)": [[93, "openmm.openmm.RPMDIntegrator.getConstraintTolerance"]], "getcontractions() (openmm.openmm.rpmdintegrator method)": [[93, "openmm.openmm.RPMDIntegrator.getContractions"]], "getfriction() (openmm.openmm.rpmdintegrator method)": [[93, "openmm.openmm.RPMDIntegrator.getFriction"]], "getintegrationforcegroups() (openmm.openmm.rpmdintegrator method)": [[93, "openmm.openmm.RPMDIntegrator.getIntegrationForceGroups"]], "getnumcopies() (openmm.openmm.rpmdintegrator method)": [[93, "openmm.openmm.RPMDIntegrator.getNumCopies"]], "getrandomnumberseed() (openmm.openmm.rpmdintegrator method)": [[93, "openmm.openmm.RPMDIntegrator.getRandomNumberSeed"]], "getstate() (openmm.openmm.rpmdintegrator method)": [[93, "openmm.openmm.RPMDIntegrator.getState"]], "getstepsize() (openmm.openmm.rpmdintegrator method)": [[93, "openmm.openmm.RPMDIntegrator.getStepSize"]], "gettemperature() (openmm.openmm.rpmdintegrator method)": [[93, "openmm.openmm.RPMDIntegrator.getTemperature"]], "gettotalenergy() (openmm.openmm.rpmdintegrator method)": [[93, "openmm.openmm.RPMDIntegrator.getTotalEnergy"]], "setapplythermostat() (openmm.openmm.rpmdintegrator method)": [[93, "openmm.openmm.RPMDIntegrator.setApplyThermostat"]], "setconstrainttolerance() (openmm.openmm.rpmdintegrator method)": [[93, "openmm.openmm.RPMDIntegrator.setConstraintTolerance"]], "setfriction() (openmm.openmm.rpmdintegrator method)": [[93, "openmm.openmm.RPMDIntegrator.setFriction"]], "setintegrationforcegroups() (openmm.openmm.rpmdintegrator method)": [[93, "openmm.openmm.RPMDIntegrator.setIntegrationForceGroups"]], "setpositions() (openmm.openmm.rpmdintegrator method)": [[93, "openmm.openmm.RPMDIntegrator.setPositions"]], "setrandomnumberseed() (openmm.openmm.rpmdintegrator method)": [[93, "openmm.openmm.RPMDIntegrator.setRandomNumberSeed"]], "setstepsize() (openmm.openmm.rpmdintegrator method)": [[93, "openmm.openmm.RPMDIntegrator.setStepSize"]], "settemperature() (openmm.openmm.rpmdintegrator method)": [[93, "openmm.openmm.RPMDIntegrator.setTemperature"]], "setvelocities() (openmm.openmm.rpmdintegrator method)": [[93, "openmm.openmm.RPMDIntegrator.setVelocities"]], "step() (openmm.openmm.rpmdintegrator method)": [[93, "openmm.openmm.RPMDIntegrator.step"]], "thisown (openmm.openmm.rpmdintegrator property)": [[93, "openmm.openmm.RPMDIntegrator.thisown"]], "pressure() (openmm.openmm.rpmdmontecarlobarostat static method)": [[94, "openmm.openmm.RPMDMonteCarloBarostat.Pressure"]], "rpmdmontecarlobarostat (class in openmm.openmm)": [[94, "openmm.openmm.RPMDMonteCarloBarostat"]], "__init__() (openmm.openmm.rpmdmontecarlobarostat method)": [[94, "openmm.openmm.RPMDMonteCarloBarostat.__init__"]], "getdefaultpressure() (openmm.openmm.rpmdmontecarlobarostat method)": [[94, "openmm.openmm.RPMDMonteCarloBarostat.getDefaultPressure"]], "getforcegroup() (openmm.openmm.rpmdmontecarlobarostat method)": [[94, "openmm.openmm.RPMDMonteCarloBarostat.getForceGroup"]], "getfrequency() (openmm.openmm.rpmdmontecarlobarostat method)": [[94, "openmm.openmm.RPMDMonteCarloBarostat.getFrequency"]], "getname() (openmm.openmm.rpmdmontecarlobarostat method)": [[94, "openmm.openmm.RPMDMonteCarloBarostat.getName"]], "getrandomnumberseed() (openmm.openmm.rpmdmontecarlobarostat method)": [[94, "openmm.openmm.RPMDMonteCarloBarostat.getRandomNumberSeed"]], "setdefaultpressure() (openmm.openmm.rpmdmontecarlobarostat method)": [[94, "openmm.openmm.RPMDMonteCarloBarostat.setDefaultPressure"]], "setforcegroup() (openmm.openmm.rpmdmontecarlobarostat method)": [[94, "openmm.openmm.RPMDMonteCarloBarostat.setForceGroup"]], "setfrequency() (openmm.openmm.rpmdmontecarlobarostat method)": [[94, "openmm.openmm.RPMDMonteCarloBarostat.setFrequency"]], "setname() (openmm.openmm.rpmdmontecarlobarostat method)": [[94, "openmm.openmm.RPMDMonteCarloBarostat.setName"]], "setrandomnumberseed() (openmm.openmm.rpmdmontecarlobarostat method)": [[94, "openmm.openmm.RPMDMonteCarloBarostat.setRandomNumberSeed"]], "thisown (openmm.openmm.rpmdmontecarlobarostat property)": [[94, "openmm.openmm.RPMDMonteCarloBarostat.thisown"]], "usesperiodicboundaryconditions() (openmm.openmm.rpmdmontecarlobarostat method)": [[94, "openmm.openmm.RPMDMonteCarloBarostat.usesPeriodicBoundaryConditions"]], "serializationnode (class in openmm.openmm)": [[95, "openmm.openmm.SerializationNode"]], "__init__() (openmm.openmm.serializationnode method)": [[95, "openmm.openmm.SerializationNode.__init__"]], "createchildnode() (openmm.openmm.serializationnode method)": [[95, "openmm.openmm.SerializationNode.createChildNode"]], "getboolproperty() (openmm.openmm.serializationnode method)": [[95, "openmm.openmm.SerializationNode.getBoolProperty"]], "getchildnode() (openmm.openmm.serializationnode method)": [[95, "openmm.openmm.SerializationNode.getChildNode"]], "getchildren() (openmm.openmm.serializationnode method)": [[95, "openmm.openmm.SerializationNode.getChildren"]], "getdoubleproperty() (openmm.openmm.serializationnode method)": [[95, "openmm.openmm.SerializationNode.getDoubleProperty"]], "getintproperty() (openmm.openmm.serializationnode method)": [[95, "openmm.openmm.SerializationNode.getIntProperty"]], "getlongproperty() (openmm.openmm.serializationnode method)": [[95, "openmm.openmm.SerializationNode.getLongProperty"]], "getname() (openmm.openmm.serializationnode method)": [[95, "openmm.openmm.SerializationNode.getName"]], "getproperties() (openmm.openmm.serializationnode method)": [[95, "openmm.openmm.SerializationNode.getProperties"]], "getstringproperty() (openmm.openmm.serializationnode method)": [[95, "openmm.openmm.SerializationNode.getStringProperty"]], "hasproperty() (openmm.openmm.serializationnode method)": [[95, "openmm.openmm.SerializationNode.hasProperty"]], "setboolproperty() (openmm.openmm.serializationnode method)": [[95, "openmm.openmm.SerializationNode.setBoolProperty"]], "setdoubleproperty() (openmm.openmm.serializationnode method)": [[95, "openmm.openmm.SerializationNode.setDoubleProperty"]], "setintproperty() (openmm.openmm.serializationnode method)": [[95, "openmm.openmm.SerializationNode.setIntProperty"]], "setlongproperty() (openmm.openmm.serializationnode method)": [[95, "openmm.openmm.SerializationNode.setLongProperty"]], "setname() (openmm.openmm.serializationnode method)": [[95, "openmm.openmm.SerializationNode.setName"]], "setstringproperty() (openmm.openmm.serializationnode method)": [[95, "openmm.openmm.SerializationNode.setStringProperty"]], "thisown (openmm.openmm.serializationnode property)": [[95, "openmm.openmm.SerializationNode.thisown"]], "serializationproxy (class in openmm.openmm)": [[96, "openmm.openmm.SerializationProxy"]], "__init__() (openmm.openmm.serializationproxy method)": [[96, "openmm.openmm.SerializationProxy.__init__"]], "deserialize() (openmm.openmm.serializationproxy method)": [[96, "openmm.openmm.SerializationProxy.deserialize"]], "getproxy() (openmm.openmm.serializationproxy static method)": [[96, "openmm.openmm.SerializationProxy.getProxy"]], "gettypename() (openmm.openmm.serializationproxy method)": [[96, "openmm.openmm.SerializationProxy.getTypeName"]], "registerproxy() (openmm.openmm.serializationproxy static method)": [[96, "openmm.openmm.SerializationProxy.registerProxy"]], "serialize() (openmm.openmm.serializationproxy method)": [[96, "openmm.openmm.SerializationProxy.serialize"]], "thisown (openmm.openmm.serializationproxy property)": [[96, "openmm.openmm.SerializationProxy.thisown"]], "state (class in openmm.openmm)": [[97, "openmm.openmm.State"]], "__copy__() (openmm.openmm.state method)": [[97, "openmm.openmm.State.__copy__"]], "__init__() (openmm.openmm.state method)": [[97, "openmm.openmm.State.__init__"]], "getdatatypes() (openmm.openmm.state method)": [[97, "openmm.openmm.State.getDataTypes"]], "getenergyparameterderivatives() (openmm.openmm.state method)": [[97, "openmm.openmm.State.getEnergyParameterDerivatives"]], "getforces() (openmm.openmm.state method)": [[97, "openmm.openmm.State.getForces"]], "getkineticenergy() (openmm.openmm.state method)": [[97, "openmm.openmm.State.getKineticEnergy"]], "getparameters() (openmm.openmm.state method)": [[97, "openmm.openmm.State.getParameters"]], "getperiodicboxvectors() (openmm.openmm.state method)": [[97, "openmm.openmm.State.getPeriodicBoxVectors"]], "getperiodicboxvolume() (openmm.openmm.state method)": [[97, "openmm.openmm.State.getPeriodicBoxVolume"]], "getpositions() (openmm.openmm.state method)": [[97, "openmm.openmm.State.getPositions"]], "getpotentialenergy() (openmm.openmm.state method)": [[97, "openmm.openmm.State.getPotentialEnergy"]], "getstepcount() (openmm.openmm.state method)": [[97, "openmm.openmm.State.getStepCount"]], "gettime() (openmm.openmm.state method)": [[97, "openmm.openmm.State.getTime"]], "getvelocities() (openmm.openmm.state method)": [[97, "openmm.openmm.State.getVelocities"]], "thisown (openmm.openmm.state property)": [[97, "openmm.openmm.State.thisown"]], "system (class in openmm.openmm)": [[98, "openmm.openmm.System"]], "__copy__() (openmm.openmm.system method)": [[98, "openmm.openmm.System.__copy__"]], "__init__() (openmm.openmm.system method)": [[98, "openmm.openmm.System.__init__"]], "addconstraint() (openmm.openmm.system method)": [[98, "openmm.openmm.System.addConstraint"]], "addforce() (openmm.openmm.system method)": [[98, "openmm.openmm.System.addForce"]], "addparticle() (openmm.openmm.system method)": [[98, "openmm.openmm.System.addParticle"]], "getconstraintparameters() (openmm.openmm.system method)": [[98, "openmm.openmm.System.getConstraintParameters"]], "getdefaultperiodicboxvectors() (openmm.openmm.system method)": [[98, "openmm.openmm.System.getDefaultPeriodicBoxVectors"]], "getforce() (openmm.openmm.system method)": [[98, "openmm.openmm.System.getForce"]], "getforces() (openmm.openmm.system method)": [[98, "openmm.openmm.System.getForces"]], "getnumconstraints() (openmm.openmm.system method)": [[98, "openmm.openmm.System.getNumConstraints"]], "getnumforces() (openmm.openmm.system method)": [[98, "openmm.openmm.System.getNumForces"]], "getnumparticles() (openmm.openmm.system method)": [[98, "openmm.openmm.System.getNumParticles"]], "getparticlemass() (openmm.openmm.system method)": [[98, "openmm.openmm.System.getParticleMass"]], "getvirtualsite() (openmm.openmm.system method)": [[98, "openmm.openmm.System.getVirtualSite"]], "isvirtualsite() (openmm.openmm.system method)": [[98, "openmm.openmm.System.isVirtualSite"]], "removeconstraint() (openmm.openmm.system method)": [[98, "openmm.openmm.System.removeConstraint"]], "removeforce() (openmm.openmm.system method)": [[98, "openmm.openmm.System.removeForce"]], "setconstraintparameters() (openmm.openmm.system method)": [[98, "openmm.openmm.System.setConstraintParameters"]], "setdefaultperiodicboxvectors() (openmm.openmm.system method)": [[98, "openmm.openmm.System.setDefaultPeriodicBoxVectors"]], "setparticlemass() (openmm.openmm.system method)": [[98, "openmm.openmm.System.setParticleMass"]], "setvirtualsite() (openmm.openmm.system method)": [[98, "openmm.openmm.System.setVirtualSite"]], "thisown (openmm.openmm.system property)": [[98, "openmm.openmm.System.thisown"]], "usesperiodicboundaryconditions() (openmm.openmm.system method)": [[98, "openmm.openmm.System.usesPeriodicBoundaryConditions"]], "copy() (openmm.openmm.tabulatedfunction method)": [[99, "openmm.openmm.TabulatedFunction.Copy"]], "tabulatedfunction (class in openmm.openmm)": [[99, "openmm.openmm.TabulatedFunction"]], "__eq__() (openmm.openmm.tabulatedfunction method)": [[99, "openmm.openmm.TabulatedFunction.__eq__"]], "__init__() (openmm.openmm.tabulatedfunction method)": [[99, "openmm.openmm.TabulatedFunction.__init__"]], "__ne__() (openmm.openmm.tabulatedfunction method)": [[99, "openmm.openmm.TabulatedFunction.__ne__"]], "getperiodic() (openmm.openmm.tabulatedfunction method)": [[99, "openmm.openmm.TabulatedFunction.getPeriodic"]], "getupdatecount() (openmm.openmm.tabulatedfunction method)": [[99, "openmm.openmm.TabulatedFunction.getUpdateCount"]], "thisown (openmm.openmm.tabulatedfunction property)": [[99, "openmm.openmm.TabulatedFunction.thisown"]], "threeparticleaveragesite (class in openmm.openmm)": [[100, "openmm.openmm.ThreeParticleAverageSite"]], "__init__() (openmm.openmm.threeparticleaveragesite method)": [[100, "openmm.openmm.ThreeParticleAverageSite.__init__"]], "getnumparticles() (openmm.openmm.threeparticleaveragesite method)": [[100, "openmm.openmm.ThreeParticleAverageSite.getNumParticles"]], "getparticle() (openmm.openmm.threeparticleaveragesite method)": [[100, "openmm.openmm.ThreeParticleAverageSite.getParticle"]], "getweight() (openmm.openmm.threeparticleaveragesite method)": [[100, "openmm.openmm.ThreeParticleAverageSite.getWeight"]], "thisown (openmm.openmm.threeparticleaveragesite property)": [[100, "openmm.openmm.ThreeParticleAverageSite.thisown"]], "twoparticleaveragesite (class in openmm.openmm)": [[101, "openmm.openmm.TwoParticleAverageSite"]], "__init__() (openmm.openmm.twoparticleaveragesite method)": [[101, "openmm.openmm.TwoParticleAverageSite.__init__"]], "getnumparticles() (openmm.openmm.twoparticleaveragesite method)": [[101, "openmm.openmm.TwoParticleAverageSite.getNumParticles"]], "getparticle() (openmm.openmm.twoparticleaveragesite method)": [[101, "openmm.openmm.TwoParticleAverageSite.getParticle"]], "getweight() (openmm.openmm.twoparticleaveragesite method)": [[101, "openmm.openmm.TwoParticleAverageSite.getWeight"]], "thisown (openmm.openmm.twoparticleaveragesite property)": [[101, "openmm.openmm.TwoParticleAverageSite.thisown"]], "variablelangevinintegrator (class in openmm.openmm)": [[102, "openmm.openmm.VariableLangevinIntegrator"]], "__init__() (openmm.openmm.variablelangevinintegrator method)": [[102, "openmm.openmm.VariableLangevinIntegrator.__init__"]], "getconstrainttolerance() (openmm.openmm.variablelangevinintegrator method)": [[102, "openmm.openmm.VariableLangevinIntegrator.getConstraintTolerance"]], "geterrortolerance() (openmm.openmm.variablelangevinintegrator method)": [[102, "openmm.openmm.VariableLangevinIntegrator.getErrorTolerance"]], "getfriction() (openmm.openmm.variablelangevinintegrator method)": [[102, "openmm.openmm.VariableLangevinIntegrator.getFriction"]], "getintegrationforcegroups() (openmm.openmm.variablelangevinintegrator method)": [[102, "openmm.openmm.VariableLangevinIntegrator.getIntegrationForceGroups"]], "getmaximumstepsize() (openmm.openmm.variablelangevinintegrator method)": [[102, "openmm.openmm.VariableLangevinIntegrator.getMaximumStepSize"]], "getrandomnumberseed() (openmm.openmm.variablelangevinintegrator method)": [[102, "openmm.openmm.VariableLangevinIntegrator.getRandomNumberSeed"]], "getstepsize() (openmm.openmm.variablelangevinintegrator method)": [[102, "openmm.openmm.VariableLangevinIntegrator.getStepSize"]], "gettemperature() (openmm.openmm.variablelangevinintegrator method)": [[102, "openmm.openmm.VariableLangevinIntegrator.getTemperature"]], "setconstrainttolerance() (openmm.openmm.variablelangevinintegrator method)": [[102, "openmm.openmm.VariableLangevinIntegrator.setConstraintTolerance"]], "seterrortolerance() (openmm.openmm.variablelangevinintegrator method)": [[102, "openmm.openmm.VariableLangevinIntegrator.setErrorTolerance"]], "setfriction() (openmm.openmm.variablelangevinintegrator method)": [[102, "openmm.openmm.VariableLangevinIntegrator.setFriction"]], "setintegrationforcegroups() (openmm.openmm.variablelangevinintegrator method)": [[102, "openmm.openmm.VariableLangevinIntegrator.setIntegrationForceGroups"]], "setmaximumstepsize() (openmm.openmm.variablelangevinintegrator method)": [[102, "openmm.openmm.VariableLangevinIntegrator.setMaximumStepSize"]], "setrandomnumberseed() (openmm.openmm.variablelangevinintegrator method)": [[102, "openmm.openmm.VariableLangevinIntegrator.setRandomNumberSeed"]], "setstepsize() (openmm.openmm.variablelangevinintegrator method)": [[102, "openmm.openmm.VariableLangevinIntegrator.setStepSize"]], "settemperature() (openmm.openmm.variablelangevinintegrator method)": [[102, "openmm.openmm.VariableLangevinIntegrator.setTemperature"]], "step() (openmm.openmm.variablelangevinintegrator method)": [[102, "openmm.openmm.VariableLangevinIntegrator.step"]], "stepto() (openmm.openmm.variablelangevinintegrator method)": [[102, "openmm.openmm.VariableLangevinIntegrator.stepTo"]], "thisown (openmm.openmm.variablelangevinintegrator property)": [[102, "openmm.openmm.VariableLangevinIntegrator.thisown"]], "variableverletintegrator (class in openmm.openmm)": [[103, "openmm.openmm.VariableVerletIntegrator"]], "__init__() (openmm.openmm.variableverletintegrator method)": [[103, "openmm.openmm.VariableVerletIntegrator.__init__"]], "getconstrainttolerance() (openmm.openmm.variableverletintegrator method)": [[103, "openmm.openmm.VariableVerletIntegrator.getConstraintTolerance"]], "geterrortolerance() (openmm.openmm.variableverletintegrator method)": [[103, "openmm.openmm.VariableVerletIntegrator.getErrorTolerance"]], "getintegrationforcegroups() (openmm.openmm.variableverletintegrator method)": [[103, "openmm.openmm.VariableVerletIntegrator.getIntegrationForceGroups"]], "getmaximumstepsize() (openmm.openmm.variableverletintegrator method)": [[103, "openmm.openmm.VariableVerletIntegrator.getMaximumStepSize"]], "getstepsize() (openmm.openmm.variableverletintegrator method)": [[103, "openmm.openmm.VariableVerletIntegrator.getStepSize"]], "setconstrainttolerance() (openmm.openmm.variableverletintegrator method)": [[103, "openmm.openmm.VariableVerletIntegrator.setConstraintTolerance"]], "seterrortolerance() (openmm.openmm.variableverletintegrator method)": [[103, "openmm.openmm.VariableVerletIntegrator.setErrorTolerance"]], "setintegrationforcegroups() (openmm.openmm.variableverletintegrator method)": [[103, "openmm.openmm.VariableVerletIntegrator.setIntegrationForceGroups"]], "setmaximumstepsize() (openmm.openmm.variableverletintegrator method)": [[103, "openmm.openmm.VariableVerletIntegrator.setMaximumStepSize"]], "setstepsize() (openmm.openmm.variableverletintegrator method)": [[103, "openmm.openmm.VariableVerletIntegrator.setStepSize"]], "step() (openmm.openmm.variableverletintegrator method)": [[103, "openmm.openmm.VariableVerletIntegrator.step"]], "stepto() (openmm.openmm.variableverletintegrator method)": [[103, "openmm.openmm.VariableVerletIntegrator.stepTo"]], "thisown (openmm.openmm.variableverletintegrator property)": [[103, "openmm.openmm.VariableVerletIntegrator.thisown"]], "verletintegrator (class in openmm.openmm)": [[104, "openmm.openmm.VerletIntegrator"]], "__init__() (openmm.openmm.verletintegrator method)": [[104, "openmm.openmm.VerletIntegrator.__init__"]], "getconstrainttolerance() (openmm.openmm.verletintegrator method)": [[104, "openmm.openmm.VerletIntegrator.getConstraintTolerance"]], "getintegrationforcegroups() (openmm.openmm.verletintegrator method)": [[104, "openmm.openmm.VerletIntegrator.getIntegrationForceGroups"]], "getstepsize() (openmm.openmm.verletintegrator method)": [[104, "openmm.openmm.VerletIntegrator.getStepSize"]], "setconstrainttolerance() (openmm.openmm.verletintegrator method)": [[104, "openmm.openmm.VerletIntegrator.setConstraintTolerance"]], "setintegrationforcegroups() (openmm.openmm.verletintegrator method)": [[104, "openmm.openmm.VerletIntegrator.setIntegrationForceGroups"]], "setstepsize() (openmm.openmm.verletintegrator method)": [[104, "openmm.openmm.VerletIntegrator.setStepSize"]], "step() (openmm.openmm.verletintegrator method)": [[104, "openmm.openmm.VerletIntegrator.step"]], "thisown (openmm.openmm.verletintegrator property)": [[104, "openmm.openmm.VerletIntegrator.thisown"]], "virtualsite (class in openmm.openmm)": [[105, "openmm.openmm.VirtualSite"]], "__init__() (openmm.openmm.virtualsite method)": [[105, "openmm.openmm.VirtualSite.__init__"]], "getnumparticles() (openmm.openmm.virtualsite method)": [[105, "openmm.openmm.VirtualSite.getNumParticles"]], "getparticle() (openmm.openmm.virtualsite method)": [[105, "openmm.openmm.VirtualSite.getParticle"]], "thisown (openmm.openmm.virtualsite property)": [[105, "openmm.openmm.VirtualSite.thisown"]], "xmlserializer (class in openmm.openmm)": [[106, "openmm.openmm.XmlSerializer"]], "__init__() (openmm.openmm.xmlserializer method)": [[106, "openmm.openmm.XmlSerializer.__init__"]], "clone() (openmm.openmm.xmlserializer static method)": [[106, "openmm.openmm.XmlSerializer.clone"]], "deserialize() (openmm.openmm.xmlserializer static method)": [[106, "openmm.openmm.XmlSerializer.deserialize"]], "deserializesystem() (openmm.openmm.xmlserializer static method)": [[106, "openmm.openmm.XmlSerializer.deserializeSystem"]], "serialize() (openmm.openmm.xmlserializer static method)": [[106, "openmm.openmm.XmlSerializer.serialize"]], "serializesystem() (openmm.openmm.xmlserializer static method)": [[106, "openmm.openmm.XmlSerializer.serializeSystem"]], "thisown (openmm.openmm.xmlserializer property)": [[106, "openmm.openmm.XmlSerializer.thisown"]], "basedimension (class in openmm.unit.basedimension)": [[107, "openmm.unit.basedimension.BaseDimension"]], "__hash__() (openmm.unit.basedimension.basedimension method)": [[107, "openmm.unit.basedimension.BaseDimension.__hash__"]], "__init__() (openmm.unit.basedimension.basedimension method)": [[107, "openmm.unit.basedimension.BaseDimension.__init__"]], "__lt__() (openmm.unit.basedimension.basedimension method)": [[107, "openmm.unit.basedimension.BaseDimension.__lt__"]], "baseunit (class in openmm.unit.baseunit)": [[108, "openmm.unit.baseunit.BaseUnit"]], "__init__() (openmm.unit.baseunit.baseunit method)": [[108, "openmm.unit.baseunit.BaseUnit.__init__"]], "__lt__() (openmm.unit.baseunit.baseunit method)": [[108, "openmm.unit.baseunit.BaseUnit.__lt__"]], "__str__() (openmm.unit.baseunit.baseunit method)": [[108, "openmm.unit.baseunit.BaseUnit.__str__"]], "conversion_factor_to() (openmm.unit.baseunit.baseunit method)": [[108, "openmm.unit.baseunit.BaseUnit.conversion_factor_to"]], "define_conversion_factor_to() (openmm.unit.baseunit.baseunit method)": [[108, "openmm.unit.baseunit.BaseUnit.define_conversion_factor_to"]], "get_dimension_tuple() (openmm.unit.baseunit.baseunit method)": [[108, "openmm.unit.baseunit.BaseUnit.get_dimension_tuple"]], "iter_base_dimensions() (openmm.unit.baseunit.baseunit method)": [[108, "openmm.unit.baseunit.BaseUnit.iter_base_dimensions"]], "siprefix (class in openmm.unit.prefix)": [[109, "openmm.unit.prefix.SiPrefix"]], "__init__() (openmm.unit.prefix.siprefix method)": [[109, "openmm.unit.prefix.SiPrefix.__init__"]], "__mul__() (openmm.unit.prefix.siprefix method)": [[109, "openmm.unit.prefix.SiPrefix.__mul__"]], "quantity (class in openmm.unit.quantity)": [[110, "openmm.unit.quantity.Quantity"]], "__abs__() (openmm.unit.quantity.quantity method)": [[110, "openmm.unit.quantity.Quantity.__abs__"]], "__add__() (openmm.unit.quantity.quantity method)": [[110, "openmm.unit.quantity.Quantity.__add__"]], "__copy__() (openmm.unit.quantity.quantity method)": [[110, "openmm.unit.quantity.Quantity.__copy__"]], "__deepcopy__() (openmm.unit.quantity.quantity method)": [[110, "openmm.unit.quantity.Quantity.__deepcopy__"]], "__div__() (openmm.unit.quantity.quantity method)": [[110, "openmm.unit.quantity.Quantity.__div__"]], "__eq__() (openmm.unit.quantity.quantity method)": [[110, "openmm.unit.quantity.Quantity.__eq__"]], "__getattr__() (openmm.unit.quantity.quantity method)": [[110, "openmm.unit.quantity.Quantity.__getattr__"]], "__getitem__() (openmm.unit.quantity.quantity method)": [[110, "openmm.unit.quantity.Quantity.__getitem__"]], "__init__() (openmm.unit.quantity.quantity method)": [[110, "openmm.unit.quantity.Quantity.__init__"]], "__len__() (openmm.unit.quantity.quantity method)": [[110, "openmm.unit.quantity.Quantity.__len__"]], "__mul__() (openmm.unit.quantity.quantity method)": [[110, "openmm.unit.quantity.Quantity.__mul__"]], "__ne__() (openmm.unit.quantity.quantity method)": [[110, "openmm.unit.quantity.Quantity.__ne__"]], "__neg__() (openmm.unit.quantity.quantity method)": [[110, "openmm.unit.quantity.Quantity.__neg__"]], "__nonzero__() (openmm.unit.quantity.quantity method)": [[110, "openmm.unit.quantity.Quantity.__nonzero__"]], "__pos__() (openmm.unit.quantity.quantity method)": [[110, "openmm.unit.quantity.Quantity.__pos__"]], "__pow__() (openmm.unit.quantity.quantity method)": [[110, "openmm.unit.quantity.Quantity.__pow__"]], "__rdiv__() (openmm.unit.quantity.quantity method)": [[110, "openmm.unit.quantity.Quantity.__rdiv__"]], "__repr__() (openmm.unit.quantity.quantity method)": [[110, "openmm.unit.quantity.Quantity.__repr__"]], "__rmul__() (openmm.unit.quantity.quantity method)": [[110, "openmm.unit.quantity.Quantity.__rmul__"]], "__rtruediv__() (openmm.unit.quantity.quantity method)": [[110, "openmm.unit.quantity.Quantity.__rtruediv__"]], "__str__() (openmm.unit.quantity.quantity method)": [[110, "openmm.unit.quantity.Quantity.__str__"]], "__sub__() (openmm.unit.quantity.quantity method)": [[110, "openmm.unit.quantity.Quantity.__sub__"]], "__truediv__() (openmm.unit.quantity.quantity method)": [[110, "openmm.unit.quantity.Quantity.__truediv__"]], "in_unit_system() (openmm.unit.quantity.quantity method)": [[110, "openmm.unit.quantity.Quantity.in_unit_system"]], "in_units_of() (openmm.unit.quantity.quantity method)": [[110, "openmm.unit.quantity.Quantity.in_units_of"]], "max() (openmm.unit.quantity.quantity method)": [[110, "openmm.unit.quantity.Quantity.max"]], "mean() (openmm.unit.quantity.quantity method)": [[110, "openmm.unit.quantity.Quantity.mean"]], "min() (openmm.unit.quantity.quantity method)": [[110, "openmm.unit.quantity.Quantity.min"]], "reduce_unit() (openmm.unit.quantity.quantity method)": [[110, "openmm.unit.quantity.Quantity.reduce_unit"]], "reshape() (openmm.unit.quantity.quantity method)": [[110, "openmm.unit.quantity.Quantity.reshape"]], "sqrt() (openmm.unit.quantity.quantity method)": [[110, "openmm.unit.quantity.Quantity.sqrt"]], "std() (openmm.unit.quantity.quantity method)": [[110, "openmm.unit.quantity.Quantity.std"]], "sum() (openmm.unit.quantity.quantity method)": [[110, "openmm.unit.quantity.Quantity.sum"]], "value_in_unit() (openmm.unit.quantity.quantity method)": [[110, "openmm.unit.quantity.Quantity.value_in_unit"]], "value_in_unit_system() (openmm.unit.quantity.quantity method)": [[110, "openmm.unit.quantity.Quantity.value_in_unit_system"]], "scaledunit (class in openmm.unit.unit)": [[111, "openmm.unit.unit.ScaledUnit"]], "__init__() (openmm.unit.unit.scaledunit method)": [[111, "openmm.unit.unit.ScaledUnit.__init__"]], "__lt__() (openmm.unit.unit.scaledunit method)": [[111, "openmm.unit.unit.ScaledUnit.__lt__"]], "__repr__() (openmm.unit.unit.scaledunit method)": [[111, "openmm.unit.unit.ScaledUnit.__repr__"]], "__str__() (openmm.unit.unit.scaledunit method)": [[111, "openmm.unit.unit.ScaledUnit.__str__"]], "get_dimension_tuple() (openmm.unit.unit.scaledunit method)": [[111, "openmm.unit.unit.ScaledUnit.get_dimension_tuple"]], "iter_base_dimensions() (openmm.unit.unit.scaledunit method)": [[111, "openmm.unit.unit.ScaledUnit.iter_base_dimensions"]], "unit (class in openmm.unit.unit)": [[112, "openmm.unit.unit.Unit"]], "__div__() (openmm.unit.unit.unit method)": [[112, "openmm.unit.unit.Unit.__div__"]], "__hash__() (openmm.unit.unit.unit method)": [[112, "openmm.unit.unit.Unit.__hash__"]], "__init__() (openmm.unit.unit.unit method)": [[112, "openmm.unit.unit.Unit.__init__"]], "__lt__() (openmm.unit.unit.unit method)": [[112, "openmm.unit.unit.Unit.__lt__"]], "__pow__() (openmm.unit.unit.unit method)": [[112, "openmm.unit.unit.Unit.__pow__"]], "__repr__() (openmm.unit.unit.unit method)": [[112, "openmm.unit.unit.Unit.__repr__"]], "__str__() (openmm.unit.unit.unit method)": [[112, "openmm.unit.unit.Unit.__str__"]], "__truediv__() (openmm.unit.unit.unit method)": [[112, "openmm.unit.unit.Unit.__truediv__"]], "conversion_factor_to() (openmm.unit.unit.unit method)": [[112, "openmm.unit.unit.Unit.conversion_factor_to"]], "create_unit() (openmm.unit.unit.unit method)": [[112, "openmm.unit.unit.Unit.create_unit"]], "get_conversion_factor_to_base_units() (openmm.unit.unit.unit method)": [[112, "openmm.unit.unit.Unit.get_conversion_factor_to_base_units"]], "get_name() (openmm.unit.unit.unit method)": [[112, "openmm.unit.unit.Unit.get_name"]], "get_symbol() (openmm.unit.unit.unit method)": [[112, "openmm.unit.unit.Unit.get_symbol"]], "in_unit_system() (openmm.unit.unit.unit method)": [[112, "openmm.unit.unit.Unit.in_unit_system"]], "is_compatible() (openmm.unit.unit.unit method)": [[112, "openmm.unit.unit.Unit.is_compatible"]], "is_dimensionless() (openmm.unit.unit.unit method)": [[112, "openmm.unit.unit.Unit.is_dimensionless"]], "iter_all_base_units() (openmm.unit.unit.unit method)": [[112, "openmm.unit.unit.Unit.iter_all_base_units"]], "iter_base_dimensions() (openmm.unit.unit.unit method)": [[112, "openmm.unit.unit.Unit.iter_base_dimensions"]], "iter_top_base_units() (openmm.unit.unit.unit method)": [[112, "openmm.unit.unit.Unit.iter_top_base_units"]], "sqrt() (openmm.unit.unit.unit method)": [[112, "openmm.unit.unit.Unit.sqrt"]], "unitsystem (class in openmm.unit.unit)": [[113, "openmm.unit.unit.UnitSystem"]], "__init__() (openmm.unit.unit.unitsystem method)": [[113, "openmm.unit.unit.UnitSystem.__init__"]], "__str__() (openmm.unit.unit.unitsystem method)": [[113, "openmm.unit.unit.UnitSystem.__str__"]], "express_unit() (openmm.unit.unit.unitsystem method)": [[113, "openmm.unit.unit.UnitSystem.express_unit"]], "vec3 (class in openmm.vec3)": [[114, "openmm.vec3.Vec3"]], "__add__() (openmm.vec3.vec3 method)": [[114, "openmm.vec3.Vec3.__add__"]], "__div__() (openmm.vec3.vec3 method)": [[114, "openmm.vec3.Vec3.__div__"]], "__getnewargs__() (openmm.vec3.vec3 method)": [[114, "openmm.vec3.Vec3.__getnewargs__"]], "__init__() (openmm.vec3.vec3 method)": [[114, "openmm.vec3.Vec3.__init__"]], "__mul__() (openmm.vec3.vec3 method)": [[114, "openmm.vec3.Vec3.__mul__"]], "__new__() (openmm.vec3.vec3 static method)": [[114, "openmm.vec3.Vec3.__new__"]], "__radd__() (openmm.vec3.vec3 method)": [[114, "openmm.vec3.Vec3.__radd__"]], "__rmul__() (openmm.vec3.vec3 method)": [[114, "openmm.vec3.Vec3.__rmul__"]], "__rsub__() (openmm.vec3.vec3 method)": [[114, "openmm.vec3.Vec3.__rsub__"]], "__sub__() (openmm.vec3.vec3 method)": [[114, "openmm.vec3.Vec3.__sub__"]], "__truediv__() (openmm.vec3.vec3 method)": [[114, "openmm.vec3.Vec3.__truediv__"]], "count() (openmm.vec3.vec3 method)": [[114, "openmm.vec3.Vec3.count"]], "index() (openmm.vec3.vec3 method)": [[114, "openmm.vec3.Vec3.index"]], "x (openmm.vec3.vec3 attribute)": [[114, "openmm.vec3.Vec3.x"]], "y (openmm.vec3.vec3 attribute)": [[114, "openmm.vec3.Vec3.y"]], "z (openmm.vec3.vec3 attribute)": [[114, "openmm.vec3.Vec3.z"]]}})